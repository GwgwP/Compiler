/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.parser;

import minipython.lexer.*;
import minipython.node.*;
import minipython.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
	this.nodeList = listNode;

        if(!stack.hasNext())
        {
            stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return (ArrayList) ((State) stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(lexer.next());
                        push(action[1], list);
                        last_shift = action[1];
                    }
		    break;
                case REDUCE:
                    switch(action[1])
                    {

                    case 0:
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;


                    case 1:
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;


                    case 2:
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;


                    case 3:
		    {
			ArrayList list = new3();
			push(goTo(1), list);
		    }
		    break;


                    case 4:
		    {
			ArrayList list = new4();
			push(goTo(2), list);
		    }
		    break;


                    case 5:
		    {
			ArrayList list = new5();
			push(goTo(2), list);
		    }
		    break;


                    case 6:
		    {
			ArrayList list = new6();
			push(goTo(2), list);
		    }
		    break;


                    case 7:
		    {
			ArrayList list = new7();
			push(goTo(2), list);
		    }
		    break;


                    case 8:
		    {
			ArrayList list = new8();
			push(goTo(3), list);
		    }
		    break;


                    case 9:
		    {
			ArrayList list = new9();
			push(goTo(3), list);
		    }
		    break;


                    case 10:
		    {
			ArrayList list = new10();
			push(goTo(3), list);
		    }
		    break;


                    case 11:
		    {
			ArrayList list = new11();
			push(goTo(3), list);
		    }
		    break;


                    case 12:
		    {
			ArrayList list = new12();
			push(goTo(4), list);
		    }
		    break;


                    case 13:
		    {
			ArrayList list = new13();
			push(goTo(4), list);
		    }
		    break;


                    case 14:
		    {
			ArrayList list = new14();
			push(goTo(5), list);
		    }
		    break;


                    case 15:
		    {
			ArrayList list = new15();
			push(goTo(6), list);
		    }
		    break;


                    case 16:
		    {
			ArrayList list = new16();
			push(goTo(6), list);
		    }
		    break;


                    case 17:
		    {
			ArrayList list = new17();
			push(goTo(6), list);
		    }
		    break;


                    case 18:
		    {
			ArrayList list = new18();
			push(goTo(6), list);
		    }
		    break;


                    case 19:
		    {
			ArrayList list = new19();
			push(goTo(6), list);
		    }
		    break;


                    case 20:
		    {
			ArrayList list = new20();
			push(goTo(6), list);
		    }
		    break;


                    case 21:
		    {
			ArrayList list = new21();
			push(goTo(6), list);
		    }
		    break;


                    case 22:
		    {
			ArrayList list = new22();
			push(goTo(6), list);
		    }
		    break;


                    case 23:
		    {
			ArrayList list = new23();
			push(goTo(6), list);
		    }
		    break;


                    case 24:
		    {
			ArrayList list = new24();
			push(goTo(6), list);
		    }
		    break;


                    case 25:
		    {
			ArrayList list = new25();
			push(goTo(6), list);
		    }
		    break;


                    case 26:
		    {
			ArrayList list = new26();
			push(goTo(6), list);
		    }
		    break;


                    case 27:
		    {
			ArrayList list = new27();
			push(goTo(6), list);
		    }
		    break;


                    case 28:
		    {
			ArrayList list = new28();
			push(goTo(6), list);
		    }
		    break;


                    case 29:
		    {
			ArrayList list = new29();
			push(goTo(6), list);
		    }
		    break;


                    case 30:
		    {
			ArrayList list = new30();
			push(goTo(6), list);
		    }
		    break;


                    case 31:
		    {
			ArrayList list = new31();
			push(goTo(6), list);
		    }
		    break;


                    case 32:
		    {
			ArrayList list = new32();
			push(goTo(6), list);
		    }
		    break;


                    case 33:
		    {
			ArrayList list = new33();
			push(goTo(6), list);
		    }
		    break;


                    case 34:
		    {
			ArrayList list = new34();
			push(goTo(6), list);
		    }
		    break;


                    case 35:
		    {
			ArrayList list = new35();
			push(goTo(6), list);
		    }
		    break;


                    case 36:
		    {
			ArrayList list = new36();
			push(goTo(6), list);
		    }
		    break;


                    case 37:
		    {
			ArrayList list = new37();
			push(goTo(6), list);
		    }
		    break;


                    case 38:
		    {
			ArrayList list = new38();
			push(goTo(6), list);
		    }
		    break;


                    case 39:
		    {
			ArrayList list = new39();
			push(goTo(6), list);
		    }
		    break;


                    case 40:
		    {
			ArrayList list = new40();
			push(goTo(6), list);
		    }
		    break;


                    case 41:
		    {
			ArrayList list = new41();
			push(goTo(6), list);
		    }
		    break;


                    case 42:
		    {
			ArrayList list = new42();
			push(goTo(6), list);
		    }
		    break;


                    case 43:
		    {
			ArrayList list = new43();
			push(goTo(7), list);
		    }
		    break;


                    case 44:
		    {
			ArrayList list = new44();
			push(goTo(7), list);
		    }
		    break;


                    case 45:
		    {
			ArrayList list = new45();
			push(goTo(8), list);
		    }
		    break;


                    case 46:
		    {
			ArrayList list = new46();
			push(goTo(8), list);
		    }
		    break;


                    case 47:
		    {
			ArrayList list = new47();
			push(goTo(9), list);
		    }
		    break;


                    case 48:
		    {
			ArrayList list = new48();
			push(goTo(10), list);
		    }
		    break;


                    case 49:
		    {
			ArrayList list = new49();
			push(goTo(10), list);
		    }
		    break;


                    case 50:
		    {
			ArrayList list = new50();
			push(goTo(11), list);
		    }
		    break;


                    case 51:
		    {
			ArrayList list = new51();
			push(goTo(11), list);
		    }
		    break;


                    case 52:
		    {
			ArrayList list = new52();
			push(goTo(12), list);
		    }
		    break;


                    case 53:
		    {
			ArrayList list = new53();
			push(goTo(12), list);
		    }
		    break;


                    case 54:
		    {
			ArrayList list = new54();
			push(goTo(13), list);
		    }
		    break;


                    case 55:
		    {
			ArrayList list = new55();
			push(goTo(13), list);
		    }
		    break;


                    case 56:
		    {
			ArrayList list = new56();
			push(goTo(13), list);
		    }
		    break;


                    case 57:
		    {
			ArrayList list = new57();
			push(goTo(13), list);
		    }
		    break;


                    case 58:
		    {
			ArrayList list = new58();
			push(goTo(13), list);
		    }
		    break;


                    case 59:
		    {
			ArrayList list = new59();
			push(goTo(13), list);
		    }
		    break;


                    case 60:
		    {
			ArrayList list = new60();
			push(goTo(13), list);
		    }
		    break;


                    case 61:
		    {
			ArrayList list = new61();
			push(goTo(13), list);
		    }
		    break;


                    case 62:
		    {
			ArrayList list = new62();
			push(goTo(14), list);
		    }
		    break;


                    case 63:
		    {
			ArrayList list = new63();
			push(goTo(15), list);
		    }
		    break;


                    case 64:
		    {
			ArrayList list = new64();
			push(goTo(15), list);
		    }
		    break;


                    case 65:
		    {
			ArrayList list = new65();
			push(goTo(15), list);
		    }
		    break;


                    case 66:
		    {
			ArrayList list = new66();
			push(goTo(16), list);
		    }
		    break;


                    case 67:
		    {
			ArrayList list = new67();
			push(goTo(16), list);
		    }
		    break;


                    case 68:
		    {
			ArrayList list = new68();
			push(goTo(16), list);
		    }
		    break;


                    case 69:
		    {
			ArrayList list = new69();
			push(goTo(16), list);
		    }
		    break;


                    case 70:
		    {
			ArrayList list = new70();
			push(goTo(16), list);
		    }
		    break;


                    case 71:
		    {
			ArrayList list = new71();
			push(goTo(17), list);
		    }
		    break;


                    case 72:
		    {
			ArrayList list = new72();
			push(goTo(17), list);
		    }
		    break;


                    case 73:
		    {
			ArrayList list = new73();
			push(goTo(17), list);
		    }
		    break;


                    case 74:
		    {
			ArrayList list = new74();
			push(goTo(18), list);
		    }
		    break;


                    case 75:
		    {
			ArrayList list = new75();
			push(goTo(18), list);
		    }
		    break;


                    case 76:
		    {
			ArrayList list = new76();
			push(goTo(18), list);
		    }
		    break;


                    case 77:
		    {
			ArrayList list = new77();
			push(goTo(19), list);
		    }
		    break;


                    case 78:
		    {
			ArrayList list = new78();
			push(goTo(19), list);
		    }
		    break;


                    case 79:
		    {
			ArrayList list = new79();
			push(goTo(19), list);
		    }
		    break;


                    case 80:
		    {
			ArrayList list = new80();
			push(goTo(19), list);
		    }
		    break;


                    case 81:
		    {
			ArrayList list = new81();
			push(goTo(20), list);
		    }
		    break;


                    case 82:
		    {
			ArrayList list = new82();
			push(goTo(20), list);
		    }
		    break;


                    case 83:
		    {
			ArrayList list = new83();
			push(goTo(21), list);
		    }
		    break;


                    case 84:
		    {
			ArrayList list = new84();
			push(goTo(21), list);
		    }
		    break;


                    case 85:
		    {
			ArrayList list = new85();
			push(goTo(21), list);
		    }
		    break;


                    case 86:
		    {
			ArrayList list = new86();
			push(goTo(21), list);
		    }
		    break;


                    case 87:
		    {
			ArrayList list = new87();
			push(goTo(21), list);
		    }
		    break;


                    case 88:
		    {
			ArrayList list = new88();
			push(goTo(21), list);
		    }
		    break;


                    case 89:
		    {
			ArrayList list = new89();
			push(goTo(21), list);
		    }
		    break;


                    case 90:
		    {
			ArrayList list = new90();
			push(goTo(22), list);
		    }
		    break;


                    case 91:
		    {
			ArrayList list = new91();
			push(goTo(22), list);
		    }
		    break;


                    case 92:
		    {
			ArrayList list = new92();
			push(goTo(22), list);
		    }
		    break;


                    case 93:
		    {
			ArrayList list = new93();
			push(goTo(22), list);
		    }
		    break;


                    case 94:
		    {
			ArrayList list = new94();
			push(goTo(22), list);
		    }
		    break;


                    case 95:
		    {
			ArrayList list = new95();
			push(goTo(22), list);
		    }
		    break;


                    case 96:
		    {
			ArrayList list = new96();
			push(goTo(23), list);
		    }
		    break;


                    case 97:
		    {
			ArrayList list = new97();
			push(goTo(23), list);
		    }
		    break;


                    case 98:
		    {
			ArrayList list = new98();
			push(goTo(24), list);
		    }
		    break;


                    case 99:
		    {
			ArrayList list = new99();
			push(goTo(24), list);
		    }
		    break;


                    case 100:
		    {
			ArrayList list = new100();
			push(goTo(25), list);
		    }
		    break;


                    case 101:
		    {
			ArrayList list = new101();
			push(goTo(25), list);
		    }
		    break;


                    case 102:
		    {
			ArrayList list = new102();
			push(goTo(26), list);
		    }
		    break;


                    case 103:
		    {
			ArrayList list = new103();
			push(goTo(26), list);
		    }
		    break;


                    case 104:
		    {
			ArrayList list = new104();
			push(goTo(27), list);
		    }
		    break;


                    case 105:
		    {
			ArrayList list = new105();
			push(goTo(27), list);
		    }
		    break;

                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PGoal node1 = (PGoal) ((ArrayList)pop()).get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }



    ArrayList new0()
    {
        ArrayList nodeList = new ArrayList();

        PGoal pgoalNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        }

        pgoalNode1 = new AGoal(listNode2);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    ArrayList new1()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGoal pgoalNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pgoalNode1 = new AGoal(listNode3);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    ArrayList new2()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommands pcommandsNode1;
        {
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pcommandsNode1 = new AFuncCommands(pfunctionNode2);
        }
	nodeList.add(pcommandsNode1);
        return nodeList;
    }



    ArrayList new3()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommands pcommandsNode1;
        {
        PStatement pstatementNode2;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);

        pcommandsNode1 = new AStatCommands(pstatementNode2);
        }
	nodeList.add(pcommandsNode1);
        return nodeList;
    }



    ArrayList new4()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        PStatement pstatementNode4;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
        }
        pstatementNode4 = (PStatement)nodeArrayList6.get(0);

        pfunctionNode1 = new ADefFuncFunction(tidNode2, listNode3, pstatementNode4);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new5()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        PStatement pstatementNode4;
        tidNode2 = (TId)nodeArrayList3.get(0);
        {
        }
        pstatementNode4 = (PStatement)nodeArrayList7.get(0);

        pfunctionNode1 = new ADefFuncFunction(tidNode2, listNode3, pstatementNode4);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new6()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        PStatement pstatementNode5;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
        PArgument pargumentNode3;
        pargumentNode3 = (PArgument)nodeArrayList4.get(0);
	if(pargumentNode3 != null)
	{
	  listNode4.add(pargumentNode3);
	}
        }
        pstatementNode5 = (PStatement)nodeArrayList7.get(0);

        pfunctionNode1 = new ADefFuncFunction(tidNode2, listNode4, pstatementNode5);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new7()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        PStatement pstatementNode5;
        tidNode2 = (TId)nodeArrayList3.get(0);
        {
        PArgument pargumentNode3;
        pargumentNode3 = (PArgument)nodeArrayList5.get(0);
	if(pargumentNode3 != null)
	{
	  listNode4.add(pargumentNode3);
	}
        }
        pstatementNode5 = (PStatement)nodeArrayList8.get(0);

        pfunctionNode1 = new ADefFuncFunction(tidNode2, listNode4, pstatementNode5);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new8()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        TypedLinkedList listNode4 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
        }
        {
        }

        pargumentNode1 = new AArgArgument(tidNode2, listNode3, listNode4);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new9()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TypedLinkedList listNode5 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
        PAssignValue passignvalueNode3;
        passignvalueNode3 = (PAssignValue)nodeArrayList2.get(0);
	if(passignvalueNode3 != null)
	{
	  listNode4.add(passignvalueNode3);
	}
        }
        {
        }

        pargumentNode1 = new AArgArgument(tidNode2, listNode4, listNode5);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new10()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        TypedLinkedList listNode5 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
        }
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pargumentNode1 = new AArgArgument(tidNode2, listNode3, listNode5);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new11()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TypedLinkedList listNode6 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
        PAssignValue passignvalueNode3;
        passignvalueNode3 = (PAssignValue)nodeArrayList2.get(0);
	if(passignvalueNode3 != null)
	{
	  listNode4.add(passignvalueNode3);
	}
        }
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pargumentNode1 = new AArgArgument(tidNode2, listNode4, listNode6);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new12()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCiav pciavNode1;
        {
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList2.get(0);

        pciavNode1 = new ACommaIdCiav(tidNode2);
        }
	nodeList.add(pciavNode1);
        return nodeList;
    }



    ArrayList new13()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCiav pciavNode1;
        {
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList2.get(0);

        pciavNode1 = new ACommaIdCiav(tidNode2);
        }
	nodeList.add(pciavNode1);
        return nodeList;
    }



    ArrayList new14()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAssignValue passignvalueNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        passignvalueNode1 = new AAsvalueAssignValue(pexpressionNode2);
        }
	nodeList.add(passignvalueNode1);
        return nodeList;
    }



    ArrayList new15()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PComparisons pcomparisonsNode2;
        PStatement pstatementNode3;
        pcomparisonsNode2 = (PComparisons)nodeArrayList2.get(0);
        pstatementNode3 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AIfStatementStatement(pcomparisonsNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new16()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PComparisons pcomparisonsNode2;
        PStatement pstatementNode3;
        pcomparisonsNode2 = (PComparisons)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AIfStatementStatement(pcomparisonsNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new17()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PComparisons pcomparisonsNode2;
        PStatement pstatementNode3;
        pcomparisonsNode2 = (PComparisons)nodeArrayList2.get(0);
        pstatementNode3 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AWhileStatementStatement(pcomparisonsNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new18()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PComparisons pcomparisonsNode2;
        PStatement pstatementNode3;
        pcomparisonsNode2 = (PComparisons)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileStatementStatement(pcomparisonsNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new19()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TId tidNode2;
        TId tidNode3;
        PStatement pstatementNode4;
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        pstatementNode4 = (PStatement)nodeArrayList6.get(0);

        pstatementNode1 = new AForStatementStatement(tidNode2, tidNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new20()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TId tidNode2;
        TId tidNode3;
        PStatement pstatementNode4;
        tidNode2 = (TId)nodeArrayList3.get(0);
        tidNode3 = (TId)nodeArrayList5.get(0);
        pstatementNode4 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AForStatementStatement(tidNode2, tidNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new21()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AReturnStatementStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new22()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AReturnStatementStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new23()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
        }

        pstatementNode1 = new APrintStatementStatement(pexpressionNode2, listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new24()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
        }

        pstatementNode1 = new APrintStatementStatement(pexpressionNode2, listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new25()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstatementNode1 = new APrintStatementStatement(pexpressionNode2, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new26()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstatementNode1 = new APrintStatementStatement(pexpressionNode2, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new27()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TId tidNode2;
        PExpression pexpressionNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignStatementStatement(tidNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new28()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TId tidNode2;
        PExpression pexpressionNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AAssignStatementStatement(tidNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new29()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TId tidNode2;
        PExpression pexpressionNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AIdMineqStatementStatement(tidNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new30()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TId tidNode2;
        PExpression pexpressionNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AIdMineqStatementStatement(tidNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new31()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TId tidNode2;
        PExpression pexpressionNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AIdPluseqStatementStatement(tidNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new32()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TId tidNode2;
        PExpression pexpressionNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AIdPluseqStatementStatement(tidNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new33()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TId tidNode2;
        PExpression pexpressionNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AIdDiveqStatementStatement(tidNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new34()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TId tidNode2;
        PExpression pexpressionNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AIdDiveqStatementStatement(tidNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new35()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TId tidNode2;
        PExpression pexpressionNode3;
        PExpression pexpressionNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList6.get(0);

        pstatementNode1 = new AArrayStatementStatement(tidNode2, pexpressionNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new36()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TId tidNode2;
        PExpression pexpressionNode3;
        PExpression pexpressionNode4;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList7.get(0);

        pstatementNode1 = new AArrayStatementStatement(tidNode2, pexpressionNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new37()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
        }

        pstatementNode1 = new AAssertionStatementStatement(pexpressionNode2, listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new38()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
        }

        pstatementNode1 = new AAssertionStatementStatement(pexpressionNode2, listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new39()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
        PExpression pexpressionNode3;
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);
	if(pexpressionNode3 != null)
	{
	  listNode4.add(pexpressionNode3);
	}
        }

        pstatementNode1 = new AAssertionStatementStatement(pexpressionNode2, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new40()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
        PExpression pexpressionNode3;
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);
	if(pexpressionNode3 != null)
	{
	  listNode4.add(pexpressionNode3);
	}
        }

        pstatementNode1 = new AAssertionStatementStatement(pexpressionNode2, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new41()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pstatementNode1 = new AFuncCallStatementStatement(pfunctioncallNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new42()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList2.get(0);

        pstatementNode1 = new AFuncCallStatementStatement(pfunctioncallNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new43()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionCall pfunctioncallNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
        }

        pfunctioncallNode1 = new AFuncCallFunctionCall(tidNode2, listNode3);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    ArrayList new44()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionCall pfunctioncallNode1;
        {
        TId tidNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
        PArglist parglistNode3;
        parglistNode3 = (PArglist)nodeArrayList3.get(0);
	if(parglistNode3 != null)
	{
	  listNode4.add(parglistNode3);
	}
        }

        pfunctioncallNode1 = new AFuncCallFunctionCall(tidNode2, listNode4);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    ArrayList new45()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArglist parglistNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
        }

        parglistNode1 = new AArglistArglist(pexpressionNode2, listNode3);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    ArrayList new46()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArglist parglistNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        parglistNode1 = new AArglistArglist(pexpressionNode2, listNode4);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    ArrayList new47()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new48()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        pcomparisonsNode1 = (PComparisons)nodeArrayList1.get(0);
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new49()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        {
        PComparisons pcomparisonsNode2;
        PComparisons pcomparisonsNode3;
        pcomparisonsNode2 = (PComparisons)nodeArrayList1.get(0);
        pcomparisonsNode3 = (PComparisons)nodeArrayList3.get(0);

        pcomparisonsNode1 = new AOrComparisons(pcomparisonsNode2, pcomparisonsNode3);
        }
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new50()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        pcomparisonsNode1 = (PComparisons)nodeArrayList1.get(0);
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new51()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        {
        PComparisons pcomparisonsNode2;
        PComparisons pcomparisonsNode3;
        pcomparisonsNode2 = (PComparisons)nodeArrayList1.get(0);
        pcomparisonsNode3 = (PComparisons)nodeArrayList3.get(0);

        pcomparisonsNode1 = new AAndComparisons(pcomparisonsNode2, pcomparisonsNode3);
        }
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new52()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        pcomparisonsNode1 = (PComparisons)nodeArrayList1.get(0);
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new53()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        {
        PComparisons pcomparisonsNode2;
        pcomparisonsNode2 = (PComparisons)nodeArrayList2.get(0);

        pcomparisonsNode1 = new ANotComparisons(pcomparisonsNode2);
        }
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new54()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        {

        pcomparisonsNode1 = new ATrueComparisons();
        }
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new55()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        {

        pcomparisonsNode1 = new AFalseComparisons();
        }
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new56()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pcomparisonsNode1 = new ALesseqComparisons(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new57()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pcomparisonsNode1 = new AGreateqComparisons(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new58()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pcomparisonsNode1 = new ADiffComparisons(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new59()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pcomparisonsNode1 = new AEqeqComparisons(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new60()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pcomparisonsNode1 = new ALesscComparisons(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new61()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparisons pcomparisonsNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pcomparisonsNode1 = new AGreatcComparisons(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pcomparisonsNode1);
        return nodeList;
    }



    ArrayList new62()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new63()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAdditionExExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new64()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ASubtractionExExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new65()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new66()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
        }

        pexpressionNode1 = new AMaxExprExpression(pexpressionNode2, listNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new67()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpressionNode1 = new AMaxExprExpression(pexpressionNode2, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new68()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
        }

        pexpressionNode1 = new AMinExprExpression(pexpressionNode2, listNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new69()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpressionNode1 = new AMinExprExpression(pexpressionNode2, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new70()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new71()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pexpressionNode1 = new APlplExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new72()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pexpressionNode1 = new AMinminExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new73()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new74()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new75()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        Object nullNode2 = null;
        PExpression pexpressionNode3;
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new AAdditionExExpression(null, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new76()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        Object nullNode2 = null;
        PExpression pexpressionNode3;
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new ASubtractionExExpression(null, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new77()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new78()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ADivisionExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new79()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AModuloExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new80()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AMultiplicationExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new81()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new82()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new APowerExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new83()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new84()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TId tidNode2;
        PExpression pexpressionNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new APinakasExprExpression(tidNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new85()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pexpressionNode1 = new AFuncCallExprExpression(pfunctioncallNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new86()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ALenExpExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new87()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new AParenthesisExprValueExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new88()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
        }

        pexpressionNode1 = new ABracketsExprValueExpression(pexpressionNode2, listNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new89()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpressionNode1 = new ABracketsExprValueExpression(pexpressionNode2, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new90()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TId tidNode2;
        PFunctionCall pfunctioncallNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pfunctioncallNode3 = (PFunctionCall)nodeArrayList3.get(0);

        pexpressionNode1 = new AIdDotFuncExpression(tidNode2, pfunctioncallNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new91()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexpressionNode1 = new AIdentifierExpression(tidNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new92()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pexpressionNode1 = new ANumberExpression(tnumberNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new93()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TStringDoubleQuotes tstringdoublequotesNode2;
        tstringdoublequotesNode2 = (TStringDoubleQuotes)nodeArrayList1.get(0);

        pexpressionNode1 = new ADoubleQuotesExpression(tstringdoublequotesNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new94()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TStringSingleQuotes tstringsinglequotesNode2;
        tstringsinglequotesNode2 = (TStringSingleQuotes)nodeArrayList1.get(0);

        pexpressionNode1 = new ASingleQuotesExpression(tstringsinglequotesNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new95()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {

        pexpressionNode1 = new ANoneValueExpression();
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new96()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PCommands pcommandsNode1;
        pcommandsNode1 = (PCommands)nodeArrayList1.get(0);
	if(pcommandsNode1 != null)
	{
	  listNode2.add(pcommandsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new97()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PCommands pcommandsNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pcommandsNode2 = (PCommands)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommandsNode2 != null)
	{
	  listNode3.add(pcommandsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new98()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        TTab ttabNode1;
        ttabNode1 = (TTab)nodeArrayList1.get(0);
	if(ttabNode1 != null)
	{
	  listNode2.add(ttabNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new99()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        TTab ttabNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        ttabNode2 = (TTab)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ttabNode2 != null)
	{
	  listNode3.add(ttabNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new100()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PCiav pciavNode1;
        pciavNode1 = (PCiav)nodeArrayList1.get(0);
	if(pciavNode1 != null)
	{
	  listNode2.add(pciavNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new101()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PCiav pciavNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pciavNode2 = (PCiav)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pciavNode2 != null)
	{
	  listNode3.add(pciavNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new102()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new103()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PExpression pexpressionNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new104()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new105()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PExpression pexpressionNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {20, SHIFT, 2}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {47, SHIFT, 9}, },
			{{-1, REDUCE, 98}, },
			{{-1, ERROR, 2}, {47, SHIFT, 17}, },
			{{-1, ERROR, 3}, {8, SHIFT, 18}, {9, SHIFT, 19}, {21, SHIFT, 20}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {39, SHIFT, 26}, {41, SHIFT, 27}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 4}, {8, SHIFT, 18}, {9, SHIFT, 19}, {21, SHIFT, 20}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {39, SHIFT, 26}, {41, SHIFT, 27}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 5}, {47, SHIFT, 47}, },
			{{-1, ERROR, 6}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 7}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 8}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 9}, {4, SHIFT, 51}, {5, SHIFT, 52}, {6, SHIFT, 53}, {19, SHIFT, 54}, {24, SHIFT, 55}, {26, SHIFT, 56}, },
			{{-1, ERROR, 10}, {51, ACCEPT, -1}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {20, SHIFT, 2}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {47, SHIFT, 9}, },
			{{-1, ERROR, 16}, {0, SHIFT, 58}, {20, SHIFT, 59}, {30, SHIFT, 60}, {31, SHIFT, 61}, {32, SHIFT, 62}, {36, SHIFT, 63}, {37, SHIFT, 64}, {38, SHIFT, 65}, {47, SHIFT, 66}, },
			{{-1, ERROR, 17}, {26, SHIFT, 68}, },
			{{-1, ERROR, 18}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 19}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 20}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {39, SHIFT, 26}, {41, SHIFT, 27}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 21}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 22}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 23}, {26, SHIFT, 74}, },
			{{-1, ERROR, 24}, {26, SHIFT, 75}, },
			{{-1, ERROR, 25}, {26, SHIFT, 76}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 91}, {24, SHIFT, 77}, {26, SHIFT, 56}, {46, SHIFT, 78}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 34}, {23, SHIFT, 79}, {40, SHIFT, 80}, },
			{{-1, REDUCE, 48}, {22, SHIFT, 81}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 38}, {2, SHIFT, 82}, {8, SHIFT, 83}, {9, SHIFT, 84}, {14, SHIFT, 85}, {15, SHIFT, 86}, {16, SHIFT, 87}, {17, SHIFT, 88}, {18, SHIFT, 89}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 70}, {1, SHIFT, 90}, {3, SHIFT, 91}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 74}, {11, SHIFT, 92}, {12, SHIFT, 93}, {13, SHIFT, 94}, },
			{{-1, REDUCE, 77}, {10, SHIFT, 95}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 46}, {23, SHIFT, 79}, {40, SHIFT, 96}, },
			{{-1, ERROR, 47}, {29, SHIFT, 97}, },
			{{-1, REDUCE, 23}, {8, SHIFT, 83}, {9, SHIFT, 84}, {28, SHIFT, 98}, },
			{{-1, REDUCE, 21}, {8, SHIFT, 83}, {9, SHIFT, 84}, },
			{{-1, REDUCE, 37}, {8, SHIFT, 83}, {9, SHIFT, 84}, {28, SHIFT, 98}, },
			{{-1, ERROR, 51}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 52}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 53}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 54}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 55}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 56}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {27, SHIFT, 107}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 99}, },
			{{-1, ERROR, 59}, {47, SHIFT, 110}, },
			{{-1, ERROR, 60}, {8, SHIFT, 18}, {9, SHIFT, 19}, {21, SHIFT, 20}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {39, SHIFT, 26}, {41, SHIFT, 27}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 61}, {8, SHIFT, 18}, {9, SHIFT, 19}, {21, SHIFT, 20}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {39, SHIFT, 26}, {41, SHIFT, 27}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 62}, {47, SHIFT, 113}, },
			{{-1, ERROR, 63}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 64}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 65}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 66}, {4, SHIFT, 117}, {5, SHIFT, 118}, {6, SHIFT, 119}, {19, SHIFT, 120}, {24, SHIFT, 121}, {26, SHIFT, 56}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 68}, {27, SHIFT, 122}, {47, SHIFT, 123}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 72}, {8, SHIFT, 83}, {9, SHIFT, 84}, {25, SHIFT, 125}, {28, SHIFT, 98}, },
			{{-1, ERROR, 73}, {8, SHIFT, 83}, {9, SHIFT, 84}, {27, SHIFT, 127}, },
			{{-1, ERROR, 74}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 75}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 76}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 77}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 78}, {47, SHIFT, 132}, },
			{{-1, ERROR, 79}, {8, SHIFT, 18}, {9, SHIFT, 19}, {21, SHIFT, 20}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {39, SHIFT, 26}, {41, SHIFT, 27}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 80}, {0, SHIFT, 1}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {47, SHIFT, 9}, },
			{{-1, ERROR, 81}, {8, SHIFT, 18}, {9, SHIFT, 19}, {21, SHIFT, 20}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {39, SHIFT, 26}, {41, SHIFT, 27}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 82}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 83}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 84}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 85}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 86}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 87}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 88}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 89}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 92}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 93}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 94}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 95}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 96}, {0, SHIFT, 1}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {47, SHIFT, 9}, },
			{{-1, ERROR, 97}, {47, SHIFT, 151}, },
			{{-1, ERROR, 98}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 25}, {28, SHIFT, 98}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 29}, {8, SHIFT, 83}, {9, SHIFT, 84}, },
			{{-1, REDUCE, 31}, {8, SHIFT, 83}, {9, SHIFT, 84}, },
			{{-1, REDUCE, 33}, {8, SHIFT, 83}, {9, SHIFT, 84}, },
			{{-1, REDUCE, 27}, {8, SHIFT, 83}, {9, SHIFT, 84}, },
			{{-1, ERROR, 106}, {8, SHIFT, 83}, {9, SHIFT, 84}, {25, SHIFT, 154}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 108}, {27, SHIFT, 155}, },
			{{-1, REDUCE, 45}, {8, SHIFT, 83}, {9, SHIFT, 84}, {28, SHIFT, 98}, },
			{{-1, ERROR, 110}, {26, SHIFT, 157}, },
			{{-1, ERROR, 111}, {23, SHIFT, 79}, {40, SHIFT, 158}, },
			{{-1, ERROR, 112}, {23, SHIFT, 79}, {40, SHIFT, 159}, },
			{{-1, ERROR, 113}, {29, SHIFT, 160}, },
			{{-1, REDUCE, 24}, {8, SHIFT, 83}, {9, SHIFT, 84}, {28, SHIFT, 98}, },
			{{-1, REDUCE, 22}, {8, SHIFT, 83}, {9, SHIFT, 84}, },
			{{-1, REDUCE, 38}, {8, SHIFT, 83}, {9, SHIFT, 84}, {28, SHIFT, 98}, },
			{{-1, ERROR, 117}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 118}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 119}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 120}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 121}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 122}, {40, SHIFT, 168}, },
			{{-1, REDUCE, 8}, {19, SHIFT, 169}, {28, SHIFT, 170}, },
			{{-1, ERROR, 124}, {27, SHIFT, 174}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 126}, {25, SHIFT, 175}, {28, SHIFT, 98}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 128}, {8, SHIFT, 83}, {9, SHIFT, 84}, {27, SHIFT, 176}, },
			{{-1, ERROR, 129}, {27, SHIFT, 177}, {28, SHIFT, 178}, },
			{{-1, ERROR, 130}, {27, SHIFT, 181}, {28, SHIFT, 178}, },
			{{-1, ERROR, 131}, {8, SHIFT, 83}, {9, SHIFT, 84}, {25, SHIFT, 183}, },
			{{-1, ERROR, 132}, {26, SHIFT, 56}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 49}, {22, SHIFT, 81}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 136}, {0, SHIFT, 58}, {30, SHIFT, 60}, {31, SHIFT, 61}, {32, SHIFT, 62}, {36, SHIFT, 63}, {37, SHIFT, 64}, {38, SHIFT, 65}, {47, SHIFT, 66}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 59}, {8, SHIFT, 83}, {9, SHIFT, 84}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 58}, {8, SHIFT, 83}, {9, SHIFT, 84}, },
			{{-1, REDUCE, 56}, {8, SHIFT, 83}, {9, SHIFT, 84}, },
			{{-1, REDUCE, 57}, {8, SHIFT, 83}, {9, SHIFT, 84}, },
			{{-1, REDUCE, 60}, {8, SHIFT, 83}, {9, SHIFT, 84}, },
			{{-1, REDUCE, 61}, {8, SHIFT, 83}, {9, SHIFT, 84}, },
			{{-1, REDUCE, 80}, {10, SHIFT, 95}, },
			{{-1, REDUCE, 79}, {10, SHIFT, 95}, },
			{{-1, REDUCE, 78}, {10, SHIFT, 95}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 151}, {40, SHIFT, 184}, },
			{{-1, REDUCE, 47}, {8, SHIFT, 83}, {9, SHIFT, 84}, },
			{{-1, REDUCE, 103}, },
			{{-1, ERROR, 154}, {19, SHIFT, 185}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 46}, {28, SHIFT, 98}, },
			{{-1, ERROR, 157}, {27, SHIFT, 186}, {47, SHIFT, 123}, },
			{{-1, ERROR, 158}, {0, SHIFT, 1}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {47, SHIFT, 9}, },
			{{-1, ERROR, 159}, {0, SHIFT, 1}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {47, SHIFT, 9}, },
			{{-1, ERROR, 160}, {47, SHIFT, 190}, },
			{{-1, REDUCE, 26}, {28, SHIFT, 98}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 30}, {8, SHIFT, 83}, {9, SHIFT, 84}, },
			{{-1, REDUCE, 32}, {8, SHIFT, 83}, {9, SHIFT, 84}, },
			{{-1, REDUCE, 34}, {8, SHIFT, 83}, {9, SHIFT, 84}, },
			{{-1, REDUCE, 28}, {8, SHIFT, 83}, {9, SHIFT, 84}, },
			{{-1, ERROR, 167}, {8, SHIFT, 83}, {9, SHIFT, 84}, {25, SHIFT, 191}, },
			{{-1, ERROR, 168}, {0, SHIFT, 1}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {47, SHIFT, 9}, },
			{{-1, ERROR, 169}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 193}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 170}, {47, SHIFT, 195}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 9}, {28, SHIFT, 170}, },
			{{-1, REDUCE, 10}, {28, SHIFT, 170}, },
			{{-1, ERROR, 174}, {40, SHIFT, 198}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 178}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, REDUCE, 104}, },
			{{-1, ERROR, 180}, {27, SHIFT, 200}, {28, SHIFT, 178}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 182}, {27, SHIFT, 202}, {28, SHIFT, 178}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 184}, {0, SHIFT, 1}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {47, SHIFT, 9}, },
			{{-1, ERROR, 185}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, ERROR, 186}, {40, SHIFT, 205}, },
			{{-1, ERROR, 187}, {27, SHIFT, 206}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 190}, {40, SHIFT, 207}, },
			{{-1, ERROR, 191}, {19, SHIFT, 208}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 91}, {46, SHIFT, 78}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 12}, {19, SHIFT, 169}, },
			{{-1, REDUCE, 11}, {28, SHIFT, 170}, },
			{{-1, REDUCE, 101}, },
			{{-1, ERROR, 198}, {0, SHIFT, 1}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {47, SHIFT, 9}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 35}, {8, SHIFT, 83}, {9, SHIFT, 84}, },
			{{-1, ERROR, 205}, {0, SHIFT, 1}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {47, SHIFT, 9}, },
			{{-1, ERROR, 206}, {40, SHIFT, 212}, },
			{{-1, ERROR, 207}, {0, SHIFT, 1}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {47, SHIFT, 9}, },
			{{-1, ERROR, 208}, {8, SHIFT, 18}, {9, SHIFT, 19}, {24, SHIFT, 21}, {26, SHIFT, 22}, {33, SHIFT, 23}, {34, SHIFT, 24}, {35, SHIFT, 25}, {43, SHIFT, 28}, {45, SHIFT, 29}, {47, SHIFT, 30}, {48, SHIFT, 31}, {49, SHIFT, 32}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 212}, {0, SHIFT, 1}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {47, SHIFT, 9}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 36}, {8, SHIFT, 83}, {9, SHIFT, 84}, },
			{{-1, REDUCE, 7}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 10}, },
			{{-1, 11}, {15, 57}, },
			{{-1, 12}, },
			{{-1, 124}, {157, 187}, },
			{{-1, 171}, {173, 197}, {196, 197}, },
			{{-1, 172}, {195, 209}, },
			{{-1, 13}, {80, 135}, {96, 150}, {158, 188}, {159, 189}, {168, 192}, {184, 203}, {198, 210}, {205, 211}, {207, 213}, {212, 215}, },
			{{-1, 33}, {0, 14}, {15, 14}, {16, 67}, {78, 133}, {80, 14}, {96, 14}, {136, 67}, {158, 14}, {159, 14}, {168, 14}, {184, 14}, {198, 14}, {205, 14}, {207, 14}, {212, 14}, },
			{{-1, 108}, },
			{{-1, 99}, {50, 101}, {100, 153}, {116, 162}, {126, 153}, {156, 153}, {161, 153}, },
			{{-1, 34}, {4, 46}, {60, 111}, {61, 112}, },
			{{-1, 35}, {79, 134}, },
			{{-1, 36}, {81, 137}, },
			{{-1, 37}, {20, 71}, },
			{{-1, 179}, {180, 201}, {182, 201}, },
			{{-1, 38}, {6, 48}, {7, 49}, {8, 50}, {21, 72}, {22, 73}, {51, 102}, {52, 103}, {53, 104}, {54, 105}, {55, 106}, {56, 109}, {63, 114}, {64, 115}, {65, 116}, {74, 128}, {77, 131}, {82, 138}, {85, 141}, {86, 142}, {87, 143}, {88, 144}, {89, 145}, {98, 152}, {117, 163}, {118, 164}, {119, 165}, {120, 166}, {121, 167}, {185, 204}, {208, 214}, },
			{{-1, 39}, {83, 139}, {84, 140}, },
			{{-1, 40}, },
			{{-1, 41}, {18, 69}, {19, 70}, },
			{{-1, 42}, },
			{{-1, 43}, {92, 146}, {93, 147}, {94, 148}, },
			{{-1, 44}, {75, 129}, {76, 130}, {95, 149}, {178, 199}, },
			{{-1, 45}, {169, 194}, },
			{{-1, 15}, },
			{{-1, 136}, {0, 16}, {15, 16}, },
			{{-1, 173}, {172, 196}, },
			{{-1, 100}, {72, 126}, {109, 156}, {114, 161}, },
			{{-1, 180}, {130, 182}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: tab, 'def', 'if', 'while', 'for', 'print', 'return', 'assert', id, EOF",
			"expecting: tab, 'def', 'if', 'while', 'for', 'print', 'return', 'assert', id",
			"expecting: id",
			"expecting: '+', '-', 'not', '[', '(', 'len', 'min', 'max', 'true', 'false', 'None', number, id, string double quotes, string single quotes",
			"expecting: '+', '-', '[', '(', 'len', 'min', 'max', 'None', number, id, string double quotes, string single quotes",
			"expecting: '-=', '+=', '/=', '=', '[', '('",
			"expecting: EOF",
			"expecting: '('",
			"expecting: '+', '-', '[', '(', 'len', 'None', number, id, string double quotes, string single quotes",
			"expecting: '+', '-', '[', '(', 'len', 'min', 'max', 'true', 'false', 'None', number, id, string double quotes, string single quotes",
			"expecting: 'and', 'or', ':'",
			"expecting: tab, '++', '==', '--', '+', '-', '**', '*', '%', '/', '!=', '<=', '>=', '<', '>', 'def', 'and', 'or', ']', ')', ',', 'if', 'while', 'for', 'print', 'return', 'assert', ':', id, EOF",
			"expecting: tab, '++', '==', '--', '+', '-', '**', '*', '%', '/', '!=', '<=', '>=', '<', '>', 'def', 'and', 'or', '[', ']', '(', ')', ',', 'if', 'while', 'for', 'print', 'return', 'assert', ':', '.', id, EOF",
			"expecting: 'or', ':'",
			"expecting: '==', '+', '-', '!=', '<=', '>=', '<', '>'",
			"expecting: tab, '==', '+', '-', '!=', '<=', '>=', '<', '>', 'def', 'and', 'or', ']', ')', ',', 'if', 'while', 'for', 'print', 'return', 'assert', ':', id, EOF",
			"expecting: tab, '++', '==', '--', '+', '-', '!=', '<=', '>=', '<', '>', 'def', 'and', 'or', ']', ')', ',', 'if', 'while', 'for', 'print', 'return', 'assert', ':', id, EOF",
			"expecting: tab, '++', '==', '--', '+', '-', '*', '%', '/', '!=', '<=', '>=', '<', '>', 'def', 'and', 'or', ']', ')', ',', 'if', 'while', 'for', 'print', 'return', 'assert', ':', id, EOF",
			"expecting: 'in'",
			"expecting: tab, '+', '-', 'def', ',', 'if', 'while', 'for', 'print', 'return', 'assert', id, EOF",
			"expecting: tab, '+', '-', 'def', 'if', 'while', 'for', 'print', 'return', 'assert', id, EOF",
			"expecting: '+', '-', '[', '(', ')', 'len', 'min', 'max', 'None', number, id, string double quotes, string single quotes",
			"expecting: ')', id",
			"expecting: '+', '-', ']', ','",
			"expecting: '+', '-', ')'",
			"expecting: '[', '(', 'len', 'None', number, id, string double quotes, string single quotes",
			"expecting: tab, 'if', 'while', 'for', 'print', 'return', 'assert', id",
			"expecting: tab, 'def', ']', ')', ',', 'if', 'while', 'for', 'print', 'return', 'assert', id, EOF",
			"expecting: tab, 'def', ',', 'if', 'while', 'for', 'print', 'return', 'assert', id, EOF",
			"expecting: '+', '-', ']'",
			"expecting: ')'",
			"expecting: '+', '-', ')', ','",
			"expecting: ':'",
			"expecting: '=', ')', ','",
			"expecting: ']', ','",
			"expecting: ')', ','",
			"expecting: '+', '-', 'and', 'or', ':'",
			"expecting: tab, '+', '-', 'def', ']', ')', ',', 'if', 'while', 'for', 'print', 'return', 'assert', id, EOF",
			"expecting: '='",
			"expecting: 'None', number, id, string double quotes, string single quotes",
			"expecting: ')', ',', '.'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 2, 4, 4, 4, 5, 6, 0, 0, 0, 0, 0, 1, 7, 8, 8, 9, 4, 4, 7, 7, 7, 10, 10, 11, 11, 12, 11, 11, 11, 13, 10, 10, 10, 14, 15, 16, 16, 17, 11, 11, 11, 13, 18, 19, 20, 19, 4, 4, 4, 4, 4, 21, 0, 1, 2, 3, 3, 2, 4, 4, 4, 5, 0, 22, 16, 16, 10, 23, 24, 4, 25, 25, 4, 2, 3, 26, 3, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 25, 25, 25, 25, 26, 2, 4, 27, 28, 0, 20, 20, 20, 20, 29, 11, 30, 31, 7, 13, 13, 18, 19, 20, 19, 4, 4, 4, 4, 4, 32, 33, 30, 11, 34, 11, 24, 35, 35, 29, 7, 11, 10, 0, 26, 10, 36, 15, 15, 36, 36, 36, 36, 36, 11, 11, 11, 11, 0, 32, 37, 27, 38, 11, 35, 22, 26, 26, 2, 28, 0, 20, 20, 20, 20, 29, 26, 39, 2, 35, 35, 35, 32, 11, 11, 15, 25, 35, 35, 15, 35, 11, 26, 4, 32, 30, 0, 0, 32, 38, 0, 40, 35, 33, 35, 35, 26, 35, 15, 35, 15, 0, 20, 26, 32, 26, 4, 35, 0, 0, 26, 0, 20, 0, 
        };*/
}
