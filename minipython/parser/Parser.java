/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.parser;

import minipython.lexer.*;
import minipython.node.*;
import minipython.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
	this.nodeList = listNode;

        if(!stack.hasNext())
        {
            stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return (ArrayList) ((State) stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(lexer.next());
                        push(action[1], list);
                        last_shift = action[1];
                    }
		    break;
                case REDUCE:
                    switch(action[1])
                    {

                    case 0:
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;


                    case 1:
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;


                    case 2:
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;


                    case 3:
		    {
			ArrayList list = new3();
			push(goTo(1), list);
		    }
		    break;


                    case 4:
		    {
			ArrayList list = new4();
			push(goTo(2), list);
		    }
		    break;


                    case 5:
		    {
			ArrayList list = new5();
			push(goTo(2), list);
		    }
		    break;


                    case 6:
		    {
			ArrayList list = new6();
			push(goTo(2), list);
		    }
		    break;


                    case 7:
		    {
			ArrayList list = new7();
			push(goTo(2), list);
		    }
		    break;


                    case 8:
		    {
			ArrayList list = new8();
			push(goTo(3), list);
		    }
		    break;


                    case 9:
		    {
			ArrayList list = new9();
			push(goTo(3), list);
		    }
		    break;


                    case 10:
		    {
			ArrayList list = new10();
			push(goTo(3), list);
		    }
		    break;


                    case 11:
		    {
			ArrayList list = new11();
			push(goTo(3), list);
		    }
		    break;


                    case 12:
		    {
			ArrayList list = new12();
			push(goTo(4), list);
		    }
		    break;


                    case 13:
		    {
			ArrayList list = new13();
			push(goTo(4), list);
		    }
		    break;


                    case 14:
		    {
			ArrayList list = new14();
			push(goTo(5), list);
		    }
		    break;


                    case 15:
		    {
			ArrayList list = new15();
			push(goTo(6), list);
		    }
		    break;


                    case 16:
		    {
			ArrayList list = new16();
			push(goTo(6), list);
		    }
		    break;


                    case 17:
		    {
			ArrayList list = new17();
			push(goTo(6), list);
		    }
		    break;


                    case 18:
		    {
			ArrayList list = new18();
			push(goTo(6), list);
		    }
		    break;


                    case 19:
		    {
			ArrayList list = new19();
			push(goTo(6), list);
		    }
		    break;


                    case 20:
		    {
			ArrayList list = new20();
			push(goTo(6), list);
		    }
		    break;


                    case 21:
		    {
			ArrayList list = new21();
			push(goTo(6), list);
		    }
		    break;


                    case 22:
		    {
			ArrayList list = new22();
			push(goTo(6), list);
		    }
		    break;


                    case 23:
		    {
			ArrayList list = new23();
			push(goTo(6), list);
		    }
		    break;


                    case 24:
		    {
			ArrayList list = new24();
			push(goTo(6), list);
		    }
		    break;


                    case 25:
		    {
			ArrayList list = new25();
			push(goTo(6), list);
		    }
		    break;


                    case 26:
		    {
			ArrayList list = new26();
			push(goTo(6), list);
		    }
		    break;


                    case 27:
		    {
			ArrayList list = new27();
			push(goTo(6), list);
		    }
		    break;


                    case 28:
		    {
			ArrayList list = new28();
			push(goTo(6), list);
		    }
		    break;


                    case 29:
		    {
			ArrayList list = new29();
			push(goTo(6), list);
		    }
		    break;


                    case 30:
		    {
			ArrayList list = new30();
			push(goTo(6), list);
		    }
		    break;


                    case 31:
		    {
			ArrayList list = new31();
			push(goTo(6), list);
		    }
		    break;


                    case 32:
		    {
			ArrayList list = new32();
			push(goTo(6), list);
		    }
		    break;


                    case 33:
		    {
			ArrayList list = new33();
			push(goTo(6), list);
		    }
		    break;


                    case 34:
		    {
			ArrayList list = new34();
			push(goTo(6), list);
		    }
		    break;


                    case 35:
		    {
			ArrayList list = new35();
			push(goTo(6), list);
		    }
		    break;


                    case 36:
		    {
			ArrayList list = new36();
			push(goTo(6), list);
		    }
		    break;


                    case 37:
		    {
			ArrayList list = new37();
			push(goTo(6), list);
		    }
		    break;


                    case 38:
		    {
			ArrayList list = new38();
			push(goTo(6), list);
		    }
		    break;


                    case 39:
		    {
			ArrayList list = new39();
			push(goTo(6), list);
		    }
		    break;


                    case 40:
		    {
			ArrayList list = new40();
			push(goTo(6), list);
		    }
		    break;


                    case 41:
		    {
			ArrayList list = new41();
			push(goTo(6), list);
		    }
		    break;


                    case 42:
		    {
			ArrayList list = new42();
			push(goTo(6), list);
		    }
		    break;


                    case 43:
		    {
			ArrayList list = new43();
			push(goTo(7), list);
		    }
		    break;


                    case 44:
		    {
			ArrayList list = new44();
			push(goTo(7), list);
		    }
		    break;


                    case 45:
		    {
			ArrayList list = new45();
			push(goTo(8), list);
		    }
		    break;


                    case 46:
		    {
			ArrayList list = new46();
			push(goTo(8), list);
		    }
		    break;


                    case 47:
		    {
			ArrayList list = new47();
			push(goTo(9), list);
		    }
		    break;


                    case 48:
		    {
			ArrayList list = new48();
			push(goTo(10), list);
		    }
		    break;


                    case 49:
		    {
			ArrayList list = new49();
			push(goTo(10), list);
		    }
		    break;


                    case 50:
		    {
			ArrayList list = new50();
			push(goTo(11), list);
		    }
		    break;


                    case 51:
		    {
			ArrayList list = new51();
			push(goTo(11), list);
		    }
		    break;


                    case 52:
		    {
			ArrayList list = new52();
			push(goTo(12), list);
		    }
		    break;


                    case 53:
		    {
			ArrayList list = new53();
			push(goTo(12), list);
		    }
		    break;


                    case 54:
		    {
			ArrayList list = new54();
			push(goTo(13), list);
		    }
		    break;


                    case 55:
		    {
			ArrayList list = new55();
			push(goTo(13), list);
		    }
		    break;


                    case 56:
		    {
			ArrayList list = new56();
			push(goTo(13), list);
		    }
		    break;


                    case 57:
		    {
			ArrayList list = new57();
			push(goTo(13), list);
		    }
		    break;


                    case 58:
		    {
			ArrayList list = new58();
			push(goTo(13), list);
		    }
		    break;


                    case 59:
		    {
			ArrayList list = new59();
			push(goTo(13), list);
		    }
		    break;


                    case 60:
		    {
			ArrayList list = new60();
			push(goTo(13), list);
		    }
		    break;


                    case 61:
		    {
			ArrayList list = new61();
			push(goTo(13), list);
		    }
		    break;


                    case 62:
		    {
			ArrayList list = new62();
			push(goTo(14), list);
		    }
		    break;


                    case 63:
		    {
			ArrayList list = new63();
			push(goTo(15), list);
		    }
		    break;


                    case 64:
		    {
			ArrayList list = new64();
			push(goTo(15), list);
		    }
		    break;


                    case 65:
		    {
			ArrayList list = new65();
			push(goTo(15), list);
		    }
		    break;


                    case 66:
		    {
			ArrayList list = new66();
			push(goTo(15), list);
		    }
		    break;


                    case 67:
		    {
			ArrayList list = new67();
			push(goTo(15), list);
		    }
		    break;


                    case 68:
		    {
			ArrayList list = new68();
			push(goTo(15), list);
		    }
		    break;


                    case 69:
		    {
			ArrayList list = new69();
			push(goTo(15), list);
		    }
		    break;


                    case 70:
		    {
			ArrayList list = new70();
			push(goTo(15), list);
		    }
		    break;


                    case 71:
		    {
			ArrayList list = new71();
			push(goTo(16), list);
		    }
		    break;


                    case 72:
		    {
			ArrayList list = new72();
			push(goTo(16), list);
		    }
		    break;


                    case 73:
		    {
			ArrayList list = new73();
			push(goTo(16), list);
		    }
		    break;


                    case 74:
		    {
			ArrayList list = new74();
			push(goTo(16), list);
		    }
		    break;


                    case 75:
		    {
			ArrayList list = new75();
			push(goTo(16), list);
		    }
		    break;


                    case 76:
		    {
			ArrayList list = new76();
			push(goTo(17), list);
		    }
		    break;


                    case 77:
		    {
			ArrayList list = new77();
			push(goTo(17), list);
		    }
		    break;


                    case 78:
		    {
			ArrayList list = new78();
			push(goTo(17), list);
		    }
		    break;


                    case 79:
		    {
			ArrayList list = new79();
			push(goTo(17), list);
		    }
		    break;


                    case 80:
		    {
			ArrayList list = new80();
			push(goTo(18), list);
		    }
		    break;


                    case 81:
		    {
			ArrayList list = new81();
			push(goTo(18), list);
		    }
		    break;


                    case 82:
		    {
			ArrayList list = new82();
			push(goTo(19), list);
		    }
		    break;


                    case 83:
		    {
			ArrayList list = new83();
			push(goTo(19), list);
		    }
		    break;


                    case 84:
		    {
			ArrayList list = new84();
			push(goTo(19), list);
		    }
		    break;


                    case 85:
		    {
			ArrayList list = new85();
			push(goTo(19), list);
		    }
		    break;


                    case 86:
		    {
			ArrayList list = new86();
			push(goTo(19), list);
		    }
		    break;


                    case 87:
		    {
			ArrayList list = new87();
			push(goTo(19), list);
		    }
		    break;


                    case 88:
		    {
			ArrayList list = new88();
			push(goTo(19), list);
		    }
		    break;


                    case 89:
		    {
			ArrayList list = new89();
			push(goTo(19), list);
		    }
		    break;


                    case 90:
		    {
			ArrayList list = new90();
			push(goTo(19), list);
		    }
		    break;


                    case 91:
		    {
			ArrayList list = new91();
			push(goTo(20), list);
		    }
		    break;


                    case 92:
		    {
			ArrayList list = new92();
			push(goTo(21), list);
		    }
		    break;


                    case 93:
		    {
			ArrayList list = new93();
			push(goTo(21), list);
		    }
		    break;


                    case 94:
		    {
			ArrayList list = new94();
			push(goTo(22), list);
		    }
		    break;


                    case 95:
		    {
			ArrayList list = new95();
			push(goTo(22), list);
		    }
		    break;


                    case 96:
		    {
			ArrayList list = new96();
			push(goTo(23), list);
		    }
		    break;


                    case 97:
		    {
			ArrayList list = new97();
			push(goTo(23), list);
		    }
		    break;


                    case 98:
		    {
			ArrayList list = new98();
			push(goTo(24), list);
		    }
		    break;


                    case 99:
		    {
			ArrayList list = new99();
			push(goTo(24), list);
		    }
		    break;


                    case 100:
		    {
			ArrayList list = new100();
			push(goTo(25), list);
		    }
		    break;


                    case 101:
		    {
			ArrayList list = new101();
			push(goTo(25), list);
		    }
		    break;

                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PGoal node1 = (PGoal) ((ArrayList)pop()).get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }



    ArrayList new0()
    {
        ArrayList nodeList = new ArrayList();

        PGoal pgoalNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        }

        pgoalNode1 = new AGoal(listNode2);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    ArrayList new1()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGoal pgoalNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pgoalNode1 = new AGoal(listNode3);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    ArrayList new2()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommands pcommandsNode1;
        {
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pcommandsNode1 = new AFuncCommands(pfunctionNode2);
        }
	nodeList.add(pcommandsNode1);
        return nodeList;
    }



    ArrayList new3()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommands pcommandsNode1;
        {
        PStatement pstatementNode2;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);

        pcommandsNode1 = new AStatCommands(pstatementNode2);
        }
	nodeList.add(pcommandsNode1);
        return nodeList;
    }



    ArrayList new4()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TDef tdefNode3;
        TId tidNode4;
        TLPar tlparNode5;
        Object nullNode6 = null;
        TRPar trparNode7;
        TSemi tsemiNode8;
        PStatement pstatementNode9;
        {
        }
        tdefNode3 = (TDef)nodeArrayList1.get(0);
        tidNode4 = (TId)nodeArrayList2.get(0);
        tlparNode5 = (TLPar)nodeArrayList3.get(0);
        trparNode7 = (TRPar)nodeArrayList4.get(0);
        tsemiNode8 = (TSemi)nodeArrayList5.get(0);
        pstatementNode9 = (PStatement)nodeArrayList6.get(0);

        pfunctionNode1 = new ADedeFunction(listNode2, tdefNode3, tidNode4, tlparNode5, null, trparNode7, tsemiNode8, pstatementNode9);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new5()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TDef tdefNode4;
        TId tidNode5;
        TLPar tlparNode6;
        Object nullNode7 = null;
        TRPar trparNode8;
        TSemi tsemiNode9;
        PStatement pstatementNode10;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tdefNode4 = (TDef)nodeArrayList2.get(0);
        tidNode5 = (TId)nodeArrayList3.get(0);
        tlparNode6 = (TLPar)nodeArrayList4.get(0);
        trparNode8 = (TRPar)nodeArrayList5.get(0);
        tsemiNode9 = (TSemi)nodeArrayList6.get(0);
        pstatementNode10 = (PStatement)nodeArrayList7.get(0);

        pfunctionNode1 = new ADedeFunction(listNode3, tdefNode4, tidNode5, tlparNode6, null, trparNode8, tsemiNode9, pstatementNode10);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new6()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TDef tdefNode3;
        TId tidNode4;
        TLPar tlparNode5;
        PArgument pargumentNode6;
        TRPar trparNode7;
        TSemi tsemiNode8;
        PStatement pstatementNode9;
        {
        }
        tdefNode3 = (TDef)nodeArrayList1.get(0);
        tidNode4 = (TId)nodeArrayList2.get(0);
        tlparNode5 = (TLPar)nodeArrayList3.get(0);
        pargumentNode6 = (PArgument)nodeArrayList4.get(0);
        trparNode7 = (TRPar)nodeArrayList5.get(0);
        tsemiNode8 = (TSemi)nodeArrayList6.get(0);
        pstatementNode9 = (PStatement)nodeArrayList7.get(0);

        pfunctionNode1 = new ADedeFunction(listNode2, tdefNode3, tidNode4, tlparNode5, pargumentNode6, trparNode7, tsemiNode8, pstatementNode9);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new7()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TDef tdefNode4;
        TId tidNode5;
        TLPar tlparNode6;
        PArgument pargumentNode7;
        TRPar trparNode8;
        TSemi tsemiNode9;
        PStatement pstatementNode10;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tdefNode4 = (TDef)nodeArrayList2.get(0);
        tidNode5 = (TId)nodeArrayList3.get(0);
        tlparNode6 = (TLPar)nodeArrayList4.get(0);
        pargumentNode7 = (PArgument)nodeArrayList5.get(0);
        trparNode8 = (TRPar)nodeArrayList6.get(0);
        tsemiNode9 = (TSemi)nodeArrayList7.get(0);
        pstatementNode10 = (PStatement)nodeArrayList8.get(0);

        pfunctionNode1 = new ADedeFunction(listNode3, tdefNode4, tidNode5, tlparNode6, pargumentNode7, trparNode8, tsemiNode9, pstatementNode10);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new8()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TId tidNode2;
        Object nullNode3 = null;
        TypedLinkedList listNode4 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
        }

        pargumentNode1 = new AFrfrfArgument(tidNode2, null, listNode4);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new9()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TId tidNode2;
        PAssignValue passignvalueNode3;
        TypedLinkedList listNode4 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        passignvalueNode3 = (PAssignValue)nodeArrayList2.get(0);
        {
        }

        pargumentNode1 = new AFrfrfArgument(tidNode2, passignvalueNode3, listNode4);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new10()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TId tidNode2;
        Object nullNode3 = null;
        TypedLinkedList listNode5 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pargumentNode1 = new AFrfrfArgument(tidNode2, null, listNode5);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new11()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TId tidNode2;
        PAssignValue passignvalueNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        passignvalueNode3 = (PAssignValue)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pargumentNode1 = new AFrfrfArgument(tidNode2, passignvalueNode3, listNode5);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new12()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCiav pciavNode1;
        {
        TComma tcommaNode2;
        TId tidNode3;
        Object nullNode4 = null;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pciavNode1 = new AFfCiav(tcommaNode2, tidNode3, null);
        }
	nodeList.add(pciavNode1);
        return nodeList;
    }



    ArrayList new13()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCiav pciavNode1;
        {
        TComma tcommaNode2;
        TId tidNode3;
        PAssignValue passignvalueNode4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        passignvalueNode4 = (PAssignValue)nodeArrayList3.get(0);

        pciavNode1 = new AFfCiav(tcommaNode2, tidNode3, passignvalueNode4);
        }
	nodeList.add(pciavNode1);
        return nodeList;
    }



    ArrayList new14()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAssignValue passignvalueNode1;
        {
        TAssign tassignNode2;
        PValue pvalueNode3;
        tassignNode2 = (TAssign)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);

        passignvalueNode1 = new AFrfrfrrfrfAssignValue(tassignNode2, pvalueNode3);
        }
	nodeList.add(passignvalueNode1);
        return nodeList;
    }



    ArrayList new15()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TIf tifNode3;
        PComparison pcomparisonNode4;
        TSemi tsemiNode5;
        PStatement pstatementNode6;
        {
        }
        tifNode3 = (TIf)nodeArrayList1.get(0);
        pcomparisonNode4 = (PComparison)nodeArrayList2.get(0);
        tsemiNode5 = (TSemi)nodeArrayList3.get(0);
        pstatementNode6 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AIfStatementStatement(listNode2, tifNode3, pcomparisonNode4, tsemiNode5, pstatementNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new16()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TIf tifNode4;
        PComparison pcomparisonNode5;
        TSemi tsemiNode6;
        PStatement pstatementNode7;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tifNode4 = (TIf)nodeArrayList2.get(0);
        pcomparisonNode5 = (PComparison)nodeArrayList3.get(0);
        tsemiNode6 = (TSemi)nodeArrayList4.get(0);
        pstatementNode7 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AIfStatementStatement(listNode3, tifNode4, pcomparisonNode5, tsemiNode6, pstatementNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new17()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TWhile twhileNode3;
        PComparison pcomparisonNode4;
        TSemi tsemiNode5;
        PStatement pstatementNode6;
        {
        }
        twhileNode3 = (TWhile)nodeArrayList1.get(0);
        pcomparisonNode4 = (PComparison)nodeArrayList2.get(0);
        tsemiNode5 = (TSemi)nodeArrayList3.get(0);
        pstatementNode6 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AWhileStatementStatement(listNode2, twhileNode3, pcomparisonNode4, tsemiNode5, pstatementNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new18()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TWhile twhileNode4;
        PComparison pcomparisonNode5;
        TSemi tsemiNode6;
        PStatement pstatementNode7;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        twhileNode4 = (TWhile)nodeArrayList2.get(0);
        pcomparisonNode5 = (PComparison)nodeArrayList3.get(0);
        tsemiNode6 = (TSemi)nodeArrayList4.get(0);
        pstatementNode7 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileStatementStatement(listNode3, twhileNode4, pcomparisonNode5, tsemiNode6, pstatementNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new19()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TFor tforNode3;
        TId tidNode4;
        TIn tinNode5;
        TId tidNode6;
        TSemi tsemiNode7;
        PStatement pstatementNode8;
        {
        }
        tforNode3 = (TFor)nodeArrayList1.get(0);
        tidNode4 = (TId)nodeArrayList2.get(0);
        tinNode5 = (TIn)nodeArrayList3.get(0);
        tidNode6 = (TId)nodeArrayList4.get(0);
        tsemiNode7 = (TSemi)nodeArrayList5.get(0);
        pstatementNode8 = (PStatement)nodeArrayList6.get(0);

        pstatementNode1 = new AForStatementStatement(listNode2, tforNode3, tidNode4, tinNode5, tidNode6, tsemiNode7, pstatementNode8);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new20()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TFor tforNode4;
        TId tidNode5;
        TIn tinNode6;
        TId tidNode7;
        TSemi tsemiNode8;
        PStatement pstatementNode9;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tforNode4 = (TFor)nodeArrayList2.get(0);
        tidNode5 = (TId)nodeArrayList3.get(0);
        tinNode6 = (TIn)nodeArrayList4.get(0);
        tidNode7 = (TId)nodeArrayList5.get(0);
        tsemiNode8 = (TSemi)nodeArrayList6.get(0);
        pstatementNode9 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AForStatementStatement(listNode3, tforNode4, tidNode5, tinNode6, tidNode7, tsemiNode8, pstatementNode9);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new21()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TReturn treturnNode3;
        PExpression pexpressionNode4;
        {
        }
        treturnNode3 = (TReturn)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AReturnStatementStatement(listNode2, treturnNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new22()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TReturn treturnNode4;
        PExpression pexpressionNode5;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        treturnNode4 = (TReturn)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AReturnStatementStatement(listNode3, treturnNode4, pexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new23()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TPrint tprintNode3;
        PExpression pexpressionNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        {
        }
        tprintNode3 = (TPrint)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);
        {
        }

        pstatementNode1 = new APrintStatementStatement(listNode2, tprintNode3, pexpressionNode4, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new24()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TPrint tprintNode4;
        PExpression pexpressionNode5;
        TypedLinkedList listNode6 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tprintNode4 = (TPrint)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        {
        }

        pstatementNode1 = new APrintStatementStatement(listNode3, tprintNode4, pexpressionNode5, listNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new25()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TPrint tprintNode3;
        PExpression pexpressionNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        {
        }
        tprintNode3 = (TPrint)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstatementNode1 = new APrintStatementStatement(listNode2, tprintNode3, pexpressionNode4, listNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new26()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TPrint tprintNode4;
        PExpression pexpressionNode5;
        TypedLinkedList listNode7 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tprintNode4 = (TPrint)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pstatementNode1 = new APrintStatementStatement(listNode3, tprintNode4, pexpressionNode5, listNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new27()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TId tidNode3;
        TAssign tassignNode4;
        PExpression pexpressionNode5;
        {
        }
        tidNode3 = (TId)nodeArrayList1.get(0);
        tassignNode4 = (TAssign)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignStatement(listNode2, tidNode3, tassignNode4, pexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new28()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TId tidNode4;
        TAssign tassignNode5;
        PExpression pexpressionNode6;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        tassignNode5 = (TAssign)nodeArrayList3.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AAssignStatement(listNode3, tidNode4, tassignNode5, pexpressionNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new29()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TId tidNode3;
        TMineq tmineqNode4;
        PExpression pexpressionNode5;
        {
        }
        tidNode3 = (TId)nodeArrayList1.get(0);
        tmineqNode4 = (TMineq)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AIdMineqStatement(listNode2, tidNode3, tmineqNode4, pexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new30()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TId tidNode4;
        TMineq tmineqNode5;
        PExpression pexpressionNode6;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        tmineqNode5 = (TMineq)nodeArrayList3.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AIdMineqStatement(listNode3, tidNode4, tmineqNode5, pexpressionNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new31()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TId tidNode3;
        TPluseq tpluseqNode4;
        PExpression pexpressionNode5;
        {
        }
        tidNode3 = (TId)nodeArrayList1.get(0);
        tpluseqNode4 = (TPluseq)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AIdPluseqStatement(listNode2, tidNode3, tpluseqNode4, pexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new32()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TId tidNode4;
        TPluseq tpluseqNode5;
        PExpression pexpressionNode6;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        tpluseqNode5 = (TPluseq)nodeArrayList3.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AIdPluseqStatement(listNode3, tidNode4, tpluseqNode5, pexpressionNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new33()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TId tidNode3;
        TDiveq tdiveqNode4;
        PExpression pexpressionNode5;
        {
        }
        tidNode3 = (TId)nodeArrayList1.get(0);
        tdiveqNode4 = (TDiveq)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AIdDiveqStatement(listNode2, tidNode3, tdiveqNode4, pexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new34()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TId tidNode4;
        TDiveq tdiveqNode5;
        PExpression pexpressionNode6;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        tdiveqNode5 = (TDiveq)nodeArrayList3.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AIdDiveqStatement(listNode3, tidNode4, tdiveqNode5, pexpressionNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new35()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TId tidNode3;
        TLBr tlbrNode4;
        PExpression pexpressionNode5;
        TRBr trbrNode6;
        TAssign tassignNode7;
        PExpression pexpressionNode8;
        {
        }
        tidNode3 = (TId)nodeArrayList1.get(0);
        tlbrNode4 = (TLBr)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        trbrNode6 = (TRBr)nodeArrayList4.get(0);
        tassignNode7 = (TAssign)nodeArrayList5.get(0);
        pexpressionNode8 = (PExpression)nodeArrayList6.get(0);

        pstatementNode1 = new APinakasStatement(listNode2, tidNode3, tlbrNode4, pexpressionNode5, trbrNode6, tassignNode7, pexpressionNode8);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new36()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TId tidNode4;
        TLBr tlbrNode5;
        PExpression pexpressionNode6;
        TRBr trbrNode7;
        TAssign tassignNode8;
        PExpression pexpressionNode9;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        tlbrNode5 = (TLBr)nodeArrayList3.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList4.get(0);
        trbrNode7 = (TRBr)nodeArrayList5.get(0);
        tassignNode8 = (TAssign)nodeArrayList6.get(0);
        pexpressionNode9 = (PExpression)nodeArrayList7.get(0);

        pstatementNode1 = new APinakasStatement(listNode3, tidNode4, tlbrNode5, pexpressionNode6, trbrNode7, tassignNode8, pexpressionNode9);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new37()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TAssert tassertNode3;
        PExpression pexpressionNode4;
        Object nullNode5 = null;
        {
        }
        tassertNode3 = (TAssert)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AAssertionStatement(listNode2, tassertNode3, pexpressionNode4, null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new38()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TAssert tassertNode4;
        PExpression pexpressionNode5;
        Object nullNode6 = null;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tassertNode4 = (TAssert)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssertionStatement(listNode3, tassertNode4, pexpressionNode5, null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new39()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TAssert tassertNode3;
        PExpression pexpressionNode4;
        PCommaExpression pcommaexpressionNode5;
        {
        }
        tassertNode3 = (TAssert)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);
        pcommaexpressionNode5 = (PCommaExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssertionStatement(listNode2, tassertNode3, pexpressionNode4, pcommaexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new40()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TAssert tassertNode4;
        PExpression pexpressionNode5;
        PCommaExpression pcommaexpressionNode6;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tassertNode4 = (TAssert)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        pcommaexpressionNode6 = (PCommaExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AAssertionStatement(listNode3, tassertNode4, pexpressionNode5, pcommaexpressionNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new41()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        PFunctionCall pfunctioncallNode3;
        {
        }
        pfunctioncallNode3 = (PFunctionCall)nodeArrayList1.get(0);

        pstatementNode1 = new AFuncCallStatement(listNode2, pfunctioncallNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new42()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        PFunctionCall pfunctioncallNode4;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pfunctioncallNode4 = (PFunctionCall)nodeArrayList2.get(0);

        pstatementNode1 = new AFuncCallStatement(listNode3, pfunctioncallNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new43()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionCall pfunctioncallNode1;
        {
        TId tidNode2;
        TLPar tlparNode3;
        Object nullNode4 = null;
        TRPar trparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        pfunctioncallNode1 = new AEreaFunctionCall(tidNode2, tlparNode3, null, trparNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    ArrayList new44()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionCall pfunctioncallNode1;
        {
        TId tidNode2;
        TLPar tlparNode3;
        PArglist parglistNode4;
        TRPar trparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        parglistNode4 = (PArglist)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfunctioncallNode1 = new AEreaFunctionCall(tidNode2, tlparNode3, parglistNode4, trparNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    ArrayList new45()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArglist parglistNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
        }

        parglistNode1 = new ADdsasaArglist(pexpressionNode2, listNode3);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    ArrayList new46()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArglist parglistNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        parglistNode1 = new ADdsasaArglist(pexpressionNode2, listNode4);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    ArrayList new47()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommaExpression pcommaexpressionNode1;
        {
        TComma tcommaNode2;
        PExpression pexpressionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pcommaexpressionNode1 = new AFrfrfrfrfeCommaExpression(tcommaNode2, pexpressionNode3);
        }
	nodeList.add(pcommaexpressionNode1);
        return nodeList;
    }



    ArrayList new48()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PAfteror pafterorNode2;
        pafterorNode2 = (PAfteror)nodeArrayList1.get(0);

        pcomparisonNode1 = new ADssComparison(pafterorNode2);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new49()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PComparison pcomparisonNode2;
        TLogicOr tlogicorNode3;
        PAfteror pafterorNode4;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);
        tlogicorNode3 = (TLogicOr)nodeArrayList2.get(0);
        pafterorNode4 = (PAfteror)nodeArrayList3.get(0);

        pcomparisonNode1 = new AOrcComparison(pcomparisonNode2, tlogicorNode3, pafterorNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new50()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAfteror pafterorNode1;
        {
        PAfterand pafterandNode2;
        pafterandNode2 = (PAfterand)nodeArrayList1.get(0);

        pafterorNode1 = new ADdAfteror(pafterandNode2);
        }
	nodeList.add(pafterorNode1);
        return nodeList;
    }



    ArrayList new51()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAfteror pafterorNode1;
        {
        PAfteror pafterorNode2;
        TLogicAnd tlogicandNode3;
        PAfterand pafterandNode4;
        pafterorNode2 = (PAfteror)nodeArrayList1.get(0);
        tlogicandNode3 = (TLogicAnd)nodeArrayList2.get(0);
        pafterandNode4 = (PAfterand)nodeArrayList3.get(0);

        pafterorNode1 = new AAndcAfteror(pafterorNode2, tlogicandNode3, pafterandNode4);
        }
	nodeList.add(pafterorNode1);
        return nodeList;
    }



    ArrayList new52()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAfterand pafterandNode1;
        {
        PAfternot pafternotNode2;
        pafternotNode2 = (PAfternot)nodeArrayList1.get(0);

        pafterandNode1 = new AWAfterand(pafternotNode2);
        }
	nodeList.add(pafterandNode1);
        return nodeList;
    }



    ArrayList new53()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAfterand pafterandNode1;
        {
        TNot tnotNode2;
        PAfternot pafternotNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pafternotNode3 = (PAfternot)nodeArrayList2.get(0);

        pafterandNode1 = new ANotcAfterand(tnotNode2, pafternotNode3);
        }
	nodeList.add(pafterandNode1);
        return nodeList;
    }



    ArrayList new54()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAfternot pafternotNode1;
        {
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pafternotNode1 = new ATrueAfternot(ttrueNode2);
        }
	nodeList.add(pafternotNode1);
        return nodeList;
    }



    ArrayList new55()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAfternot pafternotNode1;
        {
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pafternotNode1 = new AFalseAfternot(tfalseNode2);
        }
	nodeList.add(pafternotNode1);
        return nodeList;
    }



    ArrayList new56()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAfternot pafternotNode1;
        {
        PExpression pexpressionNode2;
        TLesseq tlesseqNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tlesseqNode3 = (TLesseq)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pafternotNode1 = new ALesseqAfternot(pexpressionNode2, tlesseqNode3, pexpressionNode4);
        }
	nodeList.add(pafternotNode1);
        return nodeList;
    }



    ArrayList new57()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAfternot pafternotNode1;
        {
        PExpression pexpressionNode2;
        TGreateq tgreateqNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tgreateqNode3 = (TGreateq)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pafternotNode1 = new AGreateqAfternot(pexpressionNode2, tgreateqNode3, pexpressionNode4);
        }
	nodeList.add(pafternotNode1);
        return nodeList;
    }



    ArrayList new58()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAfternot pafternotNode1;
        {
        PExpression pexpressionNode2;
        TNoteq tnoteqNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tnoteqNode3 = (TNoteq)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pafternotNode1 = new ADiffAfternot(pexpressionNode2, tnoteqNode3, pexpressionNode4);
        }
	nodeList.add(pafternotNode1);
        return nodeList;
    }



    ArrayList new59()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAfternot pafternotNode1;
        {
        PExpression pexpressionNode2;
        TEqualequal tequalequalNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tequalequalNode3 = (TEqualequal)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pafternotNode1 = new AEqeqAfternot(pexpressionNode2, tequalequalNode3, pexpressionNode4);
        }
	nodeList.add(pafternotNode1);
        return nodeList;
    }



    ArrayList new60()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAfternot pafternotNode1;
        {
        PExpression pexpressionNode2;
        TLess tlessNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tlessNode3 = (TLess)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pafternotNode1 = new ALesscAfternot(pexpressionNode2, tlessNode3, pexpressionNode4);
        }
	nodeList.add(pafternotNode1);
        return nodeList;
    }



    ArrayList new61()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PAfternot pafternotNode1;
        {
        PExpression pexpressionNode2;
        TGreat tgreatNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tgreatNode3 = (TGreat)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pafternotNode1 = new AGreatcAfternot(pexpressionNode2, tgreatNode3, pexpressionNode4);
        }
	nodeList.add(pafternotNode1);
        return nodeList;
    }



    ArrayList new62()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommaValue pcommavalueNode1;
        {
        TComma tcommaNode2;
        PValue pvalueNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);

        pcommavalueNode1 = new ACvCommaValue(tcommaNode2, pvalueNode3);
        }
	nodeList.add(pcommavalueNode1);
        return nodeList;
    }



    ArrayList new63()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpressionsWithoutCulc pexpressionswithoutculcNode2;
        pexpressionswithoutculcNode2 = (PExpressionsWithoutCulc)nodeArrayList1.get(0);

        pexpressionNode1 = new ADewExpression(pexpressionswithoutculcNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new64()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TId tidNode2;
        TLBr tlbrNode3;
        PExpression pexpressionNode4;
        TRBr trbrNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlbrNode3 = (TLBr)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trbrNode5 = (TRBr)nodeArrayList4.get(0);

        pexpressionNode1 = new APinakasexpExpression(tidNode2, tlbrNode3, pexpressionNode4, trbrNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new65()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        TPlusplus tplusplusNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tplusplusNode3 = (TPlusplus)nodeArrayList2.get(0);

        pexpressionNode1 = new APlplExpression(pexpressionNode2, tplusplusNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new66()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pexpressionNode1 = new ARedExpression(pfunctioncallNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new67()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        TMinusminus tminusminusNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tminusminusNode3 = (TMinusminus)nodeArrayList2.get(0);

        pexpressionNode1 = new AMinminExpression(pexpressionNode2, tminusminusNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new68()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TLen tlenNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        tlenNode2 = (TLen)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pexpressionNode1 = new ALenExpExpression(tlenNode2, tlparNode3, pexpressionNode4, trparNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new69()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        TPlus tplusNode3;
        PExpressionsWithoutCulc pexpressionswithoutculcNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexpressionswithoutculcNode4 = (PExpressionsWithoutCulc)nodeArrayList3.get(0);

        pexpressionNode1 = new AAdditionExExpression(pexpressionNode2, tplusNode3, pexpressionswithoutculcNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new70()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        TMinus tminusNode3;
        PExpressionsWithoutCulc pexpressionswithoutculcNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pexpressionswithoutculcNode4 = (PExpressionsWithoutCulc)nodeArrayList3.get(0);

        pexpressionNode1 = new ASubtractionExExpression(pexpressionNode2, tminusNode3, pexpressionswithoutculcNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new71()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpressionsWithoutCulc pexpressionswithoutculcNode1;
        {
        PMultiplication pmultiplicationNode2;
        pmultiplicationNode2 = (PMultiplication)nodeArrayList1.get(0);

        pexpressionswithoutculcNode1 = new AMsaExpressionsWithoutCulc(pmultiplicationNode2);
        }
	nodeList.add(pexpressionswithoutculcNode1);
        return nodeList;
    }



    ArrayList new72()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpressionsWithoutCulc pexpressionswithoutculcNode1;
        {
        TMax tmaxNode2;
        TLPar tlparNode3;
        PValue pvalueNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TRPar trparNode6;
        tmaxNode2 = (TMax)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);
        {
        }
        trparNode6 = (TRPar)nodeArrayList4.get(0);

        pexpressionswithoutculcNode1 = new AMaxExExpressionsWithoutCulc(tmaxNode2, tlparNode3, pvalueNode4, listNode5, trparNode6);
        }
	nodeList.add(pexpressionswithoutculcNode1);
        return nodeList;
    }



    ArrayList new73()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpressionsWithoutCulc pexpressionswithoutculcNode1;
        {
        TMax tmaxNode2;
        TLPar tlparNode3;
        PValue pvalueNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        TRPar trparNode7;
        tmaxNode2 = (TMax)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trparNode7 = (TRPar)nodeArrayList5.get(0);

        pexpressionswithoutculcNode1 = new AMaxExExpressionsWithoutCulc(tmaxNode2, tlparNode3, pvalueNode4, listNode6, trparNode7);
        }
	nodeList.add(pexpressionswithoutculcNode1);
        return nodeList;
    }



    ArrayList new74()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpressionsWithoutCulc pexpressionswithoutculcNode1;
        {
        TMin tminNode2;
        TLPar tlparNode3;
        PValue pvalueNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TRPar trparNode6;
        tminNode2 = (TMin)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);
        {
        }
        trparNode6 = (TRPar)nodeArrayList4.get(0);

        pexpressionswithoutculcNode1 = new AMinExExpressionsWithoutCulc(tminNode2, tlparNode3, pvalueNode4, listNode5, trparNode6);
        }
	nodeList.add(pexpressionswithoutculcNode1);
        return nodeList;
    }



    ArrayList new75()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpressionsWithoutCulc pexpressionswithoutculcNode1;
        {
        TMin tminNode2;
        TLPar tlparNode3;
        PValue pvalueNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        TRPar trparNode7;
        tminNode2 = (TMin)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trparNode7 = (TRPar)nodeArrayList5.get(0);

        pexpressionswithoutculcNode1 = new AMinExExpressionsWithoutCulc(tminNode2, tlparNode3, pvalueNode4, listNode6, trparNode7);
        }
	nodeList.add(pexpressionswithoutculcNode1);
        return nodeList;
    }



    ArrayList new76()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMultiplication pmultiplicationNode1;
        {
        PPower ppowerNode2;
        ppowerNode2 = (PPower)nodeArrayList1.get(0);

        pmultiplicationNode1 = new APowMultiplication(ppowerNode2);
        }
	nodeList.add(pmultiplicationNode1);
        return nodeList;
    }



    ArrayList new77()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMultiplication pmultiplicationNode1;
        {
        PMultiplication pmultiplicationNode2;
        TDiv tdivNode3;
        PPower ppowerNode4;
        pmultiplicationNode2 = (PMultiplication)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        ppowerNode4 = (PPower)nodeArrayList3.get(0);

        pmultiplicationNode1 = new ADivisionMultiplication(pmultiplicationNode2, tdivNode3, ppowerNode4);
        }
	nodeList.add(pmultiplicationNode1);
        return nodeList;
    }



    ArrayList new78()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMultiplication pmultiplicationNode1;
        {
        PMultiplication pmultiplicationNode2;
        TMod tmodNode3;
        PPower ppowerNode4;
        pmultiplicationNode2 = (PMultiplication)nodeArrayList1.get(0);
        tmodNode3 = (TMod)nodeArrayList2.get(0);
        ppowerNode4 = (PPower)nodeArrayList3.get(0);

        pmultiplicationNode1 = new AModuloMultiplication(pmultiplicationNode2, tmodNode3, ppowerNode4);
        }
	nodeList.add(pmultiplicationNode1);
        return nodeList;
    }



    ArrayList new79()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMultiplication pmultiplicationNode1;
        {
        PMultiplication pmultiplicationNode2;
        TMult tmultNode3;
        PPower ppowerNode4;
        pmultiplicationNode2 = (PMultiplication)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        ppowerNode4 = (PPower)nodeArrayList3.get(0);

        pmultiplicationNode1 = new AMultiplicationMultiplication(pmultiplicationNode2, tmultNode3, ppowerNode4);
        }
	nodeList.add(pmultiplicationNode1);
        return nodeList;
    }



    ArrayList new80()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPower ppowerNode1;
        {
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);

        ppowerNode1 = new AValuePower(pvalueNode2);
        }
	nodeList.add(ppowerNode1);
        return nodeList;
    }



    ArrayList new81()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPower ppowerNode1;
        {
        PPower ppowerNode2;
        TPow tpowNode3;
        PValue pvalueNode4;
        ppowerNode2 = (PPower)nodeArrayList1.get(0);
        tpowNode3 = (TPow)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);

        ppowerNode1 = new APowerPower(ppowerNode2, tpowNode3, pvalueNode4);
        }
	nodeList.add(ppowerNode1);
        return nodeList;
    }



    ArrayList new82()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TId tidNode2;
        TDot tdotNode3;
        PFunctionCall pfunctioncallNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        pfunctioncallNode4 = (PFunctionCall)nodeArrayList3.get(0);

        pvalueNode1 = new AIddotValue(tidNode2, tdotNode3, pfunctioncallNode4);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new83()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        PIdent pidentNode2;
        pidentNode2 = (PIdent)nodeArrayList1.get(0);

        pvalueNode1 = new AIdentifierValue(pidentNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new84()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pvalueNode1 = new ANumbValue(tnumberNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new85()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TStringDoubleQuotes tstringdoublequotesNode2;
        tstringdoublequotesNode2 = (TStringDoubleQuotes)nodeArrayList1.get(0);

        pvalueNode1 = new ADValue(tstringdoublequotesNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new86()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TStringSingleQuotes tstringsinglequotesNode2;
        tstringsinglequotesNode2 = (TStringSingleQuotes)nodeArrayList1.get(0);

        pvalueNode1 = new AWeValue(tstringsinglequotesNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new87()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TLPar tlparNode2;
        PExpression pexpressionNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pvalueNode1 = new APsrValue(tlparNode2, pexpressionNode3, trparNode4);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new88()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TLBr tlbrNode2;
        PExpression pexpressionNode3;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TRBr trbrNode5;
        tlbrNode2 = (TLBr)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        {
        }
        trbrNode5 = (TRBr)nodeArrayList3.get(0);

        pvalueNode1 = new AGiiagigaValue(tlbrNode2, pexpressionNode3, listNode4, trbrNode5);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new89()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TLBr tlbrNode2;
        PExpression pexpressionNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TRBr trbrNode6;
        tlbrNode2 = (TLBr)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trbrNode6 = (TRBr)nodeArrayList4.get(0);

        pvalueNode1 = new AGiiagigaValue(tlbrNode2, pexpressionNode3, listNode5, trbrNode6);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new90()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TNone tnoneNode2;
        tnoneNode2 = (TNone)nodeArrayList1.get(0);

        pvalueNode1 = new ANonenonegoodValue(tnoneNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new91()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PIdent pidentNode1;
        {
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pidentNode1 = new AEIdent(tidNode2);
        }
	nodeList.add(pidentNode1);
        return nodeList;
    }



    ArrayList new92()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PCommands pcommandsNode1;
        pcommandsNode1 = (PCommands)nodeArrayList1.get(0);
	if(pcommandsNode1 != null)
	{
	  listNode2.add(pcommandsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new93()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PCommands pcommandsNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pcommandsNode2 = (PCommands)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommandsNode2 != null)
	{
	  listNode3.add(pcommandsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new94()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        TTab ttabNode1;
        ttabNode1 = (TTab)nodeArrayList1.get(0);
	if(ttabNode1 != null)
	{
	  listNode2.add(ttabNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new95()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        TTab ttabNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        ttabNode2 = (TTab)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ttabNode2 != null)
	{
	  listNode3.add(ttabNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new96()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PCiav pciavNode1;
        pciavNode1 = (PCiav)nodeArrayList1.get(0);
	if(pciavNode1 != null)
	{
	  listNode2.add(pciavNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new97()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PCiav pciavNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pciavNode2 = (PCiav)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pciavNode2 != null)
	{
	  listNode3.add(pciavNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new98()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PCommaExpression pcommaexpressionNode1;
        pcommaexpressionNode1 = (PCommaExpression)nodeArrayList1.get(0);
	if(pcommaexpressionNode1 != null)
	{
	  listNode2.add(pcommaexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new99()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PCommaExpression pcommaexpressionNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pcommaexpressionNode2 = (PCommaExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommaexpressionNode2 != null)
	{
	  listNode3.add(pcommaexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new100()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PCommaValue pcommavalueNode1;
        pcommavalueNode1 = (PCommaValue)nodeArrayList1.get(0);
	if(pcommavalueNode1 != null)
	{
	  listNode2.add(pcommavalueNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new101()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PCommaValue pcommavalueNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pcommavalueNode2 = (PCommaValue)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommavalueNode2 != null)
	{
	  listNode3.add(pcommavalueNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {20, SHIFT, 2}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, REDUCE, 94}, },
			{{-1, ERROR, 2}, {48, SHIFT, 17}, },
			{{-1, ERROR, 3}, {21, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {39, SHIFT, 24}, {41, SHIFT, 25}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 4}, {21, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {39, SHIFT, 24}, {41, SHIFT, 25}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 5}, {48, SHIFT, 43}, },
			{{-1, ERROR, 6}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 7}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 8}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 9}, {4, SHIFT, 47}, {5, SHIFT, 48}, {6, SHIFT, 49}, {19, SHIFT, 50}, {24, SHIFT, 51}, {26, SHIFT, 52}, },
			{{-1, ERROR, 10}, {52, ACCEPT, -1}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {20, SHIFT, 2}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, ERROR, 16}, {0, SHIFT, 54}, {20, SHIFT, 55}, {30, SHIFT, 56}, {31, SHIFT, 57}, {32, SHIFT, 58}, {36, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 61}, {48, SHIFT, 62}, },
			{{-1, ERROR, 17}, {26, SHIFT, 64}, },
			{{-1, ERROR, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {39, SHIFT, 24}, {41, SHIFT, 25}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 19}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 20}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 21}, {26, SHIFT, 68}, },
			{{-1, ERROR, 22}, {26, SHIFT, 69}, },
			{{-1, ERROR, 23}, {26, SHIFT, 70}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 91}, {24, SHIFT, 71}, {26, SHIFT, 52}, {47, SHIFT, 72}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 32}, {23, SHIFT, 73}, {40, SHIFT, 74}, },
			{{-1, REDUCE, 48}, {22, SHIFT, 75}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 36}, {1, SHIFT, 76}, {2, SHIFT, 77}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, {14, SHIFT, 81}, {15, SHIFT, 82}, {16, SHIFT, 83}, {17, SHIFT, 84}, {18, SHIFT, 85}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 71}, {11, SHIFT, 86}, {12, SHIFT, 87}, {13, SHIFT, 88}, },
			{{-1, REDUCE, 76}, {10, SHIFT, 89}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 42}, {23, SHIFT, 73}, {40, SHIFT, 90}, },
			{{-1, ERROR, 43}, {29, SHIFT, 91}, },
			{{-1, REDUCE, 23}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, {28, SHIFT, 92}, },
			{{-1, REDUCE, 21}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, },
			{{-1, REDUCE, 37}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, {28, SHIFT, 92}, },
			{{-1, ERROR, 47}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 48}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 49}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 50}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 51}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 52}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 101}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 95}, },
			{{-1, ERROR, 55}, {48, SHIFT, 104}, },
			{{-1, ERROR, 56}, {21, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {39, SHIFT, 24}, {41, SHIFT, 25}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 57}, {21, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {39, SHIFT, 24}, {41, SHIFT, 25}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 58}, {48, SHIFT, 107}, },
			{{-1, ERROR, 59}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 60}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 61}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 62}, {4, SHIFT, 111}, {5, SHIFT, 112}, {6, SHIFT, 113}, {19, SHIFT, 114}, {24, SHIFT, 115}, {26, SHIFT, 52}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 64}, {27, SHIFT, 116}, {48, SHIFT, 117}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 66}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, {25, SHIFT, 119}, {28, SHIFT, 92}, },
			{{-1, ERROR, 67}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, {27, SHIFT, 121}, },
			{{-1, ERROR, 68}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 69}, {24, SHIFT, 19}, {26, SHIFT, 20}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 123}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 70}, {24, SHIFT, 19}, {26, SHIFT, 20}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 123}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 71}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 72}, {48, SHIFT, 127}, },
			{{-1, ERROR, 73}, {21, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {39, SHIFT, 24}, {41, SHIFT, 25}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 74}, {0, SHIFT, 1}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, ERROR, 75}, {21, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {39, SHIFT, 24}, {41, SHIFT, 25}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 77}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 79}, {24, SHIFT, 19}, {26, SHIFT, 20}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 123}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 80}, {24, SHIFT, 19}, {26, SHIFT, 20}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 123}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 81}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 82}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 83}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 84}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 85}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 86}, {24, SHIFT, 19}, {26, SHIFT, 20}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 123}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 87}, {24, SHIFT, 19}, {26, SHIFT, 20}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 123}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 88}, {24, SHIFT, 19}, {26, SHIFT, 20}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 123}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 89}, {24, SHIFT, 19}, {26, SHIFT, 20}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 123}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 90}, {0, SHIFT, 1}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, ERROR, 91}, {48, SHIFT, 146}, },
			{{-1, ERROR, 92}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 25}, {28, SHIFT, 92}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 29}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, },
			{{-1, REDUCE, 31}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, },
			{{-1, REDUCE, 33}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, },
			{{-1, REDUCE, 27}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, },
			{{-1, ERROR, 100}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, {25, SHIFT, 149}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 102}, {27, SHIFT, 150}, },
			{{-1, REDUCE, 45}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, {28, SHIFT, 92}, },
			{{-1, ERROR, 104}, {26, SHIFT, 152}, },
			{{-1, ERROR, 105}, {23, SHIFT, 73}, {40, SHIFT, 153}, },
			{{-1, ERROR, 106}, {23, SHIFT, 73}, {40, SHIFT, 154}, },
			{{-1, ERROR, 107}, {29, SHIFT, 155}, },
			{{-1, REDUCE, 24}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, {28, SHIFT, 92}, },
			{{-1, REDUCE, 22}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, },
			{{-1, REDUCE, 38}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, {28, SHIFT, 92}, },
			{{-1, ERROR, 111}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 112}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 113}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 114}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 115}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 116}, {40, SHIFT, 163}, },
			{{-1, REDUCE, 8}, {19, SHIFT, 164}, {28, SHIFT, 165}, },
			{{-1, ERROR, 118}, {27, SHIFT, 169}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 120}, {25, SHIFT, 170}, {28, SHIFT, 92}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 122}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, {27, SHIFT, 171}, },
			{{-1, REDUCE, 91}, {47, SHIFT, 72}, },
			{{-1, ERROR, 124}, {27, SHIFT, 172}, {28, SHIFT, 173}, },
			{{-1, ERROR, 125}, {27, SHIFT, 176}, {28, SHIFT, 173}, },
			{{-1, ERROR, 126}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, {25, SHIFT, 178}, },
			{{-1, ERROR, 127}, {26, SHIFT, 52}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 49}, {22, SHIFT, 75}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 131}, {0, SHIFT, 54}, {30, SHIFT, 56}, {31, SHIFT, 57}, {32, SHIFT, 58}, {36, SHIFT, 59}, {37, SHIFT, 60}, {38, SHIFT, 61}, {48, SHIFT, 62}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 59}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 58}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, },
			{{-1, REDUCE, 56}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, },
			{{-1, REDUCE, 57}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, },
			{{-1, REDUCE, 60}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, },
			{{-1, REDUCE, 61}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, },
			{{-1, REDUCE, 79}, {10, SHIFT, 89}, },
			{{-1, REDUCE, 78}, {10, SHIFT, 89}, },
			{{-1, REDUCE, 77}, {10, SHIFT, 89}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 146}, {40, SHIFT, 179}, },
			{{-1, REDUCE, 47}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, },
			{{-1, REDUCE, 99}, },
			{{-1, ERROR, 149}, {19, SHIFT, 180}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 46}, {28, SHIFT, 92}, },
			{{-1, ERROR, 152}, {27, SHIFT, 181}, {48, SHIFT, 117}, },
			{{-1, ERROR, 153}, {0, SHIFT, 1}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, ERROR, 154}, {0, SHIFT, 1}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, ERROR, 155}, {48, SHIFT, 185}, },
			{{-1, REDUCE, 26}, {28, SHIFT, 92}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 30}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, },
			{{-1, REDUCE, 32}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, },
			{{-1, REDUCE, 34}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, },
			{{-1, REDUCE, 28}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, },
			{{-1, ERROR, 162}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, {25, SHIFT, 186}, },
			{{-1, ERROR, 163}, {0, SHIFT, 1}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, ERROR, 164}, {24, SHIFT, 19}, {26, SHIFT, 20}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 123}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 165}, {48, SHIFT, 189}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 9}, {28, SHIFT, 165}, },
			{{-1, REDUCE, 10}, {28, SHIFT, 165}, },
			{{-1, ERROR, 169}, {40, SHIFT, 192}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 173}, {24, SHIFT, 19}, {26, SHIFT, 20}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 123}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, REDUCE, 100}, },
			{{-1, ERROR, 175}, {27, SHIFT, 194}, {28, SHIFT, 173}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 177}, {27, SHIFT, 196}, {28, SHIFT, 173}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 179}, {0, SHIFT, 1}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, ERROR, 180}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, ERROR, 181}, {40, SHIFT, 199}, },
			{{-1, ERROR, 182}, {27, SHIFT, 200}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 185}, {40, SHIFT, 201}, },
			{{-1, ERROR, 186}, {19, SHIFT, 202}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 12}, {19, SHIFT, 164}, },
			{{-1, REDUCE, 11}, {28, SHIFT, 165}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 192}, {0, SHIFT, 1}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 35}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, },
			{{-1, ERROR, 199}, {0, SHIFT, 1}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, ERROR, 200}, {40, SHIFT, 206}, },
			{{-1, ERROR, 201}, {0, SHIFT, 1}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, ERROR, 202}, {24, SHIFT, 19}, {26, SHIFT, 20}, {33, SHIFT, 21}, {34, SHIFT, 22}, {35, SHIFT, 23}, {43, SHIFT, 26}, {46, SHIFT, 27}, {48, SHIFT, 28}, {49, SHIFT, 29}, {50, SHIFT, 30}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 206}, {0, SHIFT, 1}, {30, SHIFT, 3}, {31, SHIFT, 4}, {32, SHIFT, 5}, {36, SHIFT, 6}, {37, SHIFT, 7}, {38, SHIFT, 8}, {48, SHIFT, 9}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 36}, {1, SHIFT, 76}, {3, SHIFT, 78}, {8, SHIFT, 79}, {9, SHIFT, 80}, },
			{{-1, REDUCE, 7}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 10}, },
			{{-1, 11}, {15, 53}, },
			{{-1, 12}, },
			{{-1, 118}, {152, 182}, },
			{{-1, 166}, {168, 191}, {190, 191}, },
			{{-1, 167}, {189, 203}, },
			{{-1, 13}, {74, 130}, {90, 145}, {153, 183}, {154, 184}, {163, 187}, {179, 197}, {192, 204}, {199, 205}, {201, 207}, {206, 209}, },
			{{-1, 31}, {0, 14}, {15, 14}, {16, 63}, {72, 128}, {74, 14}, {90, 14}, {131, 63}, {153, 14}, {154, 14}, {163, 14}, {179, 14}, {192, 14}, {199, 14}, {201, 14}, {206, 14}, },
			{{-1, 102}, },
			{{-1, 93}, {46, 95}, {94, 148}, {110, 157}, {120, 148}, {151, 148}, {156, 148}, },
			{{-1, 32}, {4, 42}, {56, 105}, {57, 106}, },
			{{-1, 33}, {73, 129}, },
			{{-1, 34}, {75, 132}, },
			{{-1, 35}, {18, 65}, },
			{{-1, 174}, {175, 195}, {177, 195}, },
			{{-1, 36}, {6, 44}, {7, 45}, {8, 46}, {19, 66}, {20, 67}, {47, 96}, {48, 97}, {49, 98}, {50, 99}, {51, 100}, {52, 103}, {59, 108}, {60, 109}, {61, 110}, {68, 122}, {71, 126}, {77, 133}, {81, 136}, {82, 137}, {83, 138}, {84, 139}, {85, 140}, {92, 147}, {111, 158}, {112, 159}, {113, 160}, {114, 161}, {115, 162}, {180, 198}, {202, 208}, },
			{{-1, 37}, {79, 134}, {80, 135}, },
			{{-1, 38}, },
			{{-1, 39}, {86, 141}, {87, 142}, {88, 143}, },
			{{-1, 40}, {69, 124}, {70, 125}, {89, 144}, {164, 188}, {173, 193}, },
			{{-1, 41}, },
			{{-1, 15}, },
			{{-1, 131}, {0, 16}, {15, 16}, },
			{{-1, 168}, {167, 190}, },
			{{-1, 94}, {66, 120}, {103, 151}, {108, 156}, },
			{{-1, 175}, {125, 177}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: tab, 'def', 'if', 'while', 'for', 'print', 'return', 'assert', id, EOF",
			"expecting: tab, 'def', 'if', 'while', 'for', 'print', 'return', 'assert', id",
			"expecting: id",
			"expecting: 'not', '[', '(', 'len', 'min', 'max', 'true', 'false', 'None', number, id, string double quotes, string single quotes",
			"expecting: '[', '(', 'len', 'min', 'max', 'None', number, id, string double quotes, string single quotes",
			"expecting: '-=', '+=', '/=', '=', '[', '('",
			"expecting: EOF",
			"expecting: '('",
			"expecting: '[', '(', 'len', 'min', 'max', 'true', 'false', 'None', number, id, string double quotes, string single quotes",
			"expecting: 'and', 'or', ':'",
			"expecting: tab, '++', '==', '--', '+', '-', '**', '*', '%', '/', '!=', '<=', '>=', '<', '>', 'def', 'and', 'or', ']', ')', ',', 'if', 'while', 'for', 'print', 'return', 'assert', ':', id, EOF",
			"expecting: tab, '++', '==', '--', '+', '-', '**', '*', '%', '/', '!=', '<=', '>=', '<', '>', 'def', 'and', 'or', '[', ']', '(', ')', ',', 'if', 'while', 'for', 'print', 'return', 'assert', ':', '.', id, EOF",
			"expecting: tab, '++', '==', '--', '+', '-', '!=', '<=', '>=', '<', '>', 'def', 'and', 'or', ']', ')', ',', 'if', 'while', 'for', 'print', 'return', 'assert', ':', id, EOF",
			"expecting: 'or', ':'",
			"expecting: '++', '==', '--', '+', '-', '!=', '<=', '>=', '<', '>'",
			"expecting: tab, '++', '==', '--', '+', '-', '*', '%', '/', '!=', '<=', '>=', '<', '>', 'def', 'and', 'or', ']', ')', ',', 'if', 'while', 'for', 'print', 'return', 'assert', ':', id, EOF",
			"expecting: 'in'",
			"expecting: tab, '++', '--', '+', '-', 'def', ',', 'if', 'while', 'for', 'print', 'return', 'assert', id, EOF",
			"expecting: tab, '++', '--', '+', '-', 'def', 'if', 'while', 'for', 'print', 'return', 'assert', id, EOF",
			"expecting: '[', '(', ')', 'len', 'min', 'max', 'None', number, id, string double quotes, string single quotes",
			"expecting: ')', id",
			"expecting: '++', '--', '+', '-', ']', ','",
			"expecting: '++', '--', '+', '-', ')'",
			"expecting: '[', '(', 'None', number, id, string double quotes, string single quotes",
			"expecting: tab, 'if', 'while', 'for', 'print', 'return', 'assert', id",
			"expecting: '[', '(', 'min', 'max', 'None', number, id, string double quotes, string single quotes",
			"expecting: tab, 'def', ']', ')', ',', 'if', 'while', 'for', 'print', 'return', 'assert', id, EOF",
			"expecting: tab, 'def', ',', 'if', 'while', 'for', 'print', 'return', 'assert', id, EOF",
			"expecting: '++', '--', '+', '-', ']'",
			"expecting: ')'",
			"expecting: '++', '--', '+', '-', ')', ','",
			"expecting: ':'",
			"expecting: '=', ')', ','",
			"expecting: ']', ','",
			"expecting: tab, '++', '==', '--', '+', '-', '**', '*', '%', '/', '!=', '<=', '>=', '<', '>', 'def', 'and', 'or', ']', ')', ',', 'if', 'while', 'for', 'print', 'return', 'assert', ':', '.', id, EOF",
			"expecting: ')', ','",
			"expecting: '++', '--', '+', '-', 'and', 'or', ':'",
			"expecting: tab, '++', '--', '+', '-', 'def', ']', ')', ',', 'if', 'while', 'for', 'print', 'return', 'assert', id, EOF",
			"expecting: '='",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 2, 4, 4, 4, 5, 6, 0, 0, 0, 0, 0, 1, 7, 8, 4, 4, 7, 7, 7, 9, 9, 10, 10, 11, 10, 10, 12, 13, 9, 9, 9, 14, 12, 15, 10, 10, 10, 13, 16, 17, 18, 17, 4, 4, 4, 4, 4, 19, 0, 1, 2, 3, 3, 2, 4, 4, 4, 5, 0, 20, 9, 21, 22, 4, 23, 23, 4, 2, 3, 24, 3, 12, 4, 12, 25, 25, 4, 4, 4, 4, 4, 23, 23, 23, 23, 24, 2, 4, 26, 27, 0, 18, 18, 18, 18, 28, 10, 29, 30, 7, 13, 13, 16, 17, 18, 17, 4, 4, 4, 4, 4, 31, 32, 29, 10, 33, 10, 22, 34, 35, 35, 28, 7, 10, 9, 0, 24, 9, 36, 12, 12, 36, 36, 36, 36, 36, 10, 10, 10, 10, 0, 31, 37, 26, 38, 10, 35, 20, 24, 24, 2, 27, 0, 18, 18, 18, 18, 28, 24, 23, 2, 35, 35, 35, 31, 10, 12, 12, 23, 35, 35, 12, 35, 12, 24, 4, 31, 29, 0, 0, 31, 38, 0, 35, 32, 35, 35, 24, 35, 12, 35, 12, 0, 18, 24, 31, 24, 4, 35, 0, 0, 24, 0, 18, 0, 
        };*/
}
