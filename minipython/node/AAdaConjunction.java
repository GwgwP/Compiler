/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AAdaConjunction extends PConjunction
{
    private PInversion _gg_;
    private TLogicAnd _logicAnd_;
    private PInversion _g_;

    public AAdaConjunction()
    {
    }

    public AAdaConjunction(
        PInversion _gg_,
        TLogicAnd _logicAnd_,
        PInversion _g_)
    {
        setGg(_gg_);

        setLogicAnd(_logicAnd_);

        setG(_g_);

    }
    public Object clone()
    {
        return new AAdaConjunction(
            (PInversion) cloneNode(_gg_),
            (TLogicAnd) cloneNode(_logicAnd_),
            (PInversion) cloneNode(_g_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAdaConjunction(this);
    }

    public PInversion getGg()
    {
        return _gg_;
    }

    public void setGg(PInversion node)
    {
        if(_gg_ != null)
        {
            _gg_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _gg_ = node;
    }

    public TLogicAnd getLogicAnd()
    {
        return _logicAnd_;
    }

    public void setLogicAnd(TLogicAnd node)
    {
        if(_logicAnd_ != null)
        {
            _logicAnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _logicAnd_ = node;
    }

    public PInversion getG()
    {
        return _g_;
    }

    public void setG(PInversion node)
    {
        if(_g_ != null)
        {
            _g_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _g_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_gg_)
            + toString(_logicAnd_)
            + toString(_g_);
    }

    void removeChild(Node child)
    {
        if(_gg_ == child)
        {
            _gg_ = null;
            return;
        }

        if(_logicAnd_ == child)
        {
            _logicAnd_ = null;
            return;
        }

        if(_g_ == child)
        {
            _g_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_gg_ == oldChild)
        {
            setGg((PInversion) newChild);
            return;
        }

        if(_logicAnd_ == oldChild)
        {
            setLogicAnd((TLogicAnd) newChild);
            return;
        }

        if(_g_ == oldChild)
        {
            setG((PInversion) newChild);
            return;
        }

    }
}
