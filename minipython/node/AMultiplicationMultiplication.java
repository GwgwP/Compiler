/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import minipython.analysis.*;

@SuppressWarnings("nls")
public final class AMultiplicationMultiplication extends PMultiplication
{
    private PMultiplication _multiplication_;
    private TMult _mult_;
    private PPower _power_;

    public AMultiplicationMultiplication()
    {
        // Constructor
    }

    public AMultiplicationMultiplication(
        @SuppressWarnings("hiding") PMultiplication _multiplication_,
        @SuppressWarnings("hiding") TMult _mult_,
        @SuppressWarnings("hiding") PPower _power_)
    {
        // Constructor
        setMultiplication(_multiplication_);

        setMult(_mult_);

        setPower(_power_);

    }

    @Override
    public Object clone()
    {
        return new AMultiplicationMultiplication(
            cloneNode(this._multiplication_),
            cloneNode(this._mult_),
            cloneNode(this._power_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultiplicationMultiplication(this);
    }

    public PMultiplication getMultiplication()
    {
        return this._multiplication_;
    }

    public void setMultiplication(PMultiplication node)
    {
        if(this._multiplication_ != null)
        {
            this._multiplication_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._multiplication_ = node;
    }

    public TMult getMult()
    {
        return this._mult_;
    }

    public void setMult(TMult node)
    {
        if(this._mult_ != null)
        {
            this._mult_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mult_ = node;
    }

    public PPower getPower()
    {
        return this._power_;
    }

    public void setPower(PPower node)
    {
        if(this._power_ != null)
        {
            this._power_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._power_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._multiplication_)
            + toString(this._mult_)
            + toString(this._power_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._multiplication_ == child)
        {
            this._multiplication_ = null;
            return;
        }

        if(this._mult_ == child)
        {
            this._mult_ = null;
            return;
        }

        if(this._power_ == child)
        {
            this._power_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._multiplication_ == oldChild)
        {
            setMultiplication((PMultiplication) newChild);
            return;
        }

        if(this._mult_ == oldChild)
        {
            setMult((TMult) newChild);
            return;
        }

        if(this._power_ == oldChild)
        {
            setPower((PPower) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
