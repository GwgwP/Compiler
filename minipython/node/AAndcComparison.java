/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AAndcComparison extends PComparison
{
    private PComparison _lcom_;
    private TLogicAnd _logicAnd_;
    private PComparison _rcom_;

    public AAndcComparison()
    {
    }

    public AAndcComparison(
        PComparison _lcom_,
        TLogicAnd _logicAnd_,
        PComparison _rcom_)
    {
        setLcom(_lcom_);

        setLogicAnd(_logicAnd_);

        setRcom(_rcom_);

    }
    public Object clone()
    {
        return new AAndcComparison(
            (PComparison) cloneNode(_lcom_),
            (TLogicAnd) cloneNode(_logicAnd_),
            (PComparison) cloneNode(_rcom_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAndcComparison(this);
    }

    public PComparison getLcom()
    {
        return _lcom_;
    }

    public void setLcom(PComparison node)
    {
        if(_lcom_ != null)
        {
            _lcom_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lcom_ = node;
    }

    public TLogicAnd getLogicAnd()
    {
        return _logicAnd_;
    }

    public void setLogicAnd(TLogicAnd node)
    {
        if(_logicAnd_ != null)
        {
            _logicAnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _logicAnd_ = node;
    }

    public PComparison getRcom()
    {
        return _rcom_;
    }

    public void setRcom(PComparison node)
    {
        if(_rcom_ != null)
        {
            _rcom_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rcom_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_lcom_)
            + toString(_logicAnd_)
            + toString(_rcom_);
    }

    void removeChild(Node child)
    {
        if(_lcom_ == child)
        {
            _lcom_ = null;
            return;
        }

        if(_logicAnd_ == child)
        {
            _logicAnd_ = null;
            return;
        }

        if(_rcom_ == child)
        {
            _rcom_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lcom_ == oldChild)
        {
            setLcom((PComparison) newChild);
            return;
        }

        if(_logicAnd_ == oldChild)
        {
            setLogicAnd((TLogicAnd) newChild);
            return;
        }

        if(_rcom_ == oldChild)
        {
            setRcom((PComparison) newChild);
            return;
        }

    }
}
