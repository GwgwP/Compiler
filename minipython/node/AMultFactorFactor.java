/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AMultFactorFactor extends PFactor
{
    private PMultiplication _multiplication_;

    public AMultFactorFactor()
    {
    }

    public AMultFactorFactor(
        PMultiplication _multiplication_)
    {
        setMultiplication(_multiplication_);

    }
    public Object clone()
    {
        return new AMultFactorFactor(
            (PMultiplication) cloneNode(_multiplication_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultFactorFactor(this);
    }

    public PMultiplication getMultiplication()
    {
        return _multiplication_;
    }

    public void setMultiplication(PMultiplication node)
    {
        if(_multiplication_ != null)
        {
            _multiplication_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _multiplication_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_multiplication_);
    }

    void removeChild(Node child)
    {
        if(_multiplication_ == child)
        {
            _multiplication_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_multiplication_ == oldChild)
        {
            setMultiplication((PMultiplication) newChild);
            return;
        }

    }
}
