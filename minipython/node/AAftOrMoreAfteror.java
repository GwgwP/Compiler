/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AAftOrMoreAfteror extends PAfteror
{
    private PAfteror _afteror_;
    private TLogicAnd _logicAnd_;
    private PAfterand _afterand_;

    public AAftOrMoreAfteror()
    {
    }

    public AAftOrMoreAfteror(
        PAfteror _afteror_,
        TLogicAnd _logicAnd_,
        PAfterand _afterand_)
    {
        setAfteror(_afteror_);

        setLogicAnd(_logicAnd_);

        setAfterand(_afterand_);

    }
    public Object clone()
    {
        return new AAftOrMoreAfteror(
            (PAfteror) cloneNode(_afteror_),
            (TLogicAnd) cloneNode(_logicAnd_),
            (PAfterand) cloneNode(_afterand_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAftOrMoreAfteror(this);
    }

    public PAfteror getAfteror()
    {
        return _afteror_;
    }

    public void setAfteror(PAfteror node)
    {
        if(_afteror_ != null)
        {
            _afteror_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _afteror_ = node;
    }

    public TLogicAnd getLogicAnd()
    {
        return _logicAnd_;
    }

    public void setLogicAnd(TLogicAnd node)
    {
        if(_logicAnd_ != null)
        {
            _logicAnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _logicAnd_ = node;
    }

    public PAfterand getAfterand()
    {
        return _afterand_;
    }

    public void setAfterand(PAfterand node)
    {
        if(_afterand_ != null)
        {
            _afterand_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _afterand_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_afteror_)
            + toString(_logicAnd_)
            + toString(_afterand_);
    }

    void removeChild(Node child)
    {
        if(_afteror_ == child)
        {
            _afteror_ = null;
            return;
        }

        if(_logicAnd_ == child)
        {
            _logicAnd_ = null;
            return;
        }

        if(_afterand_ == child)
        {
            _afterand_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_afteror_ == oldChild)
        {
            setAfteror((PAfteror) newChild);
            return;
        }

        if(_logicAnd_ == oldChild)
        {
            setLogicAnd((TLogicAnd) newChild);
            return;
        }

        if(_afterand_ == oldChild)
        {
            setAfterand((PAfterand) newChild);
            return;
        }

    }
}
