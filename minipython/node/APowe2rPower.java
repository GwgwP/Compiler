/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class APowe2rPower extends PPower
{
    private PPower _power_;
    private TPow _pow_;
    private PExpressionsWithoutCulc _expressionsWithoutCulc_;

    public APowe2rPower()
    {
    }

    public APowe2rPower(
        PPower _power_,
        TPow _pow_,
        PExpressionsWithoutCulc _expressionsWithoutCulc_)
    {
        setPower(_power_);

        setPow(_pow_);

        setExpressionsWithoutCulc(_expressionsWithoutCulc_);

    }
    public Object clone()
    {
        return new APowe2rPower(
            (PPower) cloneNode(_power_),
            (TPow) cloneNode(_pow_),
            (PExpressionsWithoutCulc) cloneNode(_expressionsWithoutCulc_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPowe2rPower(this);
    }

    public PPower getPower()
    {
        return _power_;
    }

    public void setPower(PPower node)
    {
        if(_power_ != null)
        {
            _power_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _power_ = node;
    }

    public TPow getPow()
    {
        return _pow_;
    }

    public void setPow(TPow node)
    {
        if(_pow_ != null)
        {
            _pow_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _pow_ = node;
    }

    public PExpressionsWithoutCulc getExpressionsWithoutCulc()
    {
        return _expressionsWithoutCulc_;
    }

    public void setExpressionsWithoutCulc(PExpressionsWithoutCulc node)
    {
        if(_expressionsWithoutCulc_ != null)
        {
            _expressionsWithoutCulc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expressionsWithoutCulc_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_power_)
            + toString(_pow_)
            + toString(_expressionsWithoutCulc_);
    }

    void removeChild(Node child)
    {
        if(_power_ == child)
        {
            _power_ = null;
            return;
        }

        if(_pow_ == child)
        {
            _pow_ = null;
            return;
        }

        if(_expressionsWithoutCulc_ == child)
        {
            _expressionsWithoutCulc_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_power_ == oldChild)
        {
            setPower((PPower) newChild);
            return;
        }

        if(_pow_ == oldChild)
        {
            setPow((TPow) newChild);
            return;
        }

        if(_expressionsWithoutCulc_ == oldChild)
        {
            setExpressionsWithoutCulc((PExpressionsWithoutCulc) newChild);
            return;
        }

    }
}
