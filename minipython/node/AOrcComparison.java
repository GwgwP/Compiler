/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AOrcComparison extends PComparison
{
    private PComparison _lcom_;
    private TLogicOr _logicOr_;
    private PComparison _rcom_;

    public AOrcComparison()
    {
    }

    public AOrcComparison(
        PComparison _lcom_,
        TLogicOr _logicOr_,
        PComparison _rcom_)
    {
        setLcom(_lcom_);

        setLogicOr(_logicOr_);

        setRcom(_rcom_);

    }
    public Object clone()
    {
        return new AOrcComparison(
            (PComparison) cloneNode(_lcom_),
            (TLogicOr) cloneNode(_logicOr_),
            (PComparison) cloneNode(_rcom_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOrcComparison(this);
    }

    public PComparison getLcom()
    {
        return _lcom_;
    }

    public void setLcom(PComparison node)
    {
        if(_lcom_ != null)
        {
            _lcom_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lcom_ = node;
    }

    public TLogicOr getLogicOr()
    {
        return _logicOr_;
    }

    public void setLogicOr(TLogicOr node)
    {
        if(_logicOr_ != null)
        {
            _logicOr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _logicOr_ = node;
    }

    public PComparison getRcom()
    {
        return _rcom_;
    }

    public void setRcom(PComparison node)
    {
        if(_rcom_ != null)
        {
            _rcom_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rcom_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_lcom_)
            + toString(_logicOr_)
            + toString(_rcom_);
    }

    void removeChild(Node child)
    {
        if(_lcom_ == child)
        {
            _lcom_ = null;
            return;
        }

        if(_logicOr_ == child)
        {
            _logicOr_ = null;
            return;
        }

        if(_rcom_ == child)
        {
            _rcom_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lcom_ == oldChild)
        {
            setLcom((PComparison) newChild);
            return;
        }

        if(_logicOr_ == oldChild)
        {
            setLogicOr((TLogicOr) newChild);
            return;
        }

        if(_rcom_ == oldChild)
        {
            setRcom((PComparison) newChild);
            return;
        }

    }
}
