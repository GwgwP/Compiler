/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class APlplSimpleExpression extends PSimpleExpression
{
    private PSimpleExpression _simpleExpression_;
    private TPlusplus _plusplus_;

    public APlplSimpleExpression()
    {
    }

    public APlplSimpleExpression(
        PSimpleExpression _simpleExpression_,
        TPlusplus _plusplus_)
    {
        setSimpleExpression(_simpleExpression_);

        setPlusplus(_plusplus_);

    }
    public Object clone()
    {
        return new APlplSimpleExpression(
            (PSimpleExpression) cloneNode(_simpleExpression_),
            (TPlusplus) cloneNode(_plusplus_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPlplSimpleExpression(this);
    }

    public PSimpleExpression getSimpleExpression()
    {
        return _simpleExpression_;
    }

    public void setSimpleExpression(PSimpleExpression node)
    {
        if(_simpleExpression_ != null)
        {
            _simpleExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _simpleExpression_ = node;
    }

    public TPlusplus getPlusplus()
    {
        return _plusplus_;
    }

    public void setPlusplus(TPlusplus node)
    {
        if(_plusplus_ != null)
        {
            _plusplus_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _plusplus_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_simpleExpression_)
            + toString(_plusplus_);
    }

    void removeChild(Node child)
    {
        if(_simpleExpression_ == child)
        {
            _simpleExpression_ = null;
            return;
        }

        if(_plusplus_ == child)
        {
            _plusplus_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_simpleExpression_ == oldChild)
        {
            setSimpleExpression((PSimpleExpression) newChild);
            return;
        }

        if(_plusplus_ == oldChild)
        {
            setPlusplus((TPlusplus) newChild);
            return;
        }

    }
}
