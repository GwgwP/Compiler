/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import minipython.analysis.*;

@SuppressWarnings("nls")
public final class ASubtractionExpression extends PExpression
{
    private PExpression _expression_;
    private TMinus _minus_;
    private PMultiplication _multiplication_;

    public ASubtractionExpression()
    {
        // Constructor
    }

    public ASubtractionExpression(
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TMinus _minus_,
        @SuppressWarnings("hiding") PMultiplication _multiplication_)
    {
        // Constructor
        setExpression(_expression_);

        setMinus(_minus_);

        setMultiplication(_multiplication_);

    }

    @Override
    public Object clone()
    {
        return new ASubtractionExpression(
            cloneNode(this._expression_),
            cloneNode(this._minus_),
            cloneNode(this._multiplication_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASubtractionExpression(this);
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TMinus getMinus()
    {
        return this._minus_;
    }

    public void setMinus(TMinus node)
    {
        if(this._minus_ != null)
        {
            this._minus_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._minus_ = node;
    }

    public PMultiplication getMultiplication()
    {
        return this._multiplication_;
    }

    public void setMultiplication(PMultiplication node)
    {
        if(this._multiplication_ != null)
        {
            this._multiplication_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._multiplication_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expression_)
            + toString(this._minus_)
            + toString(this._multiplication_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._minus_ == child)
        {
            this._minus_ = null;
            return;
        }

        if(this._multiplication_ == child)
        {
            this._multiplication_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._minus_ == oldChild)
        {
            setMinus((TMinus) newChild);
            return;
        }

        if(this._multiplication_ == oldChild)
        {
            setMultiplication((PMultiplication) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
