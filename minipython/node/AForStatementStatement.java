/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AForStatementStatement extends PStatement
{
    private TId _lid_;
    private TId _rid_;
    private PStatement _statement_;

    public AForStatementStatement()
    {
    }

    public AForStatementStatement(
        TId _lid_,
        TId _rid_,
        PStatement _statement_)
    {
        setLid(_lid_);

        setRid(_rid_);

        setStatement(_statement_);

    }
    public Object clone()
    {
        return new AForStatementStatement(
            (TId) cloneNode(_lid_),
            (TId) cloneNode(_rid_),
            (PStatement) cloneNode(_statement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForStatementStatement(this);
    }

    public TId getLid()
    {
        return _lid_;
    }

    public void setLid(TId node)
    {
        if(_lid_ != null)
        {
            _lid_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lid_ = node;
    }

    public TId getRid()
    {
        return _rid_;
    }

    public void setRid(TId node)
    {
        if(_rid_ != null)
        {
            _rid_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rid_ = node;
    }

    public PStatement getStatement()
    {
        return _statement_;
    }

    public void setStatement(PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _statement_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_lid_)
            + toString(_rid_)
            + toString(_statement_);
    }

    void removeChild(Node child)
    {
        if(_lid_ == child)
        {
            _lid_ = null;
            return;
        }

        if(_rid_ == child)
        {
            _rid_ = null;
            return;
        }

        if(_statement_ == child)
        {
            _statement_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lid_ == oldChild)
        {
            setLid((TId) newChild);
            return;
        }

        if(_rid_ == oldChild)
        {
            setRid((TId) newChild);
            return;
        }

        if(_statement_ == oldChild)
        {
            setStatement((PStatement) newChild);
            return;
        }

    }
}
