/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AAgfraDisjunction extends PDisjunction
{
    private PConjunction _gg_;
    private TLogicOr _logicOr_;
    private PConjunction _t_;

    public AAgfraDisjunction()
    {
    }

    public AAgfraDisjunction(
        PConjunction _gg_,
        TLogicOr _logicOr_,
        PConjunction _t_)
    {
        setGg(_gg_);

        setLogicOr(_logicOr_);

        setT(_t_);

    }
    public Object clone()
    {
        return new AAgfraDisjunction(
            (PConjunction) cloneNode(_gg_),
            (TLogicOr) cloneNode(_logicOr_),
            (PConjunction) cloneNode(_t_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAgfraDisjunction(this);
    }

    public PConjunction getGg()
    {
        return _gg_;
    }

    public void setGg(PConjunction node)
    {
        if(_gg_ != null)
        {
            _gg_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _gg_ = node;
    }

    public TLogicOr getLogicOr()
    {
        return _logicOr_;
    }

    public void setLogicOr(TLogicOr node)
    {
        if(_logicOr_ != null)
        {
            _logicOr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _logicOr_ = node;
    }

    public PConjunction getT()
    {
        return _t_;
    }

    public void setT(PConjunction node)
    {
        if(_t_ != null)
        {
            _t_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _t_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_gg_)
            + toString(_logicOr_)
            + toString(_t_);
    }

    void removeChild(Node child)
    {
        if(_gg_ == child)
        {
            _gg_ = null;
            return;
        }

        if(_logicOr_ == child)
        {
            _logicOr_ = null;
            return;
        }

        if(_t_ == child)
        {
            _t_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_gg_ == oldChild)
        {
            setGg((PConjunction) newChild);
            return;
        }

        if(_logicOr_ == oldChild)
        {
            setLogicOr((TLogicOr) newChild);
            return;
        }

        if(_t_ == oldChild)
        {
            setT((PConjunction) newChild);
            return;
        }

    }
}
