/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AArrayStatementStatement extends PStatement
{
    private TId _id_;
    private PExpression _lex_;
    private PExpression _rex_;

    public AArrayStatementStatement()
    {
    }

    public AArrayStatementStatement(
        TId _id_,
        PExpression _lex_,
        PExpression _rex_)
    {
        setId(_id_);

        setLex(_lex_);

        setRex(_rex_);

    }
    public Object clone()
    {
        return new AArrayStatementStatement(
            (TId) cloneNode(_id_),
            (PExpression) cloneNode(_lex_),
            (PExpression) cloneNode(_rex_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrayStatementStatement(this);
    }

    public TId getId()
    {
        return _id_;
    }

    public void setId(TId node)
    {
        if(_id_ != null)
        {
            _id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _id_ = node;
    }

    public PExpression getLex()
    {
        return _lex_;
    }

    public void setLex(PExpression node)
    {
        if(_lex_ != null)
        {
            _lex_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lex_ = node;
    }

    public PExpression getRex()
    {
        return _rex_;
    }

    public void setRex(PExpression node)
    {
        if(_rex_ != null)
        {
            _rex_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rex_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_id_)
            + toString(_lex_)
            + toString(_rex_);
    }

    void removeChild(Node child)
    {
        if(_id_ == child)
        {
            _id_ = null;
            return;
        }

        if(_lex_ == child)
        {
            _lex_ = null;
            return;
        }

        if(_rex_ == child)
        {
            _rex_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(_lex_ == oldChild)
        {
            setLex((PExpression) newChild);
            return;
        }

        if(_rex_ == oldChild)
        {
            setRex((PExpression) newChild);
            return;
        }

    }
}
