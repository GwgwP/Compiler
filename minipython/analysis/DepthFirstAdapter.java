/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import java.util.*;
import minipython.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getPGoal().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAGoal(AGoal node)
    {
        defaultIn(node);
    }

    public void outAGoal(AGoal node)
    {
        defaultOut(node);
    }

    public void caseAGoal(AGoal node)
    {
        inAGoal(node);
        {
            Object temp[] = node.getCommands().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommands) temp[i]).apply(this);
            }
        }
        outAGoal(node);
    }

    public void inAFuncCommands(AFuncCommands node)
    {
        defaultIn(node);
    }

    public void outAFuncCommands(AFuncCommands node)
    {
        defaultOut(node);
    }

    public void caseAFuncCommands(AFuncCommands node)
    {
        inAFuncCommands(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFuncCommands(node);
    }

    public void inAStatCommands(AStatCommands node)
    {
        defaultIn(node);
    }

    public void outAStatCommands(AStatCommands node)
    {
        defaultOut(node);
    }

    public void caseAStatCommands(AStatCommands node)
    {
        inAStatCommands(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatCommands(node);
    }

    public void inADefFuncFunction(ADefFuncFunction node)
    {
        defaultIn(node);
    }

    public void outADefFuncFunction(ADefFuncFunction node)
    {
        defaultOut(node);
    }

    public void caseADefFuncFunction(ADefFuncFunction node)
    {
        inADefFuncFunction(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getDef() != null)
        {
            node.getDef().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgument() != null)
        {
            node.getArgument().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outADefFuncFunction(node);
    }

    public void inAArgArgument(AArgArgument node)
    {
        defaultIn(node);
    }

    public void outAArgArgument(AArgArgument node)
    {
        defaultOut(node);
    }

    public void caseAArgArgument(AArgArgument node)
    {
        inAArgArgument(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAssignValue() != null)
        {
            node.getAssignValue().apply(this);
        }
        {
            Object temp[] = node.getCiav().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCiav) temp[i]).apply(this);
            }
        }
        outAArgArgument(node);
    }

    public void inACommaIdAsVCiav(ACommaIdAsVCiav node)
    {
        defaultIn(node);
    }

    public void outACommaIdAsVCiav(ACommaIdAsVCiav node)
    {
        defaultOut(node);
    }

    public void caseACommaIdAsVCiav(ACommaIdAsVCiav node)
    {
        inACommaIdAsVCiav(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAssignValue() != null)
        {
            node.getAssignValue().apply(this);
        }
        outACommaIdAsVCiav(node);
    }

    public void inAAsVAssignValue(AAsVAssignValue node)
    {
        defaultIn(node);
    }

    public void outAAsVAssignValue(AAsVAssignValue node)
    {
        defaultOut(node);
    }

    public void caseAAsVAssignValue(AAsVAssignValue node)
    {
        inAAsVAssignValue(node);
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAAsVAssignValue(node);
    }

    public void inAIfStatementStatement(AIfStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatementStatement(AIfStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAIfStatementStatement(AIfStatementStatement node)
    {
        inAIfStatementStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAIfStatementStatement(node);
    }

    public void inAWhileStatementStatement(AWhileStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatementStatement(AWhileStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAWhileStatementStatement(AWhileStatementStatement node)
    {
        inAWhileStatementStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAWhileStatementStatement(node);
    }

    public void inAForStatementStatement(AForStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatementStatement(AForStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAForStatementStatement(AForStatementStatement node)
    {
        inAForStatementStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        if(node.getLid() != null)
        {
            node.getLid().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getRid() != null)
        {
            node.getRid().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAForStatementStatement(node);
    }

    public void inAReturnStatementStatement(AReturnStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatementStatement(AReturnStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAReturnStatementStatement(AReturnStatementStatement node)
    {
        inAReturnStatementStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAReturnStatementStatement(node);
    }

    public void inAPrintStatementStatement(APrintStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStatementStatement(APrintStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAPrintStatementStatement(APrintStatementStatement node)
    {
        inAPrintStatementStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getCommaExpression().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaExpression) temp[i]).apply(this);
            }
        }
        outAPrintStatementStatement(node);
    }

    public void inAAssignStatementStatement(AAssignStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignStatementStatement(AAssignStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssignStatementStatement(AAssignStatementStatement node)
    {
        inAAssignStatementStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAssignStatementStatement(node);
    }

    public void inAIdMineqStatementStatement(AIdMineqStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAIdMineqStatementStatement(AIdMineqStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAIdMineqStatementStatement(AIdMineqStatementStatement node)
    {
        inAIdMineqStatementStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getMineq() != null)
        {
            node.getMineq().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAIdMineqStatementStatement(node);
    }

    public void inAIdPluseqStatementStatement(AIdPluseqStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAIdPluseqStatementStatement(AIdPluseqStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAIdPluseqStatementStatement(AIdPluseqStatementStatement node)
    {
        inAIdPluseqStatementStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPluseq() != null)
        {
            node.getPluseq().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAIdPluseqStatementStatement(node);
    }

    public void inAIdDiveqStatementStatement(AIdDiveqStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAIdDiveqStatementStatement(AIdDiveqStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAIdDiveqStatementStatement(AIdDiveqStatementStatement node)
    {
        inAIdDiveqStatementStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getDiveq() != null)
        {
            node.getDiveq().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAIdDiveqStatementStatement(node);
    }

    public void inAArrayStatementStatement(AArrayStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAArrayStatementStatement(AArrayStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAArrayStatementStatement(AArrayStatementStatement node)
    {
        inAArrayStatementStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getLex() != null)
        {
            node.getLex().apply(this);
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getRex() != null)
        {
            node.getRex().apply(this);
        }
        outAArrayStatementStatement(node);
    }

    public void inAAssertionStatementStatement(AAssertionStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAAssertionStatementStatement(AAssertionStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssertionStatementStatement(AAssertionStatementStatement node)
    {
        inAAssertionStatementStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getAssert() != null)
        {
            node.getAssert().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getCommaExpression() != null)
        {
            node.getCommaExpression().apply(this);
        }
        outAAssertionStatementStatement(node);
    }

    public void inAFuncCallStatementStatement(AFuncCallStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAFuncCallStatementStatement(AFuncCallStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAFuncCallStatementStatement(AFuncCallStatementStatement node)
    {
        inAFuncCallStatementStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFuncCallStatementStatement(node);
    }

    public void inAFuncCallFunctionCall(AFuncCallFunctionCall node)
    {
        defaultIn(node);
    }

    public void outAFuncCallFunctionCall(AFuncCallFunctionCall node)
    {
        defaultOut(node);
    }

    public void caseAFuncCallFunctionCall(AFuncCallFunctionCall node)
    {
        inAFuncCallFunctionCall(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArglist() != null)
        {
            node.getArglist().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAFuncCallFunctionCall(node);
    }

    public void inAArglistArglist(AArglistArglist node)
    {
        defaultIn(node);
    }

    public void outAArglistArglist(AArglistArglist node)
    {
        defaultOut(node);
    }

    public void caseAArglistArglist(AArglistArglist node)
    {
        inAArglistArglist(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getCommaExpression().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaExpression) temp[i]).apply(this);
            }
        }
        outAArglistArglist(node);
    }

    public void inACommaExprCommaExpression(ACommaExprCommaExpression node)
    {
        defaultIn(node);
    }

    public void outACommaExprCommaExpression(ACommaExprCommaExpression node)
    {
        defaultOut(node);
    }

    public void caseACommaExprCommaExpression(ACommaExprCommaExpression node)
    {
        inACommaExprCommaExpression(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outACommaExprCommaExpression(node);
    }

    public void inAComparisonComparison(AComparisonComparison node)
    {
        defaultIn(node);
    }

    public void outAComparisonComparison(AComparisonComparison node)
    {
        defaultOut(node);
    }

    public void caseAComparisonComparison(AComparisonComparison node)
    {
        inAComparisonComparison(node);
        if(node.getAfteror() != null)
        {
            node.getAfteror().apply(this);
        }
        outAComparisonComparison(node);
    }

    public void inAComparisonMoreComparison(AComparisonMoreComparison node)
    {
        defaultIn(node);
    }

    public void outAComparisonMoreComparison(AComparisonMoreComparison node)
    {
        defaultOut(node);
    }

    public void caseAComparisonMoreComparison(AComparisonMoreComparison node)
    {
        inAComparisonMoreComparison(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getLogicOr() != null)
        {
            node.getLogicOr().apply(this);
        }
        if(node.getAfteror() != null)
        {
            node.getAfteror().apply(this);
        }
        outAComparisonMoreComparison(node);
    }

    public void inAAftOrAfteror(AAftOrAfteror node)
    {
        defaultIn(node);
    }

    public void outAAftOrAfteror(AAftOrAfteror node)
    {
        defaultOut(node);
    }

    public void caseAAftOrAfteror(AAftOrAfteror node)
    {
        inAAftOrAfteror(node);
        if(node.getAfterand() != null)
        {
            node.getAfterand().apply(this);
        }
        outAAftOrAfteror(node);
    }

    public void inAAftOrMoreAfteror(AAftOrMoreAfteror node)
    {
        defaultIn(node);
    }

    public void outAAftOrMoreAfteror(AAftOrMoreAfteror node)
    {
        defaultOut(node);
    }

    public void caseAAftOrMoreAfteror(AAftOrMoreAfteror node)
    {
        inAAftOrMoreAfteror(node);
        if(node.getAfteror() != null)
        {
            node.getAfteror().apply(this);
        }
        if(node.getLogicAnd() != null)
        {
            node.getLogicAnd().apply(this);
        }
        if(node.getAfterand() != null)
        {
            node.getAfterand().apply(this);
        }
        outAAftOrMoreAfteror(node);
    }

    public void inAAftAndAfterand(AAftAndAfterand node)
    {
        defaultIn(node);
    }

    public void outAAftAndAfterand(AAftAndAfterand node)
    {
        defaultOut(node);
    }

    public void caseAAftAndAfterand(AAftAndAfterand node)
    {
        inAAftAndAfterand(node);
        if(node.getAfternot() != null)
        {
            node.getAfternot().apply(this);
        }
        outAAftAndAfterand(node);
    }

    public void inAAftAndNotAfterand(AAftAndNotAfterand node)
    {
        defaultIn(node);
    }

    public void outAAftAndNotAfterand(AAftAndNotAfterand node)
    {
        defaultOut(node);
    }

    public void caseAAftAndNotAfterand(AAftAndNotAfterand node)
    {
        inAAftAndNotAfterand(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getAfternot() != null)
        {
            node.getAfternot().apply(this);
        }
        outAAftAndNotAfterand(node);
    }

    public void inATrueAfternot(ATrueAfternot node)
    {
        defaultIn(node);
    }

    public void outATrueAfternot(ATrueAfternot node)
    {
        defaultOut(node);
    }

    public void caseATrueAfternot(ATrueAfternot node)
    {
        inATrueAfternot(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueAfternot(node);
    }

    public void inAFalseAfternot(AFalseAfternot node)
    {
        defaultIn(node);
    }

    public void outAFalseAfternot(AFalseAfternot node)
    {
        defaultOut(node);
    }

    public void caseAFalseAfternot(AFalseAfternot node)
    {
        inAFalseAfternot(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseAfternot(node);
    }

    public void inALesseqAfternot(ALesseqAfternot node)
    {
        defaultIn(node);
    }

    public void outALesseqAfternot(ALesseqAfternot node)
    {
        defaultOut(node);
    }

    public void caseALesseqAfternot(ALesseqAfternot node)
    {
        inALesseqAfternot(node);
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getLesseq() != null)
        {
            node.getLesseq().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        outALesseqAfternot(node);
    }

    public void inAGreateqAfternot(AGreateqAfternot node)
    {
        defaultIn(node);
    }

    public void outAGreateqAfternot(AGreateqAfternot node)
    {
        defaultOut(node);
    }

    public void caseAGreateqAfternot(AGreateqAfternot node)
    {
        inAGreateqAfternot(node);
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getGreateq() != null)
        {
            node.getGreateq().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        outAGreateqAfternot(node);
    }

    public void inADiffAfternot(ADiffAfternot node)
    {
        defaultIn(node);
    }

    public void outADiffAfternot(ADiffAfternot node)
    {
        defaultOut(node);
    }

    public void caseADiffAfternot(ADiffAfternot node)
    {
        inADiffAfternot(node);
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getNoteq() != null)
        {
            node.getNoteq().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        outADiffAfternot(node);
    }

    public void inAEqeqAfternot(AEqeqAfternot node)
    {
        defaultIn(node);
    }

    public void outAEqeqAfternot(AEqeqAfternot node)
    {
        defaultOut(node);
    }

    public void caseAEqeqAfternot(AEqeqAfternot node)
    {
        inAEqeqAfternot(node);
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getEqualequal() != null)
        {
            node.getEqualequal().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        outAEqeqAfternot(node);
    }

    public void inALesscAfternot(ALesscAfternot node)
    {
        defaultIn(node);
    }

    public void outALesscAfternot(ALesscAfternot node)
    {
        defaultOut(node);
    }

    public void caseALesscAfternot(ALesscAfternot node)
    {
        inALesscAfternot(node);
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        outALesscAfternot(node);
    }

    public void inAGreatcAfternot(AGreatcAfternot node)
    {
        defaultIn(node);
    }

    public void outAGreatcAfternot(AGreatcAfternot node)
    {
        defaultOut(node);
    }

    public void caseAGreatcAfternot(AGreatcAfternot node)
    {
        inAGreatcAfternot(node);
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getGreat() != null)
        {
            node.getGreat().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        outAGreatcAfternot(node);
    }

    public void inACvCommaValue(ACvCommaValue node)
    {
        defaultIn(node);
    }

    public void outACvCommaValue(ACvCommaValue node)
    {
        defaultOut(node);
    }

    public void caseACvCommaValue(ACvCommaValue node)
    {
        inACvCommaValue(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outACvCommaValue(node);
    }

    public void inAAdditionExExpression(AAdditionExExpression node)
    {
        defaultIn(node);
    }

    public void outAAdditionExExpression(AAdditionExExpression node)
    {
        defaultOut(node);
    }

    public void caseAAdditionExExpression(AAdditionExExpression node)
    {
        inAAdditionExExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpressiono() != null)
        {
            node.getExpressiono().apply(this);
        }
        outAAdditionExExpression(node);
    }

    public void inASubtractionExExpression(ASubtractionExExpression node)
    {
        defaultIn(node);
    }

    public void outASubtractionExExpression(ASubtractionExExpression node)
    {
        defaultOut(node);
    }

    public void caseASubtractionExExpression(ASubtractionExExpression node)
    {
        inASubtractionExExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExpressiono() != null)
        {
            node.getExpressiono().apply(this);
        }
        outASubtractionExExpression(node);
    }

    public void inAExpressionSubsetExpression(AExpressionSubsetExpression node)
    {
        defaultIn(node);
    }

    public void outAExpressionSubsetExpression(AExpressionSubsetExpression node)
    {
        defaultOut(node);
    }

    public void caseAExpressionSubsetExpression(AExpressionSubsetExpression node)
    {
        inAExpressionSubsetExpression(node);
        if(node.getExpressiono() != null)
        {
            node.getExpressiono().apply(this);
        }
        outAExpressionSubsetExpression(node);
    }

    public void inAMaxExprExpressiono(AMaxExprExpressiono node)
    {
        defaultIn(node);
    }

    public void outAMaxExprExpressiono(AMaxExprExpressiono node)
    {
        defaultOut(node);
    }

    public void caseAMaxExprExpressiono(AMaxExprExpressiono node)
    {
        inAMaxExprExpressiono(node);
        if(node.getMax() != null)
        {
            node.getMax().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        {
            Object temp[] = node.getCommaValue().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaValue) temp[i]).apply(this);
            }
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMaxExprExpressiono(node);
    }

    public void inAMinExprExpressiono(AMinExprExpressiono node)
    {
        defaultIn(node);
    }

    public void outAMinExprExpressiono(AMinExprExpressiono node)
    {
        defaultOut(node);
    }

    public void caseAMinExprExpressiono(AMinExprExpressiono node)
    {
        inAMinExprExpressiono(node);
        if(node.getMin() != null)
        {
            node.getMin().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        {
            Object temp[] = node.getCommaValue().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaValue) temp[i]).apply(this);
            }
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMinExprExpressiono(node);
    }

    public void inASimpleExprExpressiono(ASimpleExprExpressiono node)
    {
        defaultIn(node);
    }

    public void outASimpleExprExpressiono(ASimpleExprExpressiono node)
    {
        defaultOut(node);
    }

    public void caseASimpleExprExpressiono(ASimpleExprExpressiono node)
    {
        inASimpleExprExpressiono(node);
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        outASimpleExprExpressiono(node);
    }

    public void inAPinakasExprExpressiono(APinakasExprExpressiono node)
    {
        defaultIn(node);
    }

    public void outAPinakasExprExpressiono(APinakasExprExpressiono node)
    {
        defaultOut(node);
    }

    public void caseAPinakasExprExpressiono(APinakasExprExpressiono node)
    {
        inAPinakasExprExpressiono(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        outAPinakasExprExpressiono(node);
    }

    public void inAFuncCallExprExpressiono(AFuncCallExprExpressiono node)
    {
        defaultIn(node);
    }

    public void outAFuncCallExprExpressiono(AFuncCallExprExpressiono node)
    {
        defaultOut(node);
    }

    public void caseAFuncCallExprExpressiono(AFuncCallExprExpressiono node)
    {
        inAFuncCallExprExpressiono(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFuncCallExprExpressiono(node);
    }

    public void inAPlplSimpleExpression(APlplSimpleExpression node)
    {
        defaultIn(node);
    }

    public void outAPlplSimpleExpression(APlplSimpleExpression node)
    {
        defaultOut(node);
    }

    public void caseAPlplSimpleExpression(APlplSimpleExpression node)
    {
        inAPlplSimpleExpression(node);
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        if(node.getPlusplus() != null)
        {
            node.getPlusplus().apply(this);
        }
        outAPlplSimpleExpression(node);
    }

    public void inAMinminSimpleExpression(AMinminSimpleExpression node)
    {
        defaultIn(node);
    }

    public void outAMinminSimpleExpression(AMinminSimpleExpression node)
    {
        defaultOut(node);
    }

    public void caseAMinminSimpleExpression(AMinminSimpleExpression node)
    {
        inAMinminSimpleExpression(node);
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        if(node.getMinusminus() != null)
        {
            node.getMinusminus().apply(this);
        }
        outAMinminSimpleExpression(node);
    }

    public void inAFacSimpleExpression(AFacSimpleExpression node)
    {
        defaultIn(node);
    }

    public void outAFacSimpleExpression(AFacSimpleExpression node)
    {
        defaultOut(node);
    }

    public void caseAFacSimpleExpression(AFacSimpleExpression node)
    {
        inAFacSimpleExpression(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFacSimpleExpression(node);
    }

    public void inAMultFactorFactor(AMultFactorFactor node)
    {
        defaultIn(node);
    }

    public void outAMultFactorFactor(AMultFactorFactor node)
    {
        defaultOut(node);
    }

    public void caseAMultFactorFactor(AMultFactorFactor node)
    {
        inAMultFactorFactor(node);
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        outAMultFactorFactor(node);
    }

    public void inAAdFactorFactor(AAdFactorFactor node)
    {
        defaultIn(node);
    }

    public void outAAdFactorFactor(AAdFactorFactor node)
    {
        defaultOut(node);
    }

    public void caseAAdFactorFactor(AAdFactorFactor node)
    {
        inAAdFactorFactor(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAAdFactorFactor(node);
    }

    public void inAMinFactorFactor(AMinFactorFactor node)
    {
        defaultIn(node);
    }

    public void outAMinFactorFactor(AMinFactorFactor node)
    {
        defaultOut(node);
    }

    public void caseAMinFactorFactor(AMinFactorFactor node)
    {
        inAMinFactorFactor(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMinFactorFactor(node);
    }

    public void inAPowMultiplication(APowMultiplication node)
    {
        defaultIn(node);
    }

    public void outAPowMultiplication(APowMultiplication node)
    {
        defaultOut(node);
    }

    public void caseAPowMultiplication(APowMultiplication node)
    {
        inAPowMultiplication(node);
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        outAPowMultiplication(node);
    }

    public void inADivisionMultiplication(ADivisionMultiplication node)
    {
        defaultIn(node);
    }

    public void outADivisionMultiplication(ADivisionMultiplication node)
    {
        defaultOut(node);
    }

    public void caseADivisionMultiplication(ADivisionMultiplication node)
    {
        inADivisionMultiplication(node);
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        outADivisionMultiplication(node);
    }

    public void inAModuloMultiplication(AModuloMultiplication node)
    {
        defaultIn(node);
    }

    public void outAModuloMultiplication(AModuloMultiplication node)
    {
        defaultOut(node);
    }

    public void caseAModuloMultiplication(AModuloMultiplication node)
    {
        inAModuloMultiplication(node);
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        outAModuloMultiplication(node);
    }

    public void inAMultiplicationMultiplication(AMultiplicationMultiplication node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationMultiplication(AMultiplicationMultiplication node)
    {
        defaultOut(node);
    }

    public void caseAMultiplicationMultiplication(AMultiplicationMultiplication node)
    {
        inAMultiplicationMultiplication(node);
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        outAMultiplicationMultiplication(node);
    }

    public void inAValuePower(AValuePower node)
    {
        defaultIn(node);
    }

    public void outAValuePower(AValuePower node)
    {
        defaultOut(node);
    }

    public void caseAValuePower(AValuePower node)
    {
        inAValuePower(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValuePower(node);
    }

    public void inAPowerPower(APowerPower node)
    {
        defaultIn(node);
    }

    public void outAPowerPower(APowerPower node)
    {
        defaultOut(node);
    }

    public void caseAPowerPower(APowerPower node)
    {
        inAPowerPower(node);
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        if(node.getPow() != null)
        {
            node.getPow().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAPowerPower(node);
    }

    public void inAValueSubsetValue(AValueSubsetValue node)
    {
        defaultIn(node);
    }

    public void outAValueSubsetValue(AValueSubsetValue node)
    {
        defaultOut(node);
    }

    public void caseAValueSubsetValue(AValueSubsetValue node)
    {
        inAValueSubsetValue(node);
        if(node.getValueno() != null)
        {
            node.getValueno().apply(this);
        }
        outAValueSubsetValue(node);
    }

    public void inALenExpValue(ALenExpValue node)
    {
        defaultIn(node);
    }

    public void outALenExpValue(ALenExpValue node)
    {
        defaultOut(node);
    }

    public void caseALenExpValue(ALenExpValue node)
    {
        inALenExpValue(node);
        if(node.getLen() != null)
        {
            node.getLen().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outALenExpValue(node);
    }

    public void inAParenthesisExprValueValue(AParenthesisExprValueValue node)
    {
        defaultIn(node);
    }

    public void outAParenthesisExprValueValue(AParenthesisExprValueValue node)
    {
        defaultOut(node);
    }

    public void caseAParenthesisExprValueValue(AParenthesisExprValueValue node)
    {
        inAParenthesisExprValueValue(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAParenthesisExprValueValue(node);
    }

    public void inABracketsExprValueValue(ABracketsExprValueValue node)
    {
        defaultIn(node);
    }

    public void outABracketsExprValueValue(ABracketsExprValueValue node)
    {
        defaultOut(node);
    }

    public void caseABracketsExprValueValue(ABracketsExprValueValue node)
    {
        inABracketsExprValueValue(node);
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getCommaExpression().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaExpression) temp[i]).apply(this);
            }
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        outABracketsExprValueValue(node);
    }

    public void inAIdDotFuncValueno(AIdDotFuncValueno node)
    {
        defaultIn(node);
    }

    public void outAIdDotFuncValueno(AIdDotFuncValueno node)
    {
        defaultOut(node);
    }

    public void caseAIdDotFuncValueno(AIdDotFuncValueno node)
    {
        inAIdDotFuncValueno(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAIdDotFuncValueno(node);
    }

    public void inAIdentifierValueno(AIdentifierValueno node)
    {
        defaultIn(node);
    }

    public void outAIdentifierValueno(AIdentifierValueno node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierValueno(AIdentifierValueno node)
    {
        inAIdentifierValueno(node);
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAIdentifierValueno(node);
    }

    public void inANumberValueno(ANumberValueno node)
    {
        defaultIn(node);
    }

    public void outANumberValueno(ANumberValueno node)
    {
        defaultOut(node);
    }

    public void caseANumberValueno(ANumberValueno node)
    {
        inANumberValueno(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberValueno(node);
    }

    public void inADoubleQuotesValueno(ADoubleQuotesValueno node)
    {
        defaultIn(node);
    }

    public void outADoubleQuotesValueno(ADoubleQuotesValueno node)
    {
        defaultOut(node);
    }

    public void caseADoubleQuotesValueno(ADoubleQuotesValueno node)
    {
        inADoubleQuotesValueno(node);
        if(node.getStringDoubleQuotes() != null)
        {
            node.getStringDoubleQuotes().apply(this);
        }
        outADoubleQuotesValueno(node);
    }

    public void inASingleQuotesValueno(ASingleQuotesValueno node)
    {
        defaultIn(node);
    }

    public void outASingleQuotesValueno(ASingleQuotesValueno node)
    {
        defaultOut(node);
    }

    public void caseASingleQuotesValueno(ASingleQuotesValueno node)
    {
        inASingleQuotesValueno(node);
        if(node.getStringSingleQuotes() != null)
        {
            node.getStringSingleQuotes().apply(this);
        }
        outASingleQuotesValueno(node);
    }

    public void inANoneValueValueno(ANoneValueValueno node)
    {
        defaultIn(node);
    }

    public void outANoneValueValueno(ANoneValueValueno node)
    {
        defaultOut(node);
    }

    public void caseANoneValueValueno(ANoneValueValueno node)
    {
        inANoneValueValueno(node);
        if(node.getNone() != null)
        {
            node.getNone().apply(this);
        }
        outANoneValueValueno(node);
    }

    public void inAIdIdent(AIdIdent node)
    {
        defaultIn(node);
    }

    public void outAIdIdent(AIdIdent node)
    {
        defaultOut(node);
    }

    public void caseAIdIdent(AIdIdent node)
    {
        inAIdIdent(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdIdent(node);
    }
}
