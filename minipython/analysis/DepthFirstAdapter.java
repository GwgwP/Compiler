/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import java.util.*;
import minipython.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getPGoal().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAGoal(AGoal node)
    {
        defaultIn(node);
    }

    public void outAGoal(AGoal node)
    {
        defaultOut(node);
    }

    public void caseAGoal(AGoal node)
    {
        inAGoal(node);
        {
            Object temp[] = node.getCommands().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommands) temp[i]).apply(this);
            }
        }
        outAGoal(node);
    }

    public void inAFuncCommands(AFuncCommands node)
    {
        defaultIn(node);
    }

    public void outAFuncCommands(AFuncCommands node)
    {
        defaultOut(node);
    }

    public void caseAFuncCommands(AFuncCommands node)
    {
        inAFuncCommands(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFuncCommands(node);
    }

    public void inAStatCommands(AStatCommands node)
    {
        defaultIn(node);
    }

    public void outAStatCommands(AStatCommands node)
    {
        defaultOut(node);
    }

    public void caseAStatCommands(AStatCommands node)
    {
        inAStatCommands(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatCommands(node);
    }

    public void inADefinitionFunction(ADefinitionFunction node)
    {
        defaultIn(node);
    }

    public void outADefinitionFunction(ADefinitionFunction node)
    {
        defaultOut(node);
    }

    public void caseADefinitionFunction(ADefinitionFunction node)
    {
        inADefinitionFunction(node);
        if(node.getDef() != null)
        {
            node.getDef().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgument() != null)
        {
            node.getArgument().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outADefinitionFunction(node);
    }

    public void inAArgsArgument(AArgsArgument node)
    {
        defaultIn(node);
    }

    public void outAArgsArgument(AArgsArgument node)
    {
        defaultOut(node);
    }

    public void caseAArgsArgument(AArgsArgument node)
    {
        inAArgsArgument(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAssignValue() != null)
        {
            node.getAssignValue().apply(this);
        }
        {
            Object temp[] = node.getCiav().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCiav) temp[i]).apply(this);
            }
        }
        outAArgsArgument(node);
    }

    public void inABCiav(ABCiav node)
    {
        defaultIn(node);
    }

    public void outABCiav(ABCiav node)
    {
        defaultOut(node);
    }

    public void caseABCiav(ABCiav node)
    {
        inABCiav(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAssignValue() != null)
        {
            node.getAssignValue().apply(this);
        }
        outABCiav(node);
    }

    public void inAAAssignValue(AAAssignValue node)
    {
        defaultIn(node);
    }

    public void outAAAssignValue(AAAssignValue node)
    {
        defaultOut(node);
    }

    public void caseAAAssignValue(AAAssignValue node)
    {
        inAAAssignValue(node);
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAAAssignValue(node);
    }

    public void inAIfStatementStatement(AIfStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatementStatement(AIfStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAIfStatementStatement(AIfStatementStatement node)
    {
        inAIfStatementStatement(node);
        if(node.getIfCompount() != null)
        {
            node.getIfCompount().apply(this);
        }
        outAIfStatementStatement(node);
    }

    public void inAWhileStatementStatement(AWhileStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatementStatement(AWhileStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAWhileStatementStatement(AWhileStatementStatement node)
    {
        inAWhileStatementStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAWhileStatementStatement(node);
    }

    public void inAForStatementStatement(AForStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatementStatement(AForStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAForStatementStatement(AForStatementStatement node)
    {
        inAForStatementStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getLid() != null)
        {
            node.getLid().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getRid() != null)
        {
            node.getRid().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAForStatementStatement(node);
    }

    public void inAReturnStatementStatement(AReturnStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatementStatement(AReturnStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAReturnStatementStatement(AReturnStatementStatement node)
    {
        inAReturnStatementStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAReturnStatementStatement(node);
    }

    public void inAPrintStatementStatement(APrintStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStatementStatement(APrintStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAPrintStatementStatement(APrintStatementStatement node)
    {
        inAPrintStatementStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getCommaExpression().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaExpression) temp[i]).apply(this);
            }
        }
        outAPrintStatementStatement(node);
    }

    public void inAIdAsMineqDiveqStatement(AIdAsMineqDiveqStatement node)
    {
        defaultIn(node);
    }

    public void outAIdAsMineqDiveqStatement(AIdAsMineqDiveqStatement node)
    {
        defaultOut(node);
    }

    public void caseAIdAsMineqDiveqStatement(AIdAsMineqDiveqStatement node)
    {
        inAIdAsMineqDiveqStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAsMineqDiveq() != null)
        {
            node.getAsMineqDiveq().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAIdAsMineqDiveqStatement(node);
    }

    public void inAArrayStatementStatement(AArrayStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAArrayStatementStatement(AArrayStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAArrayStatementStatement(AArrayStatementStatement node)
    {
        inAArrayStatementStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getLex() != null)
        {
            node.getLex().apply(this);
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getRex() != null)
        {
            node.getRex().apply(this);
        }
        outAArrayStatementStatement(node);
    }

    public void inAAssertionStatementStatement(AAssertionStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAAssertionStatementStatement(AAssertionStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssertionStatementStatement(AAssertionStatementStatement node)
    {
        inAAssertionStatementStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getAssert() != null)
        {
            node.getAssert().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getCommaExpression() != null)
        {
            node.getCommaExpression().apply(this);
        }
        outAAssertionStatementStatement(node);
    }

    public void inAFuncCallStatement(AFuncCallStatement node)
    {
        defaultIn(node);
    }

    public void outAFuncCallStatement(AFuncCallStatement node)
    {
        defaultOut(node);
    }

    public void caseAFuncCallStatement(AFuncCallStatement node)
    {
        inAFuncCallStatement(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFuncCallStatement(node);
    }

    public void inAIfCompount(AIfCompount node)
    {
        defaultIn(node);
    }

    public void outAIfCompount(AIfCompount node)
    {
        defaultOut(node);
    }

    public void caseAIfCompount(AIfCompount node)
    {
        inAIfCompount(node);
        {
            Object temp[] = node.getTab().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAIfCompount(node);
    }

    public void inAAgfraDisjunction(AAgfraDisjunction node)
    {
        defaultIn(node);
    }

    public void outAAgfraDisjunction(AAgfraDisjunction node)
    {
        defaultOut(node);
    }

    public void caseAAgfraDisjunction(AAgfraDisjunction node)
    {
        inAAgfraDisjunction(node);
        if(node.getGg() != null)
        {
            node.getGg().apply(this);
        }
        if(node.getLogicOr() != null)
        {
            node.getLogicOr().apply(this);
        }
        if(node.getT() != null)
        {
            node.getT().apply(this);
        }
        outAAgfraDisjunction(node);
    }

    public void inABbDisjunction(ABbDisjunction node)
    {
        defaultIn(node);
    }

    public void outABbDisjunction(ABbDisjunction node)
    {
        defaultOut(node);
    }

    public void caseABbDisjunction(ABbDisjunction node)
    {
        inABbDisjunction(node);
        if(node.getConjunction() != null)
        {
            node.getConjunction().apply(this);
        }
        outABbDisjunction(node);
    }

    public void inAAdaConjunction(AAdaConjunction node)
    {
        defaultIn(node);
    }

    public void outAAdaConjunction(AAdaConjunction node)
    {
        defaultOut(node);
    }

    public void caseAAdaConjunction(AAdaConjunction node)
    {
        inAAdaConjunction(node);
        if(node.getGg() != null)
        {
            node.getGg().apply(this);
        }
        if(node.getLogicAnd() != null)
        {
            node.getLogicAnd().apply(this);
        }
        if(node.getG() != null)
        {
            node.getG().apply(this);
        }
        outAAdaConjunction(node);
    }

    public void inADfdfdConjunction(ADfdfdConjunction node)
    {
        defaultIn(node);
    }

    public void outADfdfdConjunction(ADfdfdConjunction node)
    {
        defaultOut(node);
    }

    public void caseADfdfdConjunction(ADfdfdConjunction node)
    {
        inADfdfdConjunction(node);
        if(node.getInversion() != null)
        {
            node.getInversion().apply(this);
        }
        outADfdfdConjunction(node);
    }

    public void inAFrfInversion(AFrfInversion node)
    {
        defaultIn(node);
    }

    public void outAFrfInversion(AFrfInversion node)
    {
        defaultOut(node);
    }

    public void caseAFrfInversion(AFrfInversion node)
    {
        inAFrfInversion(node);
        if(node.getInversion() != null)
        {
            node.getInversion().apply(this);
        }
        outAFrfInversion(node);
    }

    public void inAFerInversion(AFerInversion node)
    {
        defaultIn(node);
    }

    public void outAFerInversion(AFerInversion node)
    {
        defaultOut(node);
    }

    public void caseAFerInversion(AFerInversion node)
    {
        inAFerInversion(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outAFerInversion(node);
    }

    public void inAAsmidiAsMineqDiveq(AAsmidiAsMineqDiveq node)
    {
        defaultIn(node);
    }

    public void outAAsmidiAsMineqDiveq(AAsmidiAsMineqDiveq node)
    {
        defaultOut(node);
    }

    public void caseAAsmidiAsMineqDiveq(AAsmidiAsMineqDiveq node)
    {
        inAAsmidiAsMineqDiveq(node);
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        outAAsmidiAsMineqDiveq(node);
    }

    public void inAMineqqAsMineqDiveq(AMineqqAsMineqDiveq node)
    {
        defaultIn(node);
    }

    public void outAMineqqAsMineqDiveq(AMineqqAsMineqDiveq node)
    {
        defaultOut(node);
    }

    public void caseAMineqqAsMineqDiveq(AMineqqAsMineqDiveq node)
    {
        inAMineqqAsMineqDiveq(node);
        if(node.getMineq() != null)
        {
            node.getMineq().apply(this);
        }
        outAMineqqAsMineqDiveq(node);
    }

    public void inADiveqAsMineqDiveq(ADiveqAsMineqDiveq node)
    {
        defaultIn(node);
    }

    public void outADiveqAsMineqDiveq(ADiveqAsMineqDiveq node)
    {
        defaultOut(node);
    }

    public void caseADiveqAsMineqDiveq(ADiveqAsMineqDiveq node)
    {
        inADiveqAsMineqDiveq(node);
        if(node.getDiveq() != null)
        {
            node.getDiveq().apply(this);
        }
        outADiveqAsMineqDiveq(node);
    }

    public void inACECommaExpression(ACECommaExpression node)
    {
        defaultIn(node);
    }

    public void outACECommaExpression(ACECommaExpression node)
    {
        defaultOut(node);
    }

    public void caseACECommaExpression(ACECommaExpression node)
    {
        inACECommaExpression(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outACECommaExpression(node);
    }

    public void inAArithmeticExpressionExpression(AArithmeticExpressionExpression node)
    {
        defaultIn(node);
    }

    public void outAArithmeticExpressionExpression(AArithmeticExpressionExpression node)
    {
        defaultOut(node);
    }

    public void caseAArithmeticExpressionExpression(AArithmeticExpressionExpression node)
    {
        inAArithmeticExpressionExpression(node);
        if(node.getLex() != null)
        {
            node.getLex().apply(this);
        }
        if(node.getOperators() != null)
        {
            node.getOperators().apply(this);
        }
        if(node.getRex() != null)
        {
            node.getRex().apply(this);
        }
        outAArithmeticExpressionExpression(node);
    }

    public void inAArrayExpressionExpression(AArrayExpressionExpression node)
    {
        defaultIn(node);
    }

    public void outAArrayExpressionExpression(AArrayExpressionExpression node)
    {
        defaultOut(node);
    }

    public void caseAArrayExpressionExpression(AArrayExpressionExpression node)
    {
        inAArrayExpressionExpression(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        outAArrayExpressionExpression(node);
    }

    public void inAFuncCallExpressionExpression(AFuncCallExpressionExpression node)
    {
        defaultIn(node);
    }

    public void outAFuncCallExpressionExpression(AFuncCallExpressionExpression node)
    {
        defaultOut(node);
    }

    public void caseAFuncCallExpressionExpression(AFuncCallExpressionExpression node)
    {
        inAFuncCallExpressionExpression(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFuncCallExpressionExpression(node);
    }

    public void inAValueExpression(AValueExpression node)
    {
        defaultIn(node);
    }

    public void outAValueExpression(AValueExpression node)
    {
        defaultOut(node);
    }

    public void caseAValueExpression(AValueExpression node)
    {
        inAValueExpression(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValueExpression(node);
    }

    public void inAIdentifierExpression(AIdentifierExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExpression(AIdentifierExpression node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierExpression(AIdentifierExpression node)
    {
        inAIdentifierExpression(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdentifierExpression(node);
    }

    public void inAQuickppMmExpression(AQuickppMmExpression node)
    {
        defaultIn(node);
    }

    public void outAQuickppMmExpression(AQuickppMmExpression node)
    {
        defaultOut(node);
    }

    public void caseAQuickppMmExpression(AQuickppMmExpression node)
    {
        inAQuickppMmExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getIncrement() != null)
        {
            node.getIncrement().apply(this);
        }
        outAQuickppMmExpression(node);
    }

    public void inALengthExpressionExpression(ALengthExpressionExpression node)
    {
        defaultIn(node);
    }

    public void outALengthExpressionExpression(ALengthExpressionExpression node)
    {
        defaultOut(node);
    }

    public void caseALengthExpressionExpression(ALengthExpressionExpression node)
    {
        inALengthExpressionExpression(node);
        if(node.getLen() != null)
        {
            node.getLen().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outALengthExpressionExpression(node);
    }

    public void inAMinMaxExpressionExpression(AMinMaxExpressionExpression node)
    {
        defaultIn(node);
    }

    public void outAMinMaxExpressionExpression(AMinMaxExpressionExpression node)
    {
        defaultOut(node);
    }

    public void caseAMinMaxExpressionExpression(AMinMaxExpressionExpression node)
    {
        inAMinMaxExpressionExpression(node);
        if(node.getOperatorMaxMin() != null)
        {
            node.getOperatorMaxMin().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        {
            Object temp[] = node.getCommaValue().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaValue) temp[i]).apply(this);
            }
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAMinMaxExpressionExpression(node);
    }

    public void inAParenthesisExpressionExpression(AParenthesisExpressionExpression node)
    {
        defaultIn(node);
    }

    public void outAParenthesisExpressionExpression(AParenthesisExpressionExpression node)
    {
        defaultOut(node);
    }

    public void caseAParenthesisExpressionExpression(AParenthesisExpressionExpression node)
    {
        inAParenthesisExpressionExpression(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAParenthesisExpressionExpression(node);
    }

    public void inABracketsExpressionExpression(ABracketsExpressionExpression node)
    {
        defaultIn(node);
    }

    public void outABracketsExpressionExpression(ABracketsExpressionExpression node)
    {
        defaultOut(node);
    }

    public void caseABracketsExpressionExpression(ABracketsExpressionExpression node)
    {
        inABracketsExpressionExpression(node);
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getCommaExpression().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaExpression) temp[i]).apply(this);
            }
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        outABracketsExpressionExpression(node);
    }

    public void inAOpercOperators(AOpercOperators node)
    {
        defaultIn(node);
    }

    public void outAOpercOperators(AOpercOperators node)
    {
        defaultOut(node);
    }

    public void caseAOpercOperators(AOpercOperators node)
    {
        inAOpercOperators(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAOpercOperators(node);
    }

    public void inAMinuscOperators(AMinuscOperators node)
    {
        defaultIn(node);
    }

    public void outAMinuscOperators(AMinuscOperators node)
    {
        defaultOut(node);
    }

    public void caseAMinuscOperators(AMinuscOperators node)
    {
        inAMinuscOperators(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinuscOperators(node);
    }

    public void inAMiltcOperators(AMiltcOperators node)
    {
        defaultIn(node);
    }

    public void outAMiltcOperators(AMiltcOperators node)
    {
        defaultOut(node);
    }

    public void caseAMiltcOperators(AMiltcOperators node)
    {
        inAMiltcOperators(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMiltcOperators(node);
    }

    public void inADivcOperators(ADivcOperators node)
    {
        defaultIn(node);
    }

    public void outADivcOperators(ADivcOperators node)
    {
        defaultOut(node);
    }

    public void caseADivcOperators(ADivcOperators node)
    {
        inADivcOperators(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivcOperators(node);
    }

    public void inAModcOperators(AModcOperators node)
    {
        defaultIn(node);
    }

    public void outAModcOperators(AModcOperators node)
    {
        defaultOut(node);
    }

    public void caseAModcOperators(AModcOperators node)
    {
        inAModcOperators(node);
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        outAModcOperators(node);
    }

    public void inAPowcOperators(APowcOperators node)
    {
        defaultIn(node);
    }

    public void outAPowcOperators(APowcOperators node)
    {
        defaultOut(node);
    }

    public void caseAPowcOperators(APowcOperators node)
    {
        inAPowcOperators(node);
        if(node.getPow() != null)
        {
            node.getPow().apply(this);
        }
        outAPowcOperators(node);
    }

    public void inAAddminIncrement(AAddminIncrement node)
    {
        defaultIn(node);
    }

    public void outAAddminIncrement(AAddminIncrement node)
    {
        defaultOut(node);
    }

    public void caseAAddminIncrement(AAddminIncrement node)
    {
        inAAddminIncrement(node);
        if(node.getPlusplus() != null)
        {
            node.getPlusplus().apply(this);
        }
        outAAddminIncrement(node);
    }

    public void inAIncrement(AIncrement node)
    {
        defaultIn(node);
    }

    public void outAIncrement(AIncrement node)
    {
        defaultOut(node);
    }

    public void caseAIncrement(AIncrement node)
    {
        inAIncrement(node);
        if(node.getMinusminus() != null)
        {
            node.getMinusminus().apply(this);
        }
        outAIncrement(node);
    }

    public void inAMaxminOperatorMaxMin(AMaxminOperatorMaxMin node)
    {
        defaultIn(node);
    }

    public void outAMaxminOperatorMaxMin(AMaxminOperatorMaxMin node)
    {
        defaultOut(node);
    }

    public void caseAMaxminOperatorMaxMin(AMaxminOperatorMaxMin node)
    {
        inAMaxminOperatorMaxMin(node);
        if(node.getMax() != null)
        {
            node.getMax().apply(this);
        }
        outAMaxminOperatorMaxMin(node);
    }

    public void inAOperatorMaxMin(AOperatorMaxMin node)
    {
        defaultIn(node);
    }

    public void outAOperatorMaxMin(AOperatorMaxMin node)
    {
        defaultOut(node);
    }

    public void caseAOperatorMaxMin(AOperatorMaxMin node)
    {
        inAOperatorMaxMin(node);
        if(node.getMin() != null)
        {
            node.getMin().apply(this);
        }
        outAOperatorMaxMin(node);
    }

    public void inACvCommaValue(ACvCommaValue node)
    {
        defaultIn(node);
    }

    public void outACvCommaValue(ACvCommaValue node)
    {
        defaultOut(node);
    }

    public void caseACvCommaValue(ACvCommaValue node)
    {
        inACvCommaValue(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outACvCommaValue(node);
    }

    public void inAOrcComparison(AOrcComparison node)
    {
        defaultIn(node);
    }

    public void outAOrcComparison(AOrcComparison node)
    {
        defaultOut(node);
    }

    public void caseAOrcComparison(AOrcComparison node)
    {
        inAOrcComparison(node);
        if(node.getLcom() != null)
        {
            node.getLcom().apply(this);
        }
        if(node.getLogicOr() != null)
        {
            node.getLogicOr().apply(this);
        }
        if(node.getRcom() != null)
        {
            node.getRcom().apply(this);
        }
        outAOrcComparison(node);
    }

    public void inAAndcComparison(AAndcComparison node)
    {
        defaultIn(node);
    }

    public void outAAndcComparison(AAndcComparison node)
    {
        defaultOut(node);
    }

    public void caseAAndcComparison(AAndcComparison node)
    {
        inAAndcComparison(node);
        if(node.getLcom() != null)
        {
            node.getLcom().apply(this);
        }
        if(node.getLogicAnd() != null)
        {
            node.getLogicAnd().apply(this);
        }
        if(node.getRcom() != null)
        {
            node.getRcom().apply(this);
        }
        outAAndcComparison(node);
    }

    public void inANotcComparison(ANotcComparison node)
    {
        defaultIn(node);
    }

    public void outANotcComparison(ANotcComparison node)
    {
        defaultOut(node);
    }

    public void caseANotcComparison(ANotcComparison node)
    {
        inANotcComparison(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getDisjunction() != null)
        {
            node.getDisjunction().apply(this);
        }
        outANotcComparison(node);
    }

    public void inAEqcComparison(AEqcComparison node)
    {
        defaultIn(node);
    }

    public void outAEqcComparison(AEqcComparison node)
    {
        defaultOut(node);
    }

    public void caseAEqcComparison(AEqcComparison node)
    {
        inAEqcComparison(node);
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getEqualequal() != null)
        {
            node.getEqualequal().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        outAEqcComparison(node);
    }

    public void inANotccComparison(ANotccComparison node)
    {
        defaultIn(node);
    }

    public void outANotccComparison(ANotccComparison node)
    {
        defaultOut(node);
    }

    public void caseANotccComparison(ANotccComparison node)
    {
        inANotccComparison(node);
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getNoteq() != null)
        {
            node.getNoteq().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        outANotccComparison(node);
    }

    public void inAGreatcComparison(AGreatcComparison node)
    {
        defaultIn(node);
    }

    public void outAGreatcComparison(AGreatcComparison node)
    {
        defaultOut(node);
    }

    public void caseAGreatcComparison(AGreatcComparison node)
    {
        inAGreatcComparison(node);
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getGreat() != null)
        {
            node.getGreat().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        outAGreatcComparison(node);
    }

    public void inAGrccComparison(AGrccComparison node)
    {
        defaultIn(node);
    }

    public void outAGrccComparison(AGrccComparison node)
    {
        defaultOut(node);
    }

    public void caseAGrccComparison(AGrccComparison node)
    {
        inAGrccComparison(node);
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getGreateq() != null)
        {
            node.getGreateq().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        outAGrccComparison(node);
    }

    public void inALesscComparison(ALesscComparison node)
    {
        defaultIn(node);
    }

    public void outALesscComparison(ALesscComparison node)
    {
        defaultOut(node);
    }

    public void caseALesscComparison(ALesscComparison node)
    {
        inALesscComparison(node);
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        outALesscComparison(node);
    }

    public void inALccComparison(ALccComparison node)
    {
        defaultIn(node);
    }

    public void outALccComparison(ALccComparison node)
    {
        defaultOut(node);
    }

    public void caseALccComparison(ALccComparison node)
    {
        inALccComparison(node);
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        if(node.getLesseq() != null)
        {
            node.getLesseq().apply(this);
        }
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        outALccComparison(node);
    }

    public void inATrueComparison(ATrueComparison node)
    {
        defaultIn(node);
    }

    public void outATrueComparison(ATrueComparison node)
    {
        defaultOut(node);
    }

    public void caseATrueComparison(ATrueComparison node)
    {
        inATrueComparison(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueComparison(node);
    }

    public void inAFalseComparison(AFalseComparison node)
    {
        defaultIn(node);
    }

    public void outAFalseComparison(AFalseComparison node)
    {
        defaultOut(node);
    }

    public void caseAFalseComparison(AFalseComparison node)
    {
        inAFalseComparison(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseComparison(node);
    }

    public void inAFuncCallFunctionCall(AFuncCallFunctionCall node)
    {
        defaultIn(node);
    }

    public void outAFuncCallFunctionCall(AFuncCallFunctionCall node)
    {
        defaultOut(node);
    }

    public void caseAFuncCallFunctionCall(AFuncCallFunctionCall node)
    {
        inAFuncCallFunctionCall(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArglist() != null)
        {
            node.getArglist().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAFuncCallFunctionCall(node);
    }

    public void inAArglistArglist(AArglistArglist node)
    {
        defaultIn(node);
    }

    public void outAArglistArglist(AArglistArglist node)
    {
        defaultOut(node);
    }

    public void caseAArglistArglist(AArglistArglist node)
    {
        inAArglistArglist(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            Object temp[] = node.getCommaExpression().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaExpression) temp[i]).apply(this);
            }
        }
        outAArglistArglist(node);
    }

    public void inADotCallValue(ADotCallValue node)
    {
        defaultIn(node);
    }

    public void outADotCallValue(ADotCallValue node)
    {
        defaultOut(node);
    }

    public void caseADotCallValue(ADotCallValue node)
    {
        inADotCallValue(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outADotCallValue(node);
    }

    public void inANumValue(ANumValue node)
    {
        defaultIn(node);
    }

    public void outANumValue(ANumValue node)
    {
        defaultOut(node);
    }

    public void caseANumValue(ANumValue node)
    {
        inANumValue(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumValue(node);
    }

    public void inAStrDValue(AStrDValue node)
    {
        defaultIn(node);
    }

    public void outAStrDValue(AStrDValue node)
    {
        defaultOut(node);
    }

    public void caseAStrDValue(AStrDValue node)
    {
        inAStrDValue(node);
        if(node.getStringDoubleQuotes() != null)
        {
            node.getStringDoubleQuotes().apply(this);
        }
        outAStrDValue(node);
    }

    public void inAStrSValue(AStrSValue node)
    {
        defaultIn(node);
    }

    public void outAStrSValue(AStrSValue node)
    {
        defaultOut(node);
    }

    public void caseAStrSValue(AStrSValue node)
    {
        inAStrSValue(node);
        if(node.getStringSingleQuotes() != null)
        {
            node.getStringSingleQuotes().apply(this);
        }
        outAStrSValue(node);
    }

    public void inANoneValue(ANoneValue node)
    {
        defaultIn(node);
    }

    public void outANoneValue(ANoneValue node)
    {
        defaultOut(node);
    }

    public void caseANoneValue(ANoneValue node)
    {
        inANoneValue(node);
        if(node.getNone() != null)
        {
            node.getNone().apply(this);
        }
        outANoneValue(node);
    }

    public void inAIdentifierSomething(AIdentifierSomething node)
    {
        defaultIn(node);
    }

    public void outAIdentifierSomething(AIdentifierSomething node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierSomething(AIdentifierSomething node)
    {
        inAIdentifierSomething(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdentifierSomething(node);
    }

    public void inANumbSomething(ANumbSomething node)
    {
        defaultIn(node);
    }

    public void outANumbSomething(ANumbSomething node)
    {
        defaultOut(node);
    }

    public void caseANumbSomething(ANumbSomething node)
    {
        inANumbSomething(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumbSomething(node);
    }

    public void inAParSomething(AParSomething node)
    {
        defaultIn(node);
    }

    public void outAParSomething(AParSomething node)
    {
        defaultOut(node);
    }

    public void caseAParSomething(AParSomething node)
    {
        inAParSomething(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAParSomething(node);
    }
}
