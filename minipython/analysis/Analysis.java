/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAGoal(AGoal node);
    void caseAFuncCommands(AFuncCommands node);
    void caseAStatCommands(AStatCommands node);
    void caseADefFuncFunction(ADefFuncFunction node);
    void caseAArgArgument(AArgArgument node);
    void caseACommaIdAsVCiav(ACommaIdAsVCiav node);
    void caseAAsVAssignValue(AAsVAssignValue node);
    void caseAIfStatementStatement(AIfStatementStatement node);
    void caseAWhileStatementStatement(AWhileStatementStatement node);
    void caseAForStatementStatement(AForStatementStatement node);
    void caseAReturnStatementStatement(AReturnStatementStatement node);
    void caseAPrintStatementStatement(APrintStatementStatement node);
    void caseAAssignStatementStatement(AAssignStatementStatement node);
    void caseAIdMineqStatementStatement(AIdMineqStatementStatement node);
    void caseAIdPluseqStatementStatement(AIdPluseqStatementStatement node);
    void caseAIdDiveqStatementStatement(AIdDiveqStatementStatement node);
    void caseAArrayStatementStatement(AArrayStatementStatement node);
    void caseAAssertionStatementStatement(AAssertionStatementStatement node);
    void caseAFuncCallStatementStatement(AFuncCallStatementStatement node);
    void caseAFuncCallFunctionCall(AFuncCallFunctionCall node);
    void caseAArglistArglist(AArglistArglist node);
    void caseACommaExprCommaExpression(ACommaExprCommaExpression node);
    void caseAComparisonComparison(AComparisonComparison node);
    void caseAComparisonMoreComparison(AComparisonMoreComparison node);
    void caseAAftOrAfteror(AAftOrAfteror node);
    void caseAAftOrMoreAfteror(AAftOrMoreAfteror node);
    void caseAAftAndAfterand(AAftAndAfterand node);
    void caseAAftAndNotAfterand(AAftAndNotAfterand node);
    void caseATrueAfternot(ATrueAfternot node);
    void caseAFalseAfternot(AFalseAfternot node);
    void caseALesseqAfternot(ALesseqAfternot node);
    void caseAGreateqAfternot(AGreateqAfternot node);
    void caseADiffAfternot(ADiffAfternot node);
    void caseAEqeqAfternot(AEqeqAfternot node);
    void caseALesscAfternot(ALesscAfternot node);
    void caseAGreatcAfternot(AGreatcAfternot node);
    void caseACvCommaValue(ACvCommaValue node);
    void caseAAdditionExExpression(AAdditionExExpression node);
    void caseASubtractionExExpression(ASubtractionExExpression node);
    void caseAExpressionSubsetExpression(AExpressionSubsetExpression node);
    void caseAMaxExprExpressiono(AMaxExprExpressiono node);
    void caseAMinExprExpressiono(AMinExprExpressiono node);
    void caseASimpleExprExpressiono(ASimpleExprExpressiono node);
    void caseAPlplSimpleExpression(APlplSimpleExpression node);
    void caseAMinminSimpleExpression(AMinminSimpleExpression node);
    void caseAFacSimpleExpression(AFacSimpleExpression node);
    void caseAMultFactorFactor(AMultFactorFactor node);
    void caseAAdFactorFactor(AAdFactorFactor node);
    void caseAMinFactorFactor(AMinFactorFactor node);
    void caseAPowMultiplication(APowMultiplication node);
    void caseADivisionMultiplication(ADivisionMultiplication node);
    void caseAModuloMultiplication(AModuloMultiplication node);
    void caseAMultiplicationMultiplication(AMultiplicationMultiplication node);
    void caseAValuePower(AValuePower node);
    void caseAPowerPower(APowerPower node);
    void caseAValueSubsetValue(AValueSubsetValue node);
    void caseAPinakasExprValue(APinakasExprValue node);
    void caseAFuncCallExprValue(AFuncCallExprValue node);
    void caseALenExpValue(ALenExpValue node);
    void caseAParenthesisExprValueValue(AParenthesisExprValueValue node);
    void caseABracketsExprValueValue(ABracketsExprValueValue node);
    void caseAIdDotFuncValueno(AIdDotFuncValueno node);
    void caseAIdentifierValueno(AIdentifierValueno node);
    void caseANumberValueno(ANumberValueno node);
    void caseADoubleQuotesValueno(ADoubleQuotesValueno node);
    void caseASingleQuotesValueno(ASingleQuotesValueno node);
    void caseANoneValueValueno(ANoneValueValueno node);
    void caseAIdIdent(AIdIdent node);

    void caseTTab(TTab node);
    void caseTPlusplus(TPlusplus node);
    void caseTEqualequal(TEqualequal node);
    void caseTMinusminus(TMinusminus node);
    void caseTMineq(TMineq node);
    void caseTPluseq(TPluseq node);
    void caseTDiveq(TDiveq node);
    void caseTMulteq(TMulteq node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTPow(TPow node);
    void caseTMult(TMult node);
    void caseTMod(TMod node);
    void caseTDiv(TDiv node);
    void caseTNoteq(TNoteq node);
    void caseTLesseq(TLesseq node);
    void caseTGreateq(TGreateq node);
    void caseTLess(TLess node);
    void caseTGreat(TGreat node);
    void caseTAssign(TAssign node);
    void caseTDef(TDef node);
    void caseTNot(TNot node);
    void caseTLogicAnd(TLogicAnd node);
    void caseTLogicOr(TLogicOr node);
    void caseTLBr(TLBr node);
    void caseTRBr(TRBr node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTComma(TComma node);
    void caseTIn(TIn node);
    void caseTIf(TIf node);
    void caseTWhile(TWhile node);
    void caseTFor(TFor node);
    void caseTLen(TLen node);
    void caseTMin(TMin node);
    void caseTMax(TMax node);
    void caseTPrint(TPrint node);
    void caseTReturn(TReturn node);
    void caseTAssert(TAssert node);
    void caseTTrue(TTrue node);
    void caseTSemi(TSemi node);
    void caseTFalse(TFalse node);
    void caseTElse(TElse node);
    void caseTNone(TNone node);
    void caseTQuote(TQuote node);
    void caseTBlank(TBlank node);
    void caseTLineComment(TLineComment node);
    void caseTNumber(TNumber node);
    void caseTDot(TDot node);
    void caseTId(TId node);
    void caseTStringDoubleQuotes(TStringDoubleQuotes node);
    void caseTStringSingleQuotes(TStringSingleQuotes node);
    void caseTEverythingElse(TEverythingElse node);
    void caseEOF(EOF node);
}
