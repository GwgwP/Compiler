/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAGoal(AGoal node);
    void caseAFuncCommands(AFuncCommands node);
    void caseAStatCommands(AStatCommands node);
    void caseADefinitionFunction(ADefinitionFunction node);
    void caseAArgsArgument(AArgsArgument node);
    void caseABCiav(ABCiav node);
    void caseAAAssignValue(AAAssignValue node);
    void caseAIfStatementStatement(AIfStatementStatement node);
    void caseAWhileStatementStatement(AWhileStatementStatement node);
    void caseAForStatementStatement(AForStatementStatement node);
    void caseAReturnStatementStatement(AReturnStatementStatement node);
    void caseAPrintStatementStatement(APrintStatementStatement node);
    void caseAIdAsMineqDiveqStatement(AIdAsMineqDiveqStatement node);
    void caseAArrayStatementStatement(AArrayStatementStatement node);
    void caseAAssertionStatementStatement(AAssertionStatementStatement node);
    void caseAFuncCallStatement(AFuncCallStatement node);
    void caseAIfCompount(AIfCompount node);
    void caseAAgfraDisjunction(AAgfraDisjunction node);
    void caseABbDisjunction(ABbDisjunction node);
    void caseAAdaConjunction(AAdaConjunction node);
    void caseADfdfdConjunction(ADfdfdConjunction node);
    void caseAFrfInversion(AFrfInversion node);
    void caseAFerInversion(AFerInversion node);
    void caseAAsmidiAsMineqDiveq(AAsmidiAsMineqDiveq node);
    void caseAMineqqAsMineqDiveq(AMineqqAsMineqDiveq node);
    void caseADiveqAsMineqDiveq(ADiveqAsMineqDiveq node);
    void caseACECommaExpression(ACECommaExpression node);
    void caseAArithmeticExpressionExpression(AArithmeticExpressionExpression node);
    void caseAArrayExpressionExpression(AArrayExpressionExpression node);
    void caseAFuncCallExpressionExpression(AFuncCallExpressionExpression node);
    void caseAValueExpression(AValueExpression node);
    void caseAIdentifierExpression(AIdentifierExpression node);
    void caseAQuickppMmExpression(AQuickppMmExpression node);
    void caseALengthExpressionExpression(ALengthExpressionExpression node);
    void caseAMinMaxExpressionExpression(AMinMaxExpressionExpression node);
    void caseAParenthesisExpressionExpression(AParenthesisExpressionExpression node);
    void caseABracketsExpressionExpression(ABracketsExpressionExpression node);
    void caseAOpercOperators(AOpercOperators node);
    void caseAMinuscOperators(AMinuscOperators node);
    void caseAMiltcOperators(AMiltcOperators node);
    void caseADivcOperators(ADivcOperators node);
    void caseAModcOperators(AModcOperators node);
    void caseAPowcOperators(APowcOperators node);
    void caseAAddminIncrement(AAddminIncrement node);
    void caseAIncrement(AIncrement node);
    void caseAMaxminOperatorMaxMin(AMaxminOperatorMaxMin node);
    void caseAOperatorMaxMin(AOperatorMaxMin node);
    void caseACvCommaValue(ACvCommaValue node);
    void caseAOrcComparison(AOrcComparison node);
    void caseAAndcComparison(AAndcComparison node);
    void caseANotcComparison(ANotcComparison node);
    void caseAEqcComparison(AEqcComparison node);
    void caseANotccComparison(ANotccComparison node);
    void caseAGreatcComparison(AGreatcComparison node);
    void caseAGrccComparison(AGrccComparison node);
    void caseALesscComparison(ALesscComparison node);
    void caseALccComparison(ALccComparison node);
    void caseATrueComparison(ATrueComparison node);
    void caseAFalseComparison(AFalseComparison node);
    void caseAFuncCallFunctionCall(AFuncCallFunctionCall node);
    void caseAArglistArglist(AArglistArglist node);
    void caseADotCallValue(ADotCallValue node);
    void caseANumValue(ANumValue node);
    void caseAStrDValue(AStrDValue node);
    void caseAStrSValue(AStrSValue node);
    void caseANoneValue(ANoneValue node);
    void caseAIdentifierSomething(AIdentifierSomething node);
    void caseANumbSomething(ANumbSomething node);
    void caseAParSomething(AParSomething node);

    void caseTTab(TTab node);
    void caseTPlusplus(TPlusplus node);
    void caseTEqualequal(TEqualequal node);
    void caseTMinusminus(TMinusminus node);
    void caseTMineq(TMineq node);
    void caseTPluseq(TPluseq node);
    void caseTDiveq(TDiveq node);
    void caseTMulteq(TMulteq node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTPow(TPow node);
    void caseTMult(TMult node);
    void caseTMod(TMod node);
    void caseTDiv(TDiv node);
    void caseTEq(TEq node);
    void caseTDef(TDef node);
    void caseTNot(TNot node);
    void caseTLogicAnd(TLogicAnd node);
    void caseTLogicOr(TLogicOr node);
    void caseTLBr(TLBr node);
    void caseTRBr(TRBr node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTComma(TComma node);
    void caseTIn(TIn node);
    void caseTIf(TIf node);
    void caseTWhile(TWhile node);
    void caseTFor(TFor node);
    void caseTLen(TLen node);
    void caseTMin(TMin node);
    void caseTMax(TMax node);
    void caseTPrint(TPrint node);
    void caseTReturn(TReturn node);
    void caseTAssert(TAssert node);
    void caseTNoteq(TNoteq node);
    void caseTLesseq(TLesseq node);
    void caseTGreateq(TGreateq node);
    void caseTLess(TLess node);
    void caseTGreat(TGreat node);
    void caseTTrue(TTrue node);
    void caseTSemi(TSemi node);
    void caseTFalse(TFalse node);
    void caseTElse(TElse node);
    void caseTNone(TNone node);
    void caseTQuote(TQuote node);
    void caseTBlank(TBlank node);
    void caseTWhiteSpace(TWhiteSpace node);
    void caseTLineComment(TLineComment node);
    void caseTNumber(TNumber node);
    void caseTDot(TDot node);
    void caseTId(TId node);
    void caseTStringDoubleQuotes(TStringDoubleQuotes node);
    void caseTStringSingleQuotes(TStringSingleQuotes node);
    void caseTEverythingElse(TEverythingElse node);
    void caseEOF(EOF node);
}
