/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import java.util.*;
import minipython.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAGoal(AGoal node)
    {
        defaultCase(node);
    }

    public void caseAFuncCommands(AFuncCommands node)
    {
        defaultCase(node);
    }

    public void caseAStatCommands(AStatCommands node)
    {
        defaultCase(node);
    }

    public void caseADefFuncFunction(ADefFuncFunction node)
    {
        defaultCase(node);
    }

    public void caseAArgArgument(AArgArgument node)
    {
        defaultCase(node);
    }

    public void caseACommaIdAsVCiav(ACommaIdAsVCiav node)
    {
        defaultCase(node);
    }

    public void caseAAsVAssignValue(AAsVAssignValue node)
    {
        defaultCase(node);
    }

    public void caseAIfStatementStatement(AIfStatementStatement node)
    {
        defaultCase(node);
    }

    public void caseAWhileStatementStatement(AWhileStatementStatement node)
    {
        defaultCase(node);
    }

    public void caseAForStatementStatement(AForStatementStatement node)
    {
        defaultCase(node);
    }

    public void caseAReturnStatementStatement(AReturnStatementStatement node)
    {
        defaultCase(node);
    }

    public void caseAPrintStatementStatement(APrintStatementStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssignStatementStatement(AAssignStatementStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdMineqStatementStatement(AIdMineqStatementStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdPluseqStatementStatement(AIdPluseqStatementStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdDiveqStatementStatement(AIdDiveqStatementStatement node)
    {
        defaultCase(node);
    }

    public void caseAArrayStatementStatement(AArrayStatementStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssertionStatementStatement(AAssertionStatementStatement node)
    {
        defaultCase(node);
    }

    public void caseAFuncCallStatementStatement(AFuncCallStatementStatement node)
    {
        defaultCase(node);
    }

    public void caseAFuncCallFunctionCall(AFuncCallFunctionCall node)
    {
        defaultCase(node);
    }

    public void caseAArglistArglist(AArglistArglist node)
    {
        defaultCase(node);
    }

    public void caseACommaExprCommaExpression(ACommaExprCommaExpression node)
    {
        defaultCase(node);
    }

    public void caseAComparisonComparison(AComparisonComparison node)
    {
        defaultCase(node);
    }

    public void caseAComparisonMoreComparison(AComparisonMoreComparison node)
    {
        defaultCase(node);
    }

    public void caseAAftOrAfteror(AAftOrAfteror node)
    {
        defaultCase(node);
    }

    public void caseAAftOrMoreAfteror(AAftOrMoreAfteror node)
    {
        defaultCase(node);
    }

    public void caseAAftAndAfterand(AAftAndAfterand node)
    {
        defaultCase(node);
    }

    public void caseAAftAndNotAfterand(AAftAndNotAfterand node)
    {
        defaultCase(node);
    }

    public void caseATrueAfternot(ATrueAfternot node)
    {
        defaultCase(node);
    }

    public void caseAFalseAfternot(AFalseAfternot node)
    {
        defaultCase(node);
    }

    public void caseALesseqAfternot(ALesseqAfternot node)
    {
        defaultCase(node);
    }

    public void caseAGreateqAfternot(AGreateqAfternot node)
    {
        defaultCase(node);
    }

    public void caseADiffAfternot(ADiffAfternot node)
    {
        defaultCase(node);
    }

    public void caseAEqeqAfternot(AEqeqAfternot node)
    {
        defaultCase(node);
    }

    public void caseALesscAfternot(ALesscAfternot node)
    {
        defaultCase(node);
    }

    public void caseAGreatcAfternot(AGreatcAfternot node)
    {
        defaultCase(node);
    }

    public void caseACvCommaValue(ACvCommaValue node)
    {
        defaultCase(node);
    }

    public void caseAAdditionExExpression(AAdditionExExpression node)
    {
        defaultCase(node);
    }

    public void caseASubtractionExExpression(ASubtractionExExpression node)
    {
        defaultCase(node);
    }

    public void caseAExpressionSubsetExpression(AExpressionSubsetExpression node)
    {
        defaultCase(node);
    }

    public void caseAMaxExprExpressiono(AMaxExprExpressiono node)
    {
        defaultCase(node);
    }

    public void caseAMinExprExpressiono(AMinExprExpressiono node)
    {
        defaultCase(node);
    }

    public void caseASimpleExprExpressiono(ASimpleExprExpressiono node)
    {
        defaultCase(node);
    }

    public void caseAPinakasExprExpressiono(APinakasExprExpressiono node)
    {
        defaultCase(node);
    }

    public void caseAFuncCallExprExpressiono(AFuncCallExprExpressiono node)
    {
        defaultCase(node);
    }

    public void caseAPlplSimpleExpression(APlplSimpleExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinminSimpleExpression(AMinminSimpleExpression node)
    {
        defaultCase(node);
    }

    public void caseAFacSimpleExpression(AFacSimpleExpression node)
    {
        defaultCase(node);
    }

    public void caseAMultFactorFactor(AMultFactorFactor node)
    {
        defaultCase(node);
    }

    public void caseAAdFactorFactor(AAdFactorFactor node)
    {
        defaultCase(node);
    }

    public void caseAMinFactorFactor(AMinFactorFactor node)
    {
        defaultCase(node);
    }

    public void caseAPowMultiplication(APowMultiplication node)
    {
        defaultCase(node);
    }

    public void caseADivisionMultiplication(ADivisionMultiplication node)
    {
        defaultCase(node);
    }

    public void caseAModuloMultiplication(AModuloMultiplication node)
    {
        defaultCase(node);
    }

    public void caseAMultiplicationMultiplication(AMultiplicationMultiplication node)
    {
        defaultCase(node);
    }

    public void caseAValuePower(AValuePower node)
    {
        defaultCase(node);
    }

    public void caseAPowerPower(APowerPower node)
    {
        defaultCase(node);
    }

    public void caseAValueSubsetValue(AValueSubsetValue node)
    {
        defaultCase(node);
    }

    public void caseALenExpValue(ALenExpValue node)
    {
        defaultCase(node);
    }

    public void caseAParenthesisExprValueValue(AParenthesisExprValueValue node)
    {
        defaultCase(node);
    }

    public void caseABracketsExprValueValue(ABracketsExprValueValue node)
    {
        defaultCase(node);
    }

    public void caseAIdDotFuncValueno(AIdDotFuncValueno node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierValueno(AIdentifierValueno node)
    {
        defaultCase(node);
    }

    public void caseANumberValueno(ANumberValueno node)
    {
        defaultCase(node);
    }

    public void caseADoubleQuotesValueno(ADoubleQuotesValueno node)
    {
        defaultCase(node);
    }

    public void caseASingleQuotesValueno(ASingleQuotesValueno node)
    {
        defaultCase(node);
    }

    public void caseANoneValueValueno(ANoneValueValueno node)
    {
        defaultCase(node);
    }

    public void caseAIdIdent(AIdIdent node)
    {
        defaultCase(node);
    }

    public void caseTTab(TTab node)
    {
        defaultCase(node);
    }

    public void caseTPlusplus(TPlusplus node)
    {
        defaultCase(node);
    }

    public void caseTEqualequal(TEqualequal node)
    {
        defaultCase(node);
    }

    public void caseTMinusminus(TMinusminus node)
    {
        defaultCase(node);
    }

    public void caseTMineq(TMineq node)
    {
        defaultCase(node);
    }

    public void caseTPluseq(TPluseq node)
    {
        defaultCase(node);
    }

    public void caseTDiveq(TDiveq node)
    {
        defaultCase(node);
    }

    public void caseTMulteq(TMulteq node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTPow(TPow node)
    {
        defaultCase(node);
    }

    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTNoteq(TNoteq node)
    {
        defaultCase(node);
    }

    public void caseTLesseq(TLesseq node)
    {
        defaultCase(node);
    }

    public void caseTGreateq(TGreateq node)
    {
        defaultCase(node);
    }

    public void caseTLess(TLess node)
    {
        defaultCase(node);
    }

    public void caseTGreat(TGreat node)
    {
        defaultCase(node);
    }

    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    public void caseTDef(TDef node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTLogicAnd(TLogicAnd node)
    {
        defaultCase(node);
    }

    public void caseTLogicOr(TLogicOr node)
    {
        defaultCase(node);
    }

    public void caseTLBr(TLBr node)
    {
        defaultCase(node);
    }

    public void caseTRBr(TRBr node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    public void caseTLen(TLen node)
    {
        defaultCase(node);
    }

    public void caseTMin(TMin node)
    {
        defaultCase(node);
    }

    public void caseTMax(TMax node)
    {
        defaultCase(node);
    }

    public void caseTPrint(TPrint node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTAssert(TAssert node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTNone(TNone node)
    {
        defaultCase(node);
    }

    public void caseTQuote(TQuote node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTLineComment(TLineComment node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseTStringDoubleQuotes(TStringDoubleQuotes node)
    {
        defaultCase(node);
    }

    public void caseTStringSingleQuotes(TStringSingleQuotes node)
    {
        defaultCase(node);
    }

    public void caseTEverythingElse(TEverythingElse node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
