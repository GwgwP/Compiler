/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import java.util.*;
import minipython.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAGoal(AGoal node)
    {
        defaultCase(node);
    }

    public void caseAFuncCommands(AFuncCommands node)
    {
        defaultCase(node);
    }

    public void caseAStatCommands(AStatCommands node)
    {
        defaultCase(node);
    }

    public void caseADefinitionFunction(ADefinitionFunction node)
    {
        defaultCase(node);
    }

    public void caseAArgsArgument(AArgsArgument node)
    {
        defaultCase(node);
    }

    public void caseABCiav(ABCiav node)
    {
        defaultCase(node);
    }

    public void caseAAAssignValue(AAAssignValue node)
    {
        defaultCase(node);
    }

    public void caseAWhileStatementStatement(AWhileStatementStatement node)
    {
        defaultCase(node);
    }

    public void caseAForStatementStatement(AForStatementStatement node)
    {
        defaultCase(node);
    }

    public void caseAReturnStatementStatement(AReturnStatementStatement node)
    {
        defaultCase(node);
    }

    public void caseAPrintStatementStatement(APrintStatementStatement node)
    {
        defaultCase(node);
    }

    public void caseAIdAsMineqDiveqStatement(AIdAsMineqDiveqStatement node)
    {
        defaultCase(node);
    }

    public void caseAArrayStatementStatement(AArrayStatementStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssertionStatementStatement(AAssertionStatementStatement node)
    {
        defaultCase(node);
    }

    public void caseAFuncCallStatement(AFuncCallStatement node)
    {
        defaultCase(node);
    }

    public void caseAAsmidiAsMineqDiveq(AAsmidiAsMineqDiveq node)
    {
        defaultCase(node);
    }

    public void caseAMineqqAsMineqDiveq(AMineqqAsMineqDiveq node)
    {
        defaultCase(node);
    }

    public void caseADiveqAsMineqDiveq(ADiveqAsMineqDiveq node)
    {
        defaultCase(node);
    }

    public void caseACECommaExpression(ACECommaExpression node)
    {
        defaultCase(node);
    }

    public void caseAArithmeticExpressionExpression(AArithmeticExpressionExpression node)
    {
        defaultCase(node);
    }

    public void caseAArrayExpressionExpression(AArrayExpressionExpression node)
    {
        defaultCase(node);
    }

    public void caseAFuncCallExpressionExpression(AFuncCallExpressionExpression node)
    {
        defaultCase(node);
    }

    public void caseAValueExpression(AValueExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierExpression(AIdentifierExpression node)
    {
        defaultCase(node);
    }

    public void caseAQuickppMmExpression(AQuickppMmExpression node)
    {
        defaultCase(node);
    }

    public void caseALengthExpressionExpression(ALengthExpressionExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinMaxExpressionExpression(AMinMaxExpressionExpression node)
    {
        defaultCase(node);
    }

    public void caseAParenthesisExpressionExpression(AParenthesisExpressionExpression node)
    {
        defaultCase(node);
    }

    public void caseABracketsExpressionExpression(ABracketsExpressionExpression node)
    {
        defaultCase(node);
    }

    public void caseAOpercOperators(AOpercOperators node)
    {
        defaultCase(node);
    }

    public void caseAMinuscOperators(AMinuscOperators node)
    {
        defaultCase(node);
    }

    public void caseAMiltcOperators(AMiltcOperators node)
    {
        defaultCase(node);
    }

    public void caseADivcOperators(ADivcOperators node)
    {
        defaultCase(node);
    }

    public void caseAModcOperators(AModcOperators node)
    {
        defaultCase(node);
    }

    public void caseAPowcOperators(APowcOperators node)
    {
        defaultCase(node);
    }

    public void caseAAddminIncrement(AAddminIncrement node)
    {
        defaultCase(node);
    }

    public void caseAIncrement(AIncrement node)
    {
        defaultCase(node);
    }

    public void caseAMaxminOperatorMaxMin(AMaxminOperatorMaxMin node)
    {
        defaultCase(node);
    }

    public void caseAOperatorMaxMin(AOperatorMaxMin node)
    {
        defaultCase(node);
    }

    public void caseACvCommaValue(ACvCommaValue node)
    {
        defaultCase(node);
    }

    public void caseATrueComparison(ATrueComparison node)
    {
        defaultCase(node);
    }

    public void caseAFalseComparison(AFalseComparison node)
    {
        defaultCase(node);
    }

    public void caseALesscComparison(ALesscComparison node)
    {
        defaultCase(node);
    }

    public void caseAGreatcComparison(AGreatcComparison node)
    {
        defaultCase(node);
    }

    public void caseAGrccComparison(AGrccComparison node)
    {
        defaultCase(node);
    }

    public void caseALccComparison(ALccComparison node)
    {
        defaultCase(node);
    }

    public void caseANotccComparison(ANotccComparison node)
    {
        defaultCase(node);
    }

    public void caseAEqcComparison(AEqcComparison node)
    {
        defaultCase(node);
    }

    public void caseAAndcComparison(AAndcComparison node)
    {
        defaultCase(node);
    }

    public void caseAOrcComparison(AOrcComparison node)
    {
        defaultCase(node);
    }

    public void caseANotcComparison(ANotcComparison node)
    {
        defaultCase(node);
    }

    public void caseAFuncCallFunctionCall(AFuncCallFunctionCall node)
    {
        defaultCase(node);
    }

    public void caseAArglistArglist(AArglistArglist node)
    {
        defaultCase(node);
    }

    public void caseADotCallValue(ADotCallValue node)
    {
        defaultCase(node);
    }

    public void caseANumValue(ANumValue node)
    {
        defaultCase(node);
    }

    public void caseAStrDValue(AStrDValue node)
    {
        defaultCase(node);
    }

    public void caseAStrSValue(AStrSValue node)
    {
        defaultCase(node);
    }

    public void caseANoneValue(ANoneValue node)
    {
        defaultCase(node);
    }

    public void caseTTab(TTab node)
    {
        defaultCase(node);
    }

    public void caseTPlusplus(TPlusplus node)
    {
        defaultCase(node);
    }

    public void caseTEqualequal(TEqualequal node)
    {
        defaultCase(node);
    }

    public void caseTMinusminus(TMinusminus node)
    {
        defaultCase(node);
    }

    public void caseTMineq(TMineq node)
    {
        defaultCase(node);
    }

    public void caseTPluseq(TPluseq node)
    {
        defaultCase(node);
    }

    public void caseTDiveq(TDiveq node)
    {
        defaultCase(node);
    }

    public void caseTMulteq(TMulteq node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTPow(TPow node)
    {
        defaultCase(node);
    }

    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    public void caseTDef(TDef node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTLogicAnd(TLogicAnd node)
    {
        defaultCase(node);
    }

    public void caseTLogicOr(TLogicOr node)
    {
        defaultCase(node);
    }

    public void caseTLBr(TLBr node)
    {
        defaultCase(node);
    }

    public void caseTRBr(TRBr node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    public void caseTLen(TLen node)
    {
        defaultCase(node);
    }

    public void caseTMin(TMin node)
    {
        defaultCase(node);
    }

    public void caseTMax(TMax node)
    {
        defaultCase(node);
    }

    public void caseTPrint(TPrint node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTAssert(TAssert node)
    {
        defaultCase(node);
    }

    public void caseTNoteq(TNoteq node)
    {
        defaultCase(node);
    }

    public void caseTLesseq(TLesseq node)
    {
        defaultCase(node);
    }

    public void caseTGreateq(TGreateq node)
    {
        defaultCase(node);
    }

    public void caseTLess(TLess node)
    {
        defaultCase(node);
    }

    public void caseTGreat(TGreat node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTNone(TNone node)
    {
        defaultCase(node);
    }

    public void caseTQuote(TQuote node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTWhiteSpace(TWhiteSpace node)
    {
        defaultCase(node);
    }

    public void caseTLineComment(TLineComment node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseTStringDoubleQuotes(TStringDoubleQuotes node)
    {
        defaultCase(node);
    }

    public void caseTStringSingleQuotes(TStringSingleQuotes node)
    {
        defaultCase(node);
    }

    public void caseTEverythingElse(TEverythingElse node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
