/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPGoal().apply(this);
        outStart(node);
    }

    public void inAGoal(AGoal node)
    {
        defaultIn(node);
    }

    public void outAGoal(AGoal node)
    {
        defaultOut(node);
    }

    public void caseAGoal(AGoal node)
    {
        inAGoal(node);
        {
            Object temp[] = node.getCommands().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommands) temp[i]).apply(this);
            }
        }
        outAGoal(node);
    }

    public void inAFuncCommands(AFuncCommands node)
    {
        defaultIn(node);
    }

    public void outAFuncCommands(AFuncCommands node)
    {
        defaultOut(node);
    }

    public void caseAFuncCommands(AFuncCommands node)
    {
        inAFuncCommands(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFuncCommands(node);
    }

    public void inAStatCommands(AStatCommands node)
    {
        defaultIn(node);
    }

    public void outAStatCommands(AStatCommands node)
    {
        defaultOut(node);
    }

    public void caseAStatCommands(AStatCommands node)
    {
        inAStatCommands(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatCommands(node);
    }

    public void inADedeFunction(ADedeFunction node)
    {
        defaultIn(node);
    }

    public void outADedeFunction(ADedeFunction node)
    {
        defaultOut(node);
    }

    public void caseADedeFunction(ADedeFunction node)
    {
        inADedeFunction(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgument() != null)
        {
            node.getArgument().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getDef() != null)
        {
            node.getDef().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outADedeFunction(node);
    }

    public void inAFrfrfArgument(AFrfrfArgument node)
    {
        defaultIn(node);
    }

    public void outAFrfrfArgument(AFrfrfArgument node)
    {
        defaultOut(node);
    }

    public void caseAFrfrfArgument(AFrfrfArgument node)
    {
        inAFrfrfArgument(node);
        {
            Object temp[] = node.getCiav().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCiav) temp[i]).apply(this);
            }
        }
        if(node.getAssignValue() != null)
        {
            node.getAssignValue().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFrfrfArgument(node);
    }

    public void inAFfCiav(AFfCiav node)
    {
        defaultIn(node);
    }

    public void outAFfCiav(AFfCiav node)
    {
        defaultOut(node);
    }

    public void caseAFfCiav(AFfCiav node)
    {
        inAFfCiav(node);
        if(node.getAssignValue() != null)
        {
            node.getAssignValue().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAFfCiav(node);
    }

    public void inAFrfrfrrfrfAssignValue(AFrfrfrrfrfAssignValue node)
    {
        defaultIn(node);
    }

    public void outAFrfrfrrfrfAssignValue(AFrfrfrrfrfAssignValue node)
    {
        defaultOut(node);
    }

    public void caseAFrfrfrrfrfAssignValue(AFrfrfrrfrfAssignValue node)
    {
        inAFrfrfrrfrfAssignValue(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        outAFrfrfrrfrfAssignValue(node);
    }

    public void inAIfStatementStatement(AIfStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatementStatement(AIfStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAIfStatementStatement(AIfStatementStatement node)
    {
        inAIfStatementStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAIfStatementStatement(node);
    }

    public void inAWhileStatementStatement(AWhileStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatementStatement(AWhileStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAWhileStatementStatement(AWhileStatementStatement node)
    {
        inAWhileStatementStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAWhileStatementStatement(node);
    }

    public void inAForStatementStatement(AForStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatementStatement(AForStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAForStatementStatement(AForStatementStatement node)
    {
        inAForStatementStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getRid() != null)
        {
            node.getRid().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getLid() != null)
        {
            node.getLid().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAForStatementStatement(node);
    }

    public void inAReturnStatementStatement(AReturnStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatementStatement(AReturnStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAReturnStatementStatement(AReturnStatementStatement node)
    {
        inAReturnStatementStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAReturnStatementStatement(node);
    }

    public void inAPrintStatementStatement(APrintStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStatementStatement(APrintStatementStatement node)
    {
        defaultOut(node);
    }

    public void caseAPrintStatementStatement(APrintStatementStatement node)
    {
        inAPrintStatementStatement(node);
        {
            Object temp[] = node.getCommaExpression().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommaExpression) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAPrintStatementStatement(node);
    }

    public void inAAssignStatement(AAssignStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignStatement(AAssignStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssignStatement(AAssignStatement node)
    {
        inAAssignStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAAssignStatement(node);
    }

    public void inAIdMineqStatement(AIdMineqStatement node)
    {
        defaultIn(node);
    }

    public void outAIdMineqStatement(AIdMineqStatement node)
    {
        defaultOut(node);
    }

    public void caseAIdMineqStatement(AIdMineqStatement node)
    {
        inAIdMineqStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getMineq() != null)
        {
            node.getMineq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAIdMineqStatement(node);
    }

    public void inAIdPluseqStatement(AIdPluseqStatement node)
    {
        defaultIn(node);
    }

    public void outAIdPluseqStatement(AIdPluseqStatement node)
    {
        defaultOut(node);
    }

    public void caseAIdPluseqStatement(AIdPluseqStatement node)
    {
        inAIdPluseqStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getPluseq() != null)
        {
            node.getPluseq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAIdPluseqStatement(node);
    }

    public void inAIdDiveqStatement(AIdDiveqStatement node)
    {
        defaultIn(node);
    }

    public void outAIdDiveqStatement(AIdDiveqStatement node)
    {
        defaultOut(node);
    }

    public void caseAIdDiveqStatement(AIdDiveqStatement node)
    {
        inAIdDiveqStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getDiveq() != null)
        {
            node.getDiveq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAIdDiveqStatement(node);
    }

    public void inAPinakasStatement(APinakasStatement node)
    {
        defaultIn(node);
    }

    public void outAPinakasStatement(APinakasStatement node)
    {
        defaultOut(node);
    }

    public void caseAPinakasStatement(APinakasStatement node)
    {
        inAPinakasStatement(node);
        if(node.getRex() != null)
        {
            node.getRex().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        if(node.getLex() != null)
        {
            node.getLex().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAPinakasStatement(node);
    }

    public void inAAssertionStatement(AAssertionStatement node)
    {
        defaultIn(node);
    }

    public void outAAssertionStatement(AAssertionStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssertionStatement(AAssertionStatement node)
    {
        inAAssertionStatement(node);
        if(node.getCommaExpression() != null)
        {
            node.getCommaExpression().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getAssert() != null)
        {
            node.getAssert().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAAssertionStatement(node);
    }

    public void inAFuncCallStatement(AFuncCallStatement node)
    {
        defaultIn(node);
    }

    public void outAFuncCallStatement(AFuncCallStatement node)
    {
        defaultOut(node);
    }

    public void caseAFuncCallStatement(AFuncCallStatement node)
    {
        inAFuncCallStatement(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAFuncCallStatement(node);
    }

    public void inAEreaFunctionCall(AEreaFunctionCall node)
    {
        defaultIn(node);
    }

    public void outAEreaFunctionCall(AEreaFunctionCall node)
    {
        defaultOut(node);
    }

    public void caseAEreaFunctionCall(AEreaFunctionCall node)
    {
        inAEreaFunctionCall(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArglist() != null)
        {
            node.getArglist().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAEreaFunctionCall(node);
    }

    public void inADdsasaArglist(ADdsasaArglist node)
    {
        defaultIn(node);
    }

    public void outADdsasaArglist(ADdsasaArglist node)
    {
        defaultOut(node);
    }

    public void caseADdsasaArglist(ADdsasaArglist node)
    {
        inADdsasaArglist(node);
        {
            Object temp[] = node.getCommaExpression().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommaExpression) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outADdsasaArglist(node);
    }

    public void inAFrfrfrfrfeCommaExpression(AFrfrfrfrfeCommaExpression node)
    {
        defaultIn(node);
    }

    public void outAFrfrfrfrfeCommaExpression(AFrfrfrfrfeCommaExpression node)
    {
        defaultOut(node);
    }

    public void caseAFrfrfrfrfeCommaExpression(AFrfrfrfrfeCommaExpression node)
    {
        inAFrfrfrfrfeCommaExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAFrfrfrfrfeCommaExpression(node);
    }

    public void inADssComparison(ADssComparison node)
    {
        defaultIn(node);
    }

    public void outADssComparison(ADssComparison node)
    {
        defaultOut(node);
    }

    public void caseADssComparison(ADssComparison node)
    {
        inADssComparison(node);
        if(node.getAfteror() != null)
        {
            node.getAfteror().apply(this);
        }
        outADssComparison(node);
    }

    public void inAOrcComparison(AOrcComparison node)
    {
        defaultIn(node);
    }

    public void outAOrcComparison(AOrcComparison node)
    {
        defaultOut(node);
    }

    public void caseAOrcComparison(AOrcComparison node)
    {
        inAOrcComparison(node);
        if(node.getAfteror() != null)
        {
            node.getAfteror().apply(this);
        }
        if(node.getLogicOr() != null)
        {
            node.getLogicOr().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outAOrcComparison(node);
    }

    public void inADdAfteror(ADdAfteror node)
    {
        defaultIn(node);
    }

    public void outADdAfteror(ADdAfteror node)
    {
        defaultOut(node);
    }

    public void caseADdAfteror(ADdAfteror node)
    {
        inADdAfteror(node);
        if(node.getAfterand() != null)
        {
            node.getAfterand().apply(this);
        }
        outADdAfteror(node);
    }

    public void inAAndcAfteror(AAndcAfteror node)
    {
        defaultIn(node);
    }

    public void outAAndcAfteror(AAndcAfteror node)
    {
        defaultOut(node);
    }

    public void caseAAndcAfteror(AAndcAfteror node)
    {
        inAAndcAfteror(node);
        if(node.getAfterand() != null)
        {
            node.getAfterand().apply(this);
        }
        if(node.getLogicAnd() != null)
        {
            node.getLogicAnd().apply(this);
        }
        if(node.getAfteror() != null)
        {
            node.getAfteror().apply(this);
        }
        outAAndcAfteror(node);
    }

    public void inAWAfterand(AWAfterand node)
    {
        defaultIn(node);
    }

    public void outAWAfterand(AWAfterand node)
    {
        defaultOut(node);
    }

    public void caseAWAfterand(AWAfterand node)
    {
        inAWAfterand(node);
        if(node.getAfternot() != null)
        {
            node.getAfternot().apply(this);
        }
        outAWAfterand(node);
    }

    public void inANotcAfterand(ANotcAfterand node)
    {
        defaultIn(node);
    }

    public void outANotcAfterand(ANotcAfterand node)
    {
        defaultOut(node);
    }

    public void caseANotcAfterand(ANotcAfterand node)
    {
        inANotcAfterand(node);
        if(node.getAfternot() != null)
        {
            node.getAfternot().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outANotcAfterand(node);
    }

    public void inATrueAfternot(ATrueAfternot node)
    {
        defaultIn(node);
    }

    public void outATrueAfternot(ATrueAfternot node)
    {
        defaultOut(node);
    }

    public void caseATrueAfternot(ATrueAfternot node)
    {
        inATrueAfternot(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueAfternot(node);
    }

    public void inAFalseAfternot(AFalseAfternot node)
    {
        defaultIn(node);
    }

    public void outAFalseAfternot(AFalseAfternot node)
    {
        defaultOut(node);
    }

    public void caseAFalseAfternot(AFalseAfternot node)
    {
        inAFalseAfternot(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseAfternot(node);
    }

    public void inALesseqAfternot(ALesseqAfternot node)
    {
        defaultIn(node);
    }

    public void outALesseqAfternot(ALesseqAfternot node)
    {
        defaultOut(node);
    }

    public void caseALesseqAfternot(ALesseqAfternot node)
    {
        inALesseqAfternot(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getLesseq() != null)
        {
            node.getLesseq().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        outALesseqAfternot(node);
    }

    public void inAGreateqAfternot(AGreateqAfternot node)
    {
        defaultIn(node);
    }

    public void outAGreateqAfternot(AGreateqAfternot node)
    {
        defaultOut(node);
    }

    public void caseAGreateqAfternot(AGreateqAfternot node)
    {
        inAGreateqAfternot(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getGreateq() != null)
        {
            node.getGreateq().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        outAGreateqAfternot(node);
    }

    public void inADiffAfternot(ADiffAfternot node)
    {
        defaultIn(node);
    }

    public void outADiffAfternot(ADiffAfternot node)
    {
        defaultOut(node);
    }

    public void caseADiffAfternot(ADiffAfternot node)
    {
        inADiffAfternot(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getNoteq() != null)
        {
            node.getNoteq().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        outADiffAfternot(node);
    }

    public void inAEqeqAfternot(AEqeqAfternot node)
    {
        defaultIn(node);
    }

    public void outAEqeqAfternot(AEqeqAfternot node)
    {
        defaultOut(node);
    }

    public void caseAEqeqAfternot(AEqeqAfternot node)
    {
        inAEqeqAfternot(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getEqualequal() != null)
        {
            node.getEqualequal().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        outAEqeqAfternot(node);
    }

    public void inALesscAfternot(ALesscAfternot node)
    {
        defaultIn(node);
    }

    public void outALesscAfternot(ALesscAfternot node)
    {
        defaultOut(node);
    }

    public void caseALesscAfternot(ALesscAfternot node)
    {
        inALesscAfternot(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        outALesscAfternot(node);
    }

    public void inAGreatcAfternot(AGreatcAfternot node)
    {
        defaultIn(node);
    }

    public void outAGreatcAfternot(AGreatcAfternot node)
    {
        defaultOut(node);
    }

    public void caseAGreatcAfternot(AGreatcAfternot node)
    {
        inAGreatcAfternot(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getGreat() != null)
        {
            node.getGreat().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        outAGreatcAfternot(node);
    }

    public void inACvCommaValue(ACvCommaValue node)
    {
        defaultIn(node);
    }

    public void outACvCommaValue(ACvCommaValue node)
    {
        defaultOut(node);
    }

    public void caseACvCommaValue(ACvCommaValue node)
    {
        inACvCommaValue(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACvCommaValue(node);
    }

    public void inAAdditionExExpression(AAdditionExExpression node)
    {
        defaultIn(node);
    }

    public void outAAdditionExExpression(AAdditionExExpression node)
    {
        defaultOut(node);
    }

    public void caseAAdditionExExpression(AAdditionExExpression node)
    {
        inAAdditionExExpression(node);
        if(node.getExpressiono() != null)
        {
            node.getExpressiono().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAdditionExExpression(node);
    }

    public void inASubtractionExExpression(ASubtractionExExpression node)
    {
        defaultIn(node);
    }

    public void outASubtractionExExpression(ASubtractionExExpression node)
    {
        defaultOut(node);
    }

    public void caseASubtractionExExpression(ASubtractionExExpression node)
    {
        inASubtractionExExpression(node);
        if(node.getExpressiono() != null)
        {
            node.getExpressiono().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outASubtractionExExpression(node);
    }

    public void inAAsExpression(AAsExpression node)
    {
        defaultIn(node);
    }

    public void outAAsExpression(AAsExpression node)
    {
        defaultOut(node);
    }

    public void caseAAsExpression(AAsExpression node)
    {
        inAAsExpression(node);
        if(node.getExpressiono() != null)
        {
            node.getExpressiono().apply(this);
        }
        outAAsExpression(node);
    }

    public void inADewExpressiono(ADewExpressiono node)
    {
        defaultIn(node);
    }

    public void outADewExpressiono(ADewExpressiono node)
    {
        defaultOut(node);
    }

    public void caseADewExpressiono(ADewExpressiono node)
    {
        inADewExpressiono(node);
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        outADewExpressiono(node);
    }

    public void inAPinakasexpExpressiono(APinakasexpExpressiono node)
    {
        defaultIn(node);
    }

    public void outAPinakasexpExpressiono(APinakasexpExpressiono node)
    {
        defaultOut(node);
    }

    public void caseAPinakasexpExpressiono(APinakasexpExpressiono node)
    {
        inAPinakasexpExpressiono(node);
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAPinakasexpExpressiono(node);
    }

    public void inARedExpressiono(ARedExpressiono node)
    {
        defaultIn(node);
    }

    public void outARedExpressiono(ARedExpressiono node)
    {
        defaultOut(node);
    }

    public void caseARedExpressiono(ARedExpressiono node)
    {
        inARedExpressiono(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outARedExpressiono(node);
    }

    public void inAMaxExExpressiono(AMaxExExpressiono node)
    {
        defaultIn(node);
    }

    public void outAMaxExExpressiono(AMaxExExpressiono node)
    {
        defaultOut(node);
    }

    public void caseAMaxExExpressiono(AMaxExExpressiono node)
    {
        inAMaxExExpressiono(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            Object temp[] = node.getCommaValue().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommaValue) temp[i]).apply(this);
            }
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getMax() != null)
        {
            node.getMax().apply(this);
        }
        outAMaxExExpressiono(node);
    }

    public void inAMinExExpressiono(AMinExExpressiono node)
    {
        defaultIn(node);
    }

    public void outAMinExExpressiono(AMinExExpressiono node)
    {
        defaultOut(node);
    }

    public void caseAMinExExpressiono(AMinExExpressiono node)
    {
        inAMinExExpressiono(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            Object temp[] = node.getCommaValue().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommaValue) temp[i]).apply(this);
            }
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getMin() != null)
        {
            node.getMin().apply(this);
        }
        outAMinExExpressiono(node);
    }

    public void inAPlplSimpleExpression(APlplSimpleExpression node)
    {
        defaultIn(node);
    }

    public void outAPlplSimpleExpression(APlplSimpleExpression node)
    {
        defaultOut(node);
    }

    public void caseAPlplSimpleExpression(APlplSimpleExpression node)
    {
        inAPlplSimpleExpression(node);
        if(node.getPlusplus() != null)
        {
            node.getPlusplus().apply(this);
        }
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        outAPlplSimpleExpression(node);
    }

    public void inAMinminSimpleExpression(AMinminSimpleExpression node)
    {
        defaultIn(node);
    }

    public void outAMinminSimpleExpression(AMinminSimpleExpression node)
    {
        defaultOut(node);
    }

    public void caseAMinminSimpleExpression(AMinminSimpleExpression node)
    {
        inAMinminSimpleExpression(node);
        if(node.getMinusminus() != null)
        {
            node.getMinusminus().apply(this);
        }
        if(node.getSimpleExpression() != null)
        {
            node.getSimpleExpression().apply(this);
        }
        outAMinminSimpleExpression(node);
    }

    public void inAASimpleExpression(AASimpleExpression node)
    {
        defaultIn(node);
    }

    public void outAASimpleExpression(AASimpleExpression node)
    {
        defaultOut(node);
    }

    public void caseAASimpleExpression(AASimpleExpression node)
    {
        inAASimpleExpression(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAASimpleExpression(node);
    }

    public void inAMsaFactor(AMsaFactor node)
    {
        defaultIn(node);
    }

    public void outAMsaFactor(AMsaFactor node)
    {
        defaultOut(node);
    }

    public void caseAMsaFactor(AMsaFactor node)
    {
        inAMsaFactor(node);
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        outAMsaFactor(node);
    }

    public void inAAdFactor(AAdFactor node)
    {
        defaultIn(node);
    }

    public void outAAdFactor(AAdFactor node)
    {
        defaultOut(node);
    }

    public void caseAAdFactor(AAdFactor node)
    {
        inAAdFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAAdFactor(node);
    }

    public void inAAsFactor(AAsFactor node)
    {
        defaultIn(node);
    }

    public void outAAsFactor(AAsFactor node)
    {
        defaultOut(node);
    }

    public void caseAAsFactor(AAsFactor node)
    {
        inAAsFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAAsFactor(node);
    }

    public void inAPowMultiplication(APowMultiplication node)
    {
        defaultIn(node);
    }

    public void outAPowMultiplication(APowMultiplication node)
    {
        defaultOut(node);
    }

    public void caseAPowMultiplication(APowMultiplication node)
    {
        inAPowMultiplication(node);
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        outAPowMultiplication(node);
    }

    public void inADivisionMultiplication(ADivisionMultiplication node)
    {
        defaultIn(node);
    }

    public void outADivisionMultiplication(ADivisionMultiplication node)
    {
        defaultOut(node);
    }

    public void caseADivisionMultiplication(ADivisionMultiplication node)
    {
        inADivisionMultiplication(node);
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        outADivisionMultiplication(node);
    }

    public void inAModuloMultiplication(AModuloMultiplication node)
    {
        defaultIn(node);
    }

    public void outAModuloMultiplication(AModuloMultiplication node)
    {
        defaultOut(node);
    }

    public void caseAModuloMultiplication(AModuloMultiplication node)
    {
        inAModuloMultiplication(node);
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        outAModuloMultiplication(node);
    }

    public void inAMultiplicationMultiplication(AMultiplicationMultiplication node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationMultiplication(AMultiplicationMultiplication node)
    {
        defaultOut(node);
    }

    public void caseAMultiplicationMultiplication(AMultiplicationMultiplication node)
    {
        inAMultiplicationMultiplication(node);
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        outAMultiplicationMultiplication(node);
    }

    public void inAValuePower(AValuePower node)
    {
        defaultIn(node);
    }

    public void outAValuePower(AValuePower node)
    {
        defaultOut(node);
    }

    public void caseAValuePower(AValuePower node)
    {
        inAValuePower(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValuePower(node);
    }

    public void inAPowerPower(APowerPower node)
    {
        defaultIn(node);
    }

    public void outAPowerPower(APowerPower node)
    {
        defaultOut(node);
    }

    public void caseAPowerPower(APowerPower node)
    {
        inAPowerPower(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getPow() != null)
        {
            node.getPow().apply(this);
        }
        if(node.getPower() != null)
        {
            node.getPower().apply(this);
        }
        outAPowerPower(node);
    }

    public void inALenExpValue(ALenExpValue node)
    {
        defaultIn(node);
    }

    public void outALenExpValue(ALenExpValue node)
    {
        defaultOut(node);
    }

    public void caseALenExpValue(ALenExpValue node)
    {
        inALenExpValue(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getLen() != null)
        {
            node.getLen().apply(this);
        }
        outALenExpValue(node);
    }

    public void inAIddotValue(AIddotValue node)
    {
        defaultIn(node);
    }

    public void outAIddotValue(AIddotValue node)
    {
        defaultOut(node);
    }

    public void caseAIddotValue(AIddotValue node)
    {
        inAIddotValue(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIddotValue(node);
    }

    public void inAIdentifierValue(AIdentifierValue node)
    {
        defaultIn(node);
    }

    public void outAIdentifierValue(AIdentifierValue node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierValue(AIdentifierValue node)
    {
        inAIdentifierValue(node);
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAIdentifierValue(node);
    }

    public void inANumbValue(ANumbValue node)
    {
        defaultIn(node);
    }

    public void outANumbValue(ANumbValue node)
    {
        defaultOut(node);
    }

    public void caseANumbValue(ANumbValue node)
    {
        inANumbValue(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumbValue(node);
    }

    public void inADValue(ADValue node)
    {
        defaultIn(node);
    }

    public void outADValue(ADValue node)
    {
        defaultOut(node);
    }

    public void caseADValue(ADValue node)
    {
        inADValue(node);
        if(node.getStringDoubleQuotes() != null)
        {
            node.getStringDoubleQuotes().apply(this);
        }
        outADValue(node);
    }

    public void inAWeValue(AWeValue node)
    {
        defaultIn(node);
    }

    public void outAWeValue(AWeValue node)
    {
        defaultOut(node);
    }

    public void caseAWeValue(AWeValue node)
    {
        inAWeValue(node);
        if(node.getStringSingleQuotes() != null)
        {
            node.getStringSingleQuotes().apply(this);
        }
        outAWeValue(node);
    }

    public void inAPsrValue(APsrValue node)
    {
        defaultIn(node);
    }

    public void outAPsrValue(APsrValue node)
    {
        defaultOut(node);
    }

    public void caseAPsrValue(APsrValue node)
    {
        inAPsrValue(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAPsrValue(node);
    }

    public void inAGiiagigaValue(AGiiagigaValue node)
    {
        defaultIn(node);
    }

    public void outAGiiagigaValue(AGiiagigaValue node)
    {
        defaultOut(node);
    }

    public void caseAGiiagigaValue(AGiiagigaValue node)
    {
        inAGiiagigaValue(node);
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        {
            Object temp[] = node.getCommaExpression().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommaExpression) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        outAGiiagigaValue(node);
    }

    public void inANonenonegoodValue(ANonenonegoodValue node)
    {
        defaultIn(node);
    }

    public void outANonenonegoodValue(ANonenonegoodValue node)
    {
        defaultOut(node);
    }

    public void caseANonenonegoodValue(ANonenonegoodValue node)
    {
        inANonenonegoodValue(node);
        if(node.getNone() != null)
        {
            node.getNone().apply(this);
        }
        outANonenonegoodValue(node);
    }

    public void inAEIdent(AEIdent node)
    {
        defaultIn(node);
    }

    public void outAEIdent(AEIdent node)
    {
        defaultOut(node);
    }

    public void caseAEIdent(AEIdent node)
    {
        inAEIdent(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAEIdent(node);
    }
}
