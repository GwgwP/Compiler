/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.lexer;

import java.io.*;
import java.util.*;
import minipython.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 52:
                        {
                            Token token = new52(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 53:
                        {
                            Token token = new53(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TTab(text, line, pos); }
    Token new1(int line, int pos) { return new TPlusplus(line, pos); }
    Token new2(int line, int pos) { return new TEqualequal(line, pos); }
    Token new3(int line, int pos) { return new TMinusminus(line, pos); }
    Token new4(int line, int pos) { return new TMineq(line, pos); }
    Token new5(int line, int pos) { return new TPluseq(line, pos); }
    Token new6(int line, int pos) { return new TDiveq(line, pos); }
    Token new7(int line, int pos) { return new TMulteq(line, pos); }
    Token new8(int line, int pos) { return new TPlus(line, pos); }
    Token new9(int line, int pos) { return new TMinus(line, pos); }
    Token new10(int line, int pos) { return new TPow(line, pos); }
    Token new11(int line, int pos) { return new TMult(line, pos); }
    Token new12(int line, int pos) { return new TMod(line, pos); }
    Token new13(int line, int pos) { return new TDiv(line, pos); }
    Token new14(int line, int pos) { return new TEq(line, pos); }
    Token new15(int line, int pos) { return new TDef(line, pos); }
    Token new16(int line, int pos) { return new TNot(line, pos); }
    Token new17(int line, int pos) { return new TLogicAnd(line, pos); }
    Token new18(int line, int pos) { return new TLogicOr(line, pos); }
    Token new19(int line, int pos) { return new TLBr(line, pos); }
    Token new20(int line, int pos) { return new TRBr(line, pos); }
    Token new21(int line, int pos) { return new TLPar(line, pos); }
    Token new22(int line, int pos) { return new TRPar(line, pos); }
    Token new23(int line, int pos) { return new TComma(line, pos); }
    Token new24(int line, int pos) { return new TIn(line, pos); }
    Token new25(int line, int pos) { return new TIf(line, pos); }
    Token new26(int line, int pos) { return new TWhile(line, pos); }
    Token new27(int line, int pos) { return new TFor(line, pos); }
    Token new28(int line, int pos) { return new TLen(line, pos); }
    Token new29(int line, int pos) { return new TMin(line, pos); }
    Token new30(int line, int pos) { return new TMax(line, pos); }
    Token new31(int line, int pos) { return new TPrint(line, pos); }
    Token new32(int line, int pos) { return new TReturn(line, pos); }
    Token new33(int line, int pos) { return new TAssert(line, pos); }
    Token new34(int line, int pos) { return new TNoteq(line, pos); }
    Token new35(int line, int pos) { return new TLesseq(line, pos); }
    Token new36(int line, int pos) { return new TGreateq(line, pos); }
    Token new37(int line, int pos) { return new TLess(line, pos); }
    Token new38(int line, int pos) { return new TGreat(line, pos); }
    Token new39(int line, int pos) { return new TTrue(line, pos); }
    Token new40(int line, int pos) { return new TSemi(line, pos); }
    Token new41(int line, int pos) { return new TFalse(line, pos); }
    Token new42(int line, int pos) { return new TElse(line, pos); }
    Token new43(int line, int pos) { return new TNone(line, pos); }
    Token new44(int line, int pos) { return new TQuote(line, pos); }
    Token new45(String text, int line, int pos) { return new TBlank(text, line, pos); }
    Token new46(String text, int line, int pos) { return new TWhiteSpace(text, line, pos); }
    Token new47(String text, int line, int pos) { return new TLineComment(text, line, pos); }
    Token new48(String text, int line, int pos) { return new TNumber(text, line, pos); }
    Token new49(int line, int pos) { return new TDot(line, pos); }
    Token new50(String text, int line, int pos) { return new TId(text, line, pos); }
    Token new51(String text, int line, int pos) { return new TStringDoubleQuotes(text, line, pos); }
    Token new52(String text, int line, int pos) { return new TStringSingleQuotes(text, line, pos); }
    Token new53(String text, int line, int pos) { return new TEverythingElse(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 11, 1}, {12, 12, 4}, {13, 13, 5}, {14, 31, 1}, {32, 32, 6}, {33, 33, 7}, {34, 34, 8}, {35, 35, 9}, {36, 36, 1}, {37, 37, 10}, {38, 38, 1}, {39, 39, 11}, {40, 40, 12}, {41, 41, 13}, {42, 42, 14}, {43, 43, 15}, {44, 44, 16}, {45, 45, 17}, {46, 46, 18}, {47, 47, 19}, {48, 57, 20}, {58, 58, 21}, {59, 59, 1}, {60, 60, 22}, {61, 61, 23}, {62, 62, 24}, {63, 64, 1}, {65, 77, 25}, {78, 78, 26}, {79, 90, 25}, {91, 91, 27}, {92, 92, 1}, {93, 93, 28}, {94, 96, 1}, {97, 97, 29}, {98, 99, 30}, {100, 100, 31}, {101, 101, 32}, {102, 102, 33}, {103, 104, 30}, {105, 105, 34}, {106, 107, 30}, {108, 108, 35}, {109, 109, 36}, {110, 110, 37}, {111, 111, 38}, {112, 112, 39}, {113, 113, 30}, {114, 114, 40}, {115, 115, 30}, {116, 116, 41}, {117, 118, 30}, {119, 119, 42}, {120, 122, 30}, {123, 127, 1}, },
            {},
            {{9, 9, 43}, {12, 12, 44}, {32, 32, 45}, },
            {},
            {{9, 32, -4}, },
            {},
            {{9, 32, -4}, },
            {{61, 61, 46}, },
            {{0, 9, 47}, {11, 12, 47}, {14, 33, 47}, {34, 34, 48}, {35, 127, 47}, },
            {{0, 9, 49}, {10, 10, 50}, {11, 12, 49}, {13, 13, 51}, {14, 127, 49}, },
            {},
            {{0, 9, 52}, {11, 12, 52}, {14, 38, 52}, {39, 39, 53}, {40, 127, 52}, },
            {},
            {},
            {{42, 42, 54}, {61, 61, 55}, },
            {{43, 43, 56}, {61, 61, 57}, },
            {},
            {{45, 45, 58}, {61, 61, 59}, },
            {},
            {{61, 61, 60}, },
            {{48, 57, 61}, },
            {},
            {{61, 61, 62}, },
            {{61, 61, 63}, },
            {{61, 61, 64}, },
            {{48, 57, 65}, {65, 90, 66}, {97, 122, 67}, },
            {{48, 90, -27}, {97, 110, 67}, {111, 111, 68}, {112, 122, 67}, },
            {},
            {},
            {{48, 90, -27}, {97, 109, 67}, {110, 110, 69}, {111, 114, 67}, {115, 115, 70}, {116, 122, 67}, },
            {{48, 122, -27}, },
            {{48, 90, -27}, {97, 100, 67}, {101, 101, 71}, {102, 122, 67}, },
            {{48, 90, -27}, {97, 107, 67}, {108, 108, 72}, {109, 122, 67}, },
            {{48, 90, -27}, {97, 97, 73}, {98, 110, 67}, {111, 111, 74}, {112, 122, 67}, },
            {{48, 90, -27}, {97, 101, 67}, {102, 102, 75}, {103, 109, 67}, {110, 110, 76}, {111, 122, 67}, },
            {{48, 100, -33}, {101, 101, 77}, {102, 122, 67}, },
            {{48, 90, -27}, {97, 97, 78}, {98, 104, 67}, {105, 105, 79}, {106, 122, 67}, },
            {{48, 110, -28}, {111, 111, 80}, {112, 122, 67}, },
            {{48, 90, -27}, {97, 113, 67}, {114, 114, 81}, {115, 122, 67}, },
            {{48, 113, -40}, {114, 114, 82}, {115, 122, 67}, },
            {{48, 100, -33}, {101, 101, 83}, {102, 122, 67}, },
            {{48, 113, -40}, {114, 114, 84}, {115, 122, 67}, },
            {{48, 90, -27}, {97, 103, 67}, {104, 104, 85}, {105, 122, 67}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {},
            {{0, 127, -10}, },
            {{0, 127, -10}, },
            {{0, 127, -11}, },
            {},
            {{10, 10, 86}, },
            {{0, 127, -13}, },
            {{0, 127, -13}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{48, 57, 61}, },
            {},
            {},
            {},
            {{48, 122, -27}, },
            {{48, 122, -27}, },
            {{48, 122, -27}, },
            {{48, 109, -31}, {110, 110, 87}, {111, 122, 67}, },
            {{48, 90, -27}, {97, 99, 67}, {100, 100, 88}, {101, 122, 67}, },
            {{48, 90, -27}, {97, 114, 67}, {115, 115, 89}, {116, 122, 67}, },
            {{48, 101, -36}, {102, 102, 90}, {103, 122, 67}, },
            {{48, 114, -72}, {115, 115, 91}, {116, 122, 67}, },
            {{48, 107, -34}, {108, 108, 92}, {109, 122, 67}, },
            {{48, 113, -40}, {114, 114, 93}, {115, 122, 67}, },
            {{48, 122, -27}, },
            {{48, 122, -27}, },
            {{48, 109, -31}, {110, 110, 94}, {111, 122, 67}, },
            {{48, 90, -27}, {97, 119, 67}, {120, 120, 95}, {121, 122, 67}, },
            {{48, 109, -31}, {110, 110, 96}, {111, 122, 67}, },
            {{48, 90, -27}, {97, 115, 67}, {116, 116, 97}, {117, 122, 67}, },
            {{48, 122, -27}, },
            {{48, 90, -27}, {97, 104, 67}, {105, 105, 98}, {106, 122, 67}, },
            {{48, 115, -82}, {116, 116, 99}, {117, 122, 67}, },
            {{48, 90, -27}, {97, 116, 67}, {117, 117, 100}, {118, 122, 67}, },
            {{48, 104, -84}, {105, 105, 101}, {106, 122, 67}, },
            {},
            {{48, 100, -33}, {101, 101, 102}, {102, 122, 67}, },
            {{48, 122, -27}, },
            {{48, 100, -33}, {101, 101, 103}, {102, 122, 67}, },
            {{48, 122, -27}, },
            {{48, 100, -33}, {101, 101, 104}, {102, 122, 67}, },
            {{48, 114, -72}, {115, 115, 105}, {116, 122, 67}, },
            {{48, 122, -27}, },
            {{48, 122, -27}, },
            {{48, 122, -27}, },
            {{48, 122, -27}, },
            {{48, 122, -27}, },
            {{48, 109, -31}, {110, 110, 106}, {111, 122, 67}, },
            {{48, 116, -86}, {117, 117, 107}, {118, 122, 67}, },
            {{48, 100, -33}, {101, 101, 108}, {102, 122, 67}, },
            {{48, 107, -34}, {108, 108, 109}, {109, 122, 67}, },
            {{48, 122, -27}, },
            {{48, 113, -40}, {114, 114, 110}, {115, 122, 67}, },
            {{48, 122, -27}, },
            {{48, 100, -33}, {101, 101, 111}, {102, 122, 67}, },
            {{48, 115, -82}, {116, 116, 112}, {117, 122, 67}, },
            {{48, 113, -40}, {114, 114, 113}, {115, 122, 67}, },
            {{48, 122, -27}, },
            {{48, 100, -33}, {101, 101, 114}, {102, 122, 67}, },
            {{48, 115, -82}, {116, 116, 115}, {117, 122, 67}, },
            {{48, 122, -27}, },
            {{48, 122, -27}, },
            {{48, 109, -31}, {110, 110, 116}, {111, 122, 67}, },
            {{48, 122, -27}, },
            {{48, 122, -27}, },
            {{48, 122, -27}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {46, 53, 0, 45, 46, 45, 45, 53, 44, 53, 12, 53, 21, 22, 11, 8, 23, 9, 49, 13, 48, 40, 37, 14, 38, 50, 50, 19, 20, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 46, 46, 46, 34, -1, 51, -1, 47, 47, -1, 52, 10, 7, 1, 5, 3, 4, 6, 48, 35, 2, 36, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 25, 24, 50, 50, 50, 50, 18, 50, 50, 50, 50, 47, 50, 17, 50, 15, 50, 50, 27, 28, 30, 29, 16, 50, 50, 50, 50, 43, 50, 42, 50, 50, 50, 39, 50, 50, 41, 31, 50, 26, 33, 32, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
