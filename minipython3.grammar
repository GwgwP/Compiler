Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; 
	lf = 10;
	ht = 9;
	ff = 12;
	sp = 32;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]]; 

Tokens
	tab = 9;
	plusplus = '++';
	equalequal = '==';
	minusminus = '--'; 
	mineq = '-=';
	pluseq = '+=';
	diveq = '/=';
	multeq = '*=';
	plus = '+';
	minus = '-';
	pow = '**';
	mult = '*';
	mod = '%';
	div = '/';
	assign = '=';
	def = 'def';
	not = 'not';
	logic_and = 'and';
	logic_or = 'or';
	l_br = '[';
	r_br = ']';
	l_par = '(';
	r_par = ')';
	comma=',';
	in = 'in';
	if = 'if';
	while = 'while';
	for = 'for';
	len = 'len';
	min = 'min';
	max = 'max';
	print = 'print';
	return = 'return';
	assert = 'assert';
	noteq = '!=';
	lesseq = '<=';
	greateq = '>=';
	less = '<';
	great = '>';
	true = 'true';
	semi = ':';
	false = 'false';
	else = 'else';
	none = 'None';
	quote = '"';
	blank = (' ' | lf | cr);
	white_space = (sp|ff|ht)*;
	line_comment = '#' not_eol* eol; 
	number = digit+;
	dot = '.';
	id = letter (letter | digit)*;
	string_double_quotes = '"'not_eol* '"';
	string_single_quotes = '''not_eol* ''';
	everything_else = all;

Ignored Tokens
	blank, line_comment;

Productions
  
	goal = commands*;

	commands = 
				{func} function | 
				{stat} statement  ;

	function= 
				{dede} def id l_par argument ? r_par semi statement ;

	argument = 
				{frfrf} id assign_value ? ciav*;


	ciav = 
				{ff} comma id assign_value ?;

	assign_value = 
				{frfrfrrfrf} assign value;


	statement =
				{if_statement} tab* if comparison semi statement | 
				{while_statement} tab* while comparison semi statement |
				{for_statement} tab* [lid]:id in [rid]:id semi statement |
				{return_statement} tab* return expression | 
				{print_statement}tab* print expression comma_expression ? |
				{assign} tab* id assign expression |
				{id_mineq}tab* id mineq expression |
				{id_diveq} tab* id diveq expression |
				{pinakas} tab* id l_br [lex]:expression r_br assign [rex]:expression |
				{assertion} tab* assert expression comma_expression ? |
				{func_call} tab* function_call ;


	function_call =
				{erea} id l_par arglist ? r_par ;
	
	arglist = 
				{ddsasa} expression comma_expression *;

		
	


	comma_expression = 
				{frfrfrfrfe} comma expression;
		
	comparison =
				{true} true|
				{false} false |
				{lesseq} [lpar]:expression lesseq [rpar]:expression |
				{greateq}[lpar]:expression greateq [rpar]:expression |
				{diff} [lpar]: expression noteq [rpar]: expression |   
				{eqeq} [lpar]: expression equalequal [rpar]: expression |  
				{lessc} [lpar]:expression less [rpar]:expression |
				{greatc}[lpar]:expression great [rpar]:expression ;


	expression =
				{addition} expression plus multiplication | 
				{subtraction} expression minus multiplication |
				{multiplication} multiplication |
				{pinakasexp} id l_br expression r_br |
				{identifier} id |
				{red} function_call; 
				
			
						
	multiplication = 
					{pow} power | 
					{division} multiplication div power |
					{modulo} multiplication mod power |
					{multiplication} multiplication mult power;

	power = 
					{value} value | 
					{power} power pow value;
							
	value =
					{identifier} id dot function_call |
					{numb} number |
					{d} string_double_quotes |
					{we} string_single_quotes |
					{nonenonegood} none |
					{par} l_par expression r_par;