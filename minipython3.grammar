Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; 
	lf = 10;
	ff = 12;
	sp = 32;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]]; 

Tokens
	tab = 9;
	plusplus = '++';
	equalequal = '==';
	minusminus = '--'; 
	mineq = '-=';
	pluseq = '+=';
	diveq = '/=';
	multeq = '*=';
	plus = '+';
	minus = '-';
	pow = '**';
	mult = '*';
	mod = '%';
	div = '/';
	noteq = '!=';
	lesseq = '<=';
	greateq = '>=';
	less = '<';
	great = '>';
	assign = '=';
	def = 'def';
	not = 'not';
	logic_and = 'and';
	logic_or = 'or';
	l_br = '[';
	r_br = ']';
	l_par = '(';
	r_par = ')';
	comma=',';
	in = 'in';
	if = 'if';
	while = 'while';
	for = 'for';
	len = 'len';
	min = 'min';
	max = 'max';
	print = 'print';
	return = 'return';
	assert = 'assert';
	true = 'true';
	semi = ':';
	false = 'false';
	else = 'else';
	none = 'None';
	quote = '"';
	blank = (' ' | lf | cr);
	white_space = (sp|ff)*;
	line_comment = '#' not_eol* eol; 
	number = digit+;
	dot = '.';
	id = letter (letter | digit)*;
	string_double_quotes = '"'not_eol* '"';
	string_single_quotes = '''not_eol* ''';
	everything_else = all;

Ignored Tokens
	blank, line_comment;

Productions
  
	goal = commands *;

	commands = 
				{func} function | 
				{stat} statement  ;

	function = 
				{dede} tab * def id l_par argument? r_par semi statement ;

	argument = 
				{frfrf} id assign_value ? ciav*;


	ciav = 
				{ff} comma id assign_value ?;

	assign_value = 
				{frfrfrrfrf} assign value;


	statement =
				{if_statement} tab * if comparison semi statement | 
				{while_statement} tab * while comparison semi statement |
				{for_statement} tab * for [lid]:id in [rid]:id semi statement |
				{return_statement} tab * return expression | 
				{print_statement} tab * print expression comma_expression * |
				{assign} tab * id assign expression |
				{id_mineq}tab * id mineq expression |
				{id_pluseq}tab * id pluseq expression |
				{id_diveq} tab * id diveq expression |
				{pinakas} tab * id l_br [lex]:expression r_br assign [rex]:expression |
				{assertion} tab * assert expression comma_expression? |
				{func_call} tab * function_call ;


	function_call =
				{erea} id l_par arglist ? r_par ;
	
	arglist = 
				{ddsasa} expression comma_expression *;


	comma_expression = 
				{frfrfrfrfe} comma expression;
	
	comparison =
				{dss} afteror |
				{orc} comparison logic_or afteror  ;
				
	afteror = 
				{dd} afterand |
				{andc} afteror logic_and afterand ;
			

	afterand = 
				{w} afternot |
				{notc} not afternot ;

	
	afternot = 
				{true} true|
				{false} false |
				{lesseq} [lpar]:expression lesseq [rpar]:expression |
				{greateq}[lpar]:expression greateq [rpar]:expression |
				{diff} [lpar]: expression noteq [rpar]: expression |   
				{eqeq} [lpar]: expression equalequal [rpar]: expression |  
				{lessc} [lpar]:expression less [rpar]:expression |
				{greatc}[lpar]:expression great [rpar]:expression  ;




	comma_value =
				{cv} comma value;

	expression = 
				{addition_ex} expression plus expressiono | 
				{subtraction_ex} expression minus expressiono|
				{as} expressiono;

	expressiono = 	
				{dew} simple_expression |
				{pinakasexp} id l_br expression r_br |
				{red} function_call |
				{max_ex} max l_par value comma_value * r_par |
				{min_ex} min l_par value comma_value * r_par ;
				


	simple_expression = 
				{plpl} simple_expression plusplus  |
	 			{minmin} simple_expression minusminus |
				{a} factor ;
				
				
	factor = 
				{msa} multiplication|
				{ad} plus factor |
				{as} minus factor ;

						
	multiplication = 
				{pow} power | 
				{division} multiplication div power |
				{modulo} multiplication mod power |
				{multiplication} multiplication mult power;


	power = 
				{value} value | 
				{power} power pow value ;
					
							
	value =	
				{len_exp} len l_par expression r_par |
				{iddot} id dot function_call |
				{identifier} ident |
				{numb} number |
				{d} string_double_quotes |
				{we} string_single_quotes |
				{psr} l_par expression r_par |
				{giiagiga} l_br expression comma_expression * r_br|
				{nonenonegood} none ;

	ident = {e} id;