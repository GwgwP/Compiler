Package minipython;
/*
*	Lydia - Christina Wallace 	3200125
*	Georgia Petsa 				3200155
*	Dimitrios Rousalis 			3200166
*	Miltiadis Tsolkas 			3200213
*
*/

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; /* carriage return (enter) */
	lf = 10; /* line feed '/n' */
	sp = 32;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]]; 

Tokens
	tab = 9;
	plusplus = '++';
	equalequal = '==';
	minusminus = '--'; 
	mineq = '-=';
	pluseq = '+=';
	diveq = '/=';
	multeq = '*=';
	plus = '+';
	minus = '-';
	pow = '**';
	mult = '*';
	mod = '%';
	div = '/';
	noteq = '!=';
	lesseq = '<=';
	greateq = '>=';
	less = '<';
	great = '>';
	assign = '=';
	def = 'def';
	not = 'not';
	logic_and = 'and';
	logic_or = 'or';
	l_br = '[';
	r_br = ']';
	l_par = '(';
	r_par = ')';
	comma=',';
	in = 'in';
	if = 'if';
	while = 'while';
	for = 'for';
	len = 'len';
	min = 'min';
	max = 'max';
	print = 'print';
	return = 'return';
	assert = 'assert';
	true = 'true';
	semi = ':';
	false = 'false';
	else = 'else';
	none = 'None';
	quote = '"';
	blank = (' ' | lf | cr);
	line_comment = '#' not_eol* eol; 
	number = digit+;
	dot = '.';
	id = letter (letter | digit)*;
	string_double_quotes = '"'not_eol* '"';
	string_single_quotes = '''not_eol* ''';
	everything_else = all;

Ignored Tokens
	blank, line_comment;

Productions
  
	goal = commands *{-> New goal([commands])};

	commands = 
				{func} function{-> New commands.func(function)} | 
				{stat} statement{-> New commands.stat(statement)}  ;

	function = 
				{def_func} tab * def id l_par argument? r_par semi statement{-> New function.def_func(id, [argument], statement)} ;

	argument = 
				{arg} id assign_value ? ciav*{-> New argument.arg(id, [assign_value], [ciav])};


	ciav  = 
				{comma_id_as_v} comma id assign_value ?{-> New ciav.comma_id(id) };

	assign_value = 
				{as_v} assign valueno{-> New assign_value.asvalue(valueno.expression)};

	statement =
				{if_statement} tab * if comparison semi statement{-> New statement.if_statement(comparison.comparisons, statement)} | 
				{while_statement} tab * while comparison semi statement {-> New statement.while_statement(comparison.comparisons, statement)} |
				{for_statement} tab * for [lid]:id in [rid]:id semi statement{-> New statement.for_statement(lid, rid, statement)} |
				{return_statement} tab * return expression{-> New statement.return_statement(expression)} | 
				{print_statement} tab * print expression comma_expression * {-> New statement.print_statement(expression, [comma_expression])}|
				{assign_statement} tab * id assign expression{-> New statement.assign_statement(id, expression)} |
				{id_mineq_statement}tab * id mineq expression {-> New statement.id_mineq_statement(id, expression)}|
				{id_pluseq_statement}tab * id pluseq expression{-> New statement.id_pluseq_statement(id, expression)} |
				{id_diveq_statement} tab * id diveq expression{-> New statement.id_diveq_statement(id, expression)} |
				{array_statement} tab * id l_br [lex]:expression r_br assign [rex]:expression {-> New statement.array_statement(id, lex, rex)}|
				{assertion_statement} tab * assert expression comma_expression? {-> New statement.assertion_statement(expression, [comma_expression])} |
				{func_call_statement} tab * function_call{-> New statement.func_call_statement(function_call)} ;


	function_call =
				{func_call} id l_par arglist ? r_par{-> New function_call.func_call(id, [arglist])} ;
	
	arglist = 
				{arglist} expression comma_expression *{-> New arglist.arglist(expression, [comma_expression])};


	comma_expression = 
				{comma_expr} comma expression{-> New comma_expression.comma_expr(expression)};
	
	comparison{-> comparisons} =
				{comparison} afteror{-> afteror.comparisons} |
				{comparison_more} comparison logic_or afteror{-> New comparisons.or(comparison.comparisons, afteror.comparisons)}  ;
				
	afteror{-> comparisons}= 
				{aft_or} afterand{-> afterand.comparisons} |
				{aft_or_more} afteror logic_and afterand{-> New comparisons.and(afteror.comparisons, afterand.comparisons)} ;
			

	afterand{-> comparisons} = 
				{aft_and} afternot{-> afternot.comparisons} |
				{aft_and_not} not afternot{-> New comparisons.not(afternot.comparisons)} ;

	
	afternot {-> comparisons} = 
				{true} true {-> New comparisons.true()}|
				{false} false {-> New comparisons.false()}|
				{lesseq} [lpar]:expression lesseq [rpar]:expression{-> New comparisons.lesseq(lpar, rpar)} |
				{greateq}[lpar]:expression greateq [rpar]:expression{-> New comparisons.greateq(lpar, rpar)} |
				{diff} [lpar]: expression noteq [rpar]: expression{-> New comparisons.diff(lpar, rpar)} |   
				{eqeq} [lpar]: expression equalequal [rpar]: expression{-> New comparisons.eqeq(lpar, rpar)} |  
				{lessc} [lpar]:expression less [rpar]:expression{-> New comparisons.lessc(lpar, rpar)} |
				{greatc}[lpar]:expression great [rpar]:expression{-> New comparisons.greatc(lpar, rpar)}  ;




	comma_value =
				{cv} comma value{-> New comma_value.cv(value.expression)};

	expression = 
				{addition_ex} expression plus expressiono{-> New expression.addition_ex(expression, expressiono.expression)} | 
				{subtraction_ex} expression minus expressiono{-> New expression.subtraction_ex(expression, expressiono.expression)}|
				{expression_subset} expressiono{-> expressiono.expression};

	expressiono{-> expression} = 	
				{max_expr} max l_par value comma_value * r_par {-> New expression.max_expr(value.expression, [comma_value])}|
				{min_expr} min l_par value comma_value * r_par {-> New expression.min_expr(value.expression, [comma_value])}|
				{simple_expr} simple_expression{-> simple_expression.expression} ;
				
				


	simple_expression{-> expression} = 
				{plpl} simple_expression plusplus{-> New expression.plpl(simple_expression.expression) }  |
	 			{minmin} simple_expression minusminus{-> New expression.minmin(simple_expression.expression) } |
				{fac} factor{-> factor.expression} ;
				
	
	factor{-> expression} = 
				{mult_factor} multiplication{-> multiplication.expression}|
				{ad_factor} plus factor{-> New expression.addition_ex(Null, factor.expression)} |
				{min_factor} minus factor{-> New expression.subtraction_ex(Null, factor.expression)} ;


						
	multiplication{-> expression} = 
				{pow} power{-> power.expression} | 
				{division} multiplication div power{-> New expression.division(multiplication.expression, power.expression)} |
				{modulo} multiplication mod power{-> New expression.modulo(multiplication.expression, power.expression)} |
				{multiplication} multiplication mult power{-> New expression.multiplication(multiplication.expression, power.expression)};


	power{-> expression} = 
				{value} value {->value.expression } | 
				{power} power pow value{-> New expression.power(power.expression, value.expression)} ;
					
							
	value{-> expression} =	
				{value_subset} valueno{-> valueno.expression}|
				{pinakas_expr} id l_br expression r_br{-> New expression.pinakas_expr(id, expression)} |
				{func_call_expr} function_call{-> New expression.func_call_expr(function_call)} |
				{len_exp} len l_par expression r_par {-> New expression.len_exp(expression)}|
				{parenthesis_expr_value} l_par expression r_par{-> New expression.parenthesis_expr_value(expression)} |
				{brackets_expr_value} l_br expression comma_expression * r_br{-> New expression.brackets_expr_value(expression, [comma_expression])};
				

	valueno{-> expression} =
				{id_dot_func} id dot function_call{-> New expression.id_dot_func(id, function_call)} |
				{identifier} id {-> New expression.identifier(id)}|
				{number} number {-> New expression.number(number)} |
				{double_quotes} string_double_quotes{-> New expression.double_quotes(string_double_quotes)} |
				{single_quotes} string_single_quotes{-> New expression.single_quotes(string_single_quotes)} |
				{none_value} none{-> New expression.none_value()} ;


Abstract Syntax Tree
	goal = commands *;

	commands = 
				{func} function | 
				{stat} statement  ;

	function = 
				{def_func} id argument* statement;

	argument = {arg}id assign_value* ciav*;
	ciav = {comma_id} id;
	assign_value = {asvalue} expression;
	
	statement =
				{if_statement} comparisons statement | 
				{while_statement} comparisons statement |
				{for_statement} [lid]:id [rid]:id statement |
				{return_statement} expression | 
				{print_statement} expression comma_expression * |
				{assign_statement} id expression |
				{id_mineq_statement}id expression |
				{id_pluseq_statement} id  expression |
				{id_diveq_statement}  id expression |
				{array_statement} id [lex]:expression  [rex]:expression |
				{assertion_statement} expression comma_expression * |
				{func_call_statement} function_call ;
	
	function_call =
				{func_call} id arglist* ;
	
	arglist = 
				{arglist} expression comma_expression*;


	comma_expression = 
				{comma_expr} expression;

	comparisons =
				{or} [l]:comparisons [r]:comparisons |		
				{and} [l]:comparisons [r]:comparisons |		
				{not} comparisons |
				{true}|
				{false}|
				{lesseq} [lpar]:expression  [rpar]:expression |
				{greateq}[lpar]:expression  [rpar]:expression |
				{diff} [lpar]: expression  [rpar]: expression |   
				{eqeq} [lpar]: expression  [rpar]: expression |  
				{lessc} [lpar]:expression [rpar]:expression |
				{greatc}[lpar]:expression [rpar]:expression  ;

	comma_value =
				{cv} expression;

	expression = 
				{addition_ex} [l]:expression  [r]:expression | 
				{subtraction_ex} [l]:expression  [r]:expression|
				{max_expr}   expression comma_value *  |
				{min_expr}   expression comma_value *  |
				{plpl} expression |
	 			{minmin} expression  |
				{division} [l]:expression [r]:expression |
				{modulo} [l]:expression [r]:expression |
				{multiplication} [l]:expression [r]:expression|
				{power}  [l]:expression [r]:expression |
				{pinakas_expr} id expression |
				{func_call_expr} function_call |
				{len_exp}  expression  |
				{parenthesis_expr_value}  expression|
				{brackets_expr_value} expression comma_expression* |
				{id_dot_func} id  function_call |
				{identifier} id |
				{number} number |
				{double_quotes} string_double_quotes |
				{single_quotes} string_single_quotes |
				{none_value} ;
