Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; 
	lf = 10;
	ht = 9;
	ff = 12;
	sp = 32;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]]; 

Tokens
	tab = 9;
	plusplus = '++';
	equalequal = '==';
	minusminus = '--'; 
	mineq = '-=';
	pluseq = '+=';
	diveq = '/=';
	multeq = '*=';
	plus = '+';
	minus = '-';
	pow = '**';
	mult = '*';
	mod = '%';
	div = '/';
	eq = '=';
	def = 'def';
	not = 'not';
	logic_and = 'and';
	logic_or = 'or';
	l_br = '[';
	r_br = ']';
	l_par = '(';
	r_par = ')';
	comma=',';
	in = 'in';
	if = 'if';
	while = 'while';
	for = 'for';
	len = 'len';
	min = 'min';
	max = 'max';
	print = 'print';
	return = 'return';
	assert = 'assert';
	noteq = '!=';
	lesseq = '<=';
	greateq = '>=';
	less = '<';
	great = '>';
	true = 'true';
	semi = ':';
	false = 'false';
	else = 'else';
	none = 'None';
	quote = '"';
	blank = (' ' | lf | cr);
	white_space = (sp|ff|ht)*;
	line_comment = '#' not_eol* eol; 
	number = digit+;
	dot = '.';
	id = letter (letter | digit)*;
	string_double_quotes = '"'not_eol* '"';
	string_single_quotes = '''not_eol* ''';
	everything_else = all;

Ignored Tokens
	blank, line_comment;

Productions

// maybe we need to add mult , div , add , sub , ++ , -- and , or and not so we can specify the priority 
  
  goal = commands*;

  commands = {func} function | {stat} statement;

  function= def id l_par argument ? r_par semi statement;
  argument =id assign_value ? ciav*;
  ciav = comma id assign_value;
  assign_value = eq value;
  statement =
  	{if_statement} tab* if comparison semi statement |
    {while_statement} tab* while comparison semi statement |
    {for_statement} tab* [lid]:id in [rid]:id semi statement |
    {return_statement} tab* return expression | 
    {array_statement} tab* id l_br [lex]:expression r_br eq [rex]:expression ;

comparison ={log_and}logical_and |
            {log_or}logical_or|
            {notc} logical_not|
            {eqc} [lpar]:expression equalequal [rpar]:expression |
            {notcc} [lpar]:expression noteq [rpar]:expression |
            {greatc} [lpar]:expression great [rpar]:expression |
            {grcc} [lpar]:expression greateq [rpar]:expression |
            {lessc} [lpar]:expression less [rpar]:expression |
            {lcc} [lpar]:expression lesseq [rpar]:expression |
            {true} true |
            {false} false;
  



expression =
    {array_expression} id l_br expression r_br |
    {value} value |
    {identifier} id |
    {length_expression} len l_par expression r_par ;

// dilono proteraiotita?
logical_not = not something;
logical_and = [l_com]:something logic_and [r_com]:something;
logical_or= [la]:logical_and| [ln]:logical_not | [lc]:comparison 
                logic_or 
             [ra]:logical_and| [rn]:logical_not | [rc]:comparison;
             
  
value = 
    	{num} number |
    	{str_d} string_double_quotes |
    	{str_s} string_single_quotes |
    	{none} none;

something ={identifier}id|
			{numb}number|
			{par} l_par expression r_par|
            comparison;
