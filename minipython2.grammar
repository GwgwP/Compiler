Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; 
	lf = 10;
	ht = 9;
	ff = 12;
	sp = 32;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]]; 

Tokens
	tab = 9;
	plusplus = '++';
	equalequal = '==';
	minusminus = '--'; 
	mineq = '-=';
	pluseq = '+=';
	diveq = '/=';
	multeq = '*=';
	plus = '+';
	minus = '-';
	pow = '**';
	mult = '*';
	mod = '%';
	div = '/';
	eq = '=';
	def = 'def';
	not = 'not';
	logic_and = 'and';
	logic_or = 'or';
	l_br = '[';
	r_br = ']';
	l_par = '(';
	r_par = ')';
	comma=',';
	in = 'in';
	if = 'if';
	while = 'while';
	for = 'for';
	len = 'len';
	min = 'min';
	max = 'max';
	print = 'print';
	return = 'return';
	assert = 'assert';
	noteq = '!=';
	lesseq = '<=';
	greateq = '>=';
	less = '<';
	great = '>';
	true = 'true';
	semi = ':';
	false = 'false';
	else = 'else';
	none = 'None';
	quote = '"';
	blank = (' ' | lf | cr);
	white_space = (sp|ff|ht)*;
	line_comment = '#' not_eol* eol; 
	number = digit+;
	dot = '.';
	id = letter (letter | digit)*;
	string_double_quotes = '"'not_eol* '"';
	string_single_quotes = '''not_eol* ''';
	everything_else = all;

Ignored Tokens
	blank, line_comment;

Productions
  
	goal = commands*;

	commands = {func} function | {stat} statement  ;

	function= {dede} def id l_par argument ? r_par semi statement ;

	argument = {frfrf} id assign_value ? ciav*;


	ciav = {ff} comma id assign_value ?;

	assign_value = {frfrfrrfrf} eq value?;


	statement =
		{if_statement} tab* if comparison semi statement | 
		{assign}tab* id eq expression |
		{print}tab* print expression;
		
		
	comparison =
				{true} true|
				{false} false |
				{lesseq} [lpar]:expression lesseq [rpar]:expression |
				{greateq}[lpar]:expression greateq [rpar]:expression |
				{diff} [lpar]: expression noteq [rpar]: expression |   
				{eqeq} [lpar]: expression equalequal [rpar]: expression |  
				{lessc} [lpar]:expression less [rpar]:expression |
				{greatc}[lpar]:expression great [rpar]:expression ;


	expression =
				{addition} expression plus multiplication | 
				{subtraction} expression minus multiplication |
				{multiplication} multiplication ;
				
			
						
	multiplication = 
					{pow} power | 
					{division} multiplication div power |
					{modulo} multiplication mod power |
					{multiplication} multiplication mult power;

	power = 
			{value} value | 
			{power} power pow value;
							
	value ={identifier}id|
				{numb}number|
				{par} l_par expression r_par;